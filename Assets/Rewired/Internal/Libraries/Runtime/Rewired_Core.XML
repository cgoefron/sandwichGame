<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rewired_Core</name>
    </assembly>
    <members>
        <member name="T:Rewired.ControllerStatusChangedEventArgs">
            <summary>
            Event args returned by controller connect and disconnect events.
            Contains information about the controller that was changed.
            </summary>
        </member>
        <member name="M:Rewired.ControllerStatusChangedEventArgs.#ctor(System.String,System.Int32,Rewired.ControllerType)">
            <summary>
            Constructor.
            </summary>
            <param name="name">The name of the controller.</param>
            <param name="uniqueId">The id of the controller.</param>
            <param name="controllerType">The type of the controller.</param>
        </member>
        <member name="P:Rewired.ControllerStatusChangedEventArgs.name">
            <summary>
            The name of the controller.
            </summary>
        </member>
        <member name="P:Rewired.ControllerStatusChangedEventArgs.controllerId">
            <summary>
            The id of the controller. This can be used along with controllerType to get the controller.
            For joysticks, this is equal to Joystick.id.
            </summary>
        </member>
        <member name="P:Rewired.ControllerStatusChangedEventArgs.controllerType">
            <summary>
            The type of the controller. This can be used along with controllerId to get the controller.
            </summary>
        </member>
        <member name="T:Rewired.InputActionEventData">
            <summary>
            Event data returned by an Input Action update event. Use this to get information about the input event.
            </summary>
        </member>
        <member name="M:Rewired.InputActionEventData.GetAxis">
            <summary>
            Gets the axis value of an Action.
            </summary>
            <returns>The axis value.</returns>
        </member>
        <member name="M:Rewired.InputActionEventData.GetAxisPrev">
            <summary>
            Gets the axis value of an Action during the previous frame..
            </summary>
            <returns>The previous axis value.</returns>
        </member>
        <member name="M:Rewired.InputActionEventData.GetAxisTimeActive">
            <summary>
            Gets the length of time in seconds that an axis has been continuously active. Returns 0 if the axis is not currently active.
            </summary>
            <returns>The duration the axis has been continuously active.</returns>
        </member>
        <member name="M:Rewired.InputActionEventData.GetAxisTimeInactive">
            <summary>
            Gets the length of time in seconds that an axis has been inactive. Returns 0 if the axis is currently active.
            </summary>
            <returns>The duration the axis has been continuously inactive.</returns>
        </member>
        <member name="M:Rewired.InputActionEventData.GetAxisRaw">
            <summary>
            Gets the raw axis value of an Action. The raw value excludes any digital axis simulation modification by the Input Behavior assigned to this Action.
            This raw value is modified by deadzone and axis calibration settings in the controller. To get truly raw values, you must get the raw value directly from the Controller element.
            </summary>
            <returns>The raw axis value.</returns>
        </member>
        <member name="M:Rewired.InputActionEventData.GetAxisRawPrev">
            <summary>
            Gets the raw axis value of an Action during the previous frame. The raw value excludes any digital axis simulation modification by the Input Behavior assigned to this Action.
            This raw value is modified by deadzone and axis calibration settings in the controller. To get truly raw values, you must get the raw value directly from the Controller element.
            </summary>
            <returns>The previous raw axis value.</returns>
        </member>
        <member name="M:Rewired.InputActionEventData.GetAxisRawTimeActive">
            <summary>
            Gets the length of time in seconds that an axis has been continuously active as calculated from the raw value. Returns 0 if the axis is not currently active.
            </summary>
            <returns>The duration the raw axis has been continuously active.</returns>
        </member>
        <member name="M:Rewired.InputActionEventData.GetAxisRawTimeInactive">
            <summary>
            Gets the length of time in seconds that an axis has been inactive as calculated from the raw value. Returns 0 if the axis is currently active.
            </summary>
            <returns>The duration the axis has been continuously inactive.</returns>
        </member>
        <member name="M:Rewired.InputActionEventData.GetButton">
            <summary>
            Gets the button held state of an Action. This will return TRUE as long as the button is held.
            This also applies to axes being used as buttons.
            </summary>
            <returns>The button held state</returns>
        </member>
        <member name="M:Rewired.InputActionEventData.GetButtonPrev">
            <summary>
            Gets the button held state of an Action during the previous frame.
            </summary>
            <returns>The previous button held state</returns>
        </member>
        <member name="M:Rewired.InputActionEventData.GetButtonDown">
            <summary>
            Gets the button just pressed state of an Action. This will only return TRUE only on the first frame the button is pressed or for the duration of the Button Down Buffer time limit if set in the Input Behavior assigned to this Action.
            This also applies to axes being used as buttons.
            </summary>
            <returns>The button just pressed state</returns>
        </member>
        <member name="M:Rewired.InputActionEventData.GetButtonUp">
            <summary>
            Get the button just released state for an Action. This will only return TRUE for the first frame the button is released.
            This also applies to axes being used as buttons.
            </summary>
            <returns>The button just released state</returns>
        </member>
        <member name="M:Rewired.InputActionEventData.GetButtonDoublePressDown">
            <summary>
            Gets the button double pressed state of an Action. This will return TRUE only on the first frame of a double press.
            </summary>
            <returns>The button just pressed state</returns>
        </member>
        <member name="M:Rewired.InputActionEventData.GetButtonDoublePressHold">
            <summary>
            Gets the button double pressed and held state of an Action. This will return TRUE after a double press and the button is then held.
            The double press speed is set in the Input Behavior assigned to the Action.
            </summary>
            <returns>The button held state</returns>
        </member>
        <member name="M:Rewired.InputActionEventData.GetButtonTimePressed">
            <summary>
            Gets the length of time in seconds that a button has been continuously held down. Returns 0 if the button is not currently pressed.
            </summary>
            <returns>The duration of the button hold.</returns>
        </member>
        <member name="M:Rewired.InputActionEventData.GetButtonTimeUnpressed">
            <summary>
            Gets the length of time in seconds that a button has not been pressed. Returns 0 if the button is currently pressed.
            </summary>
            <returns>The duration of the button inactivity.</returns>
        </member>
        <member name="M:Rewired.InputActionEventData.GetNegativeButton">
            <summary>
            Gets the negative button held state of an Action. This will return TRUE as long as the negative button is held.
            This also applies to axes being used as buttons.
            </summary>
            <returns>The negative button held state</returns>
        </member>
        <member name="M:Rewired.InputActionEventData.GetNegativeButtonPrev">
            <summary>
            Gets the negative button held state of an Action during the previous frame.
            </summary>
            <returns>The previous negative button held state</returns>
        </member>
        <member name="M:Rewired.InputActionEventData.GetNegativeButtonDown">
            <summary>
            Gets the negative button just pressed state of an Action. This will only return TRUE only on the first frame the negative button is pressed or for the duration of the Button Down Buffer time limit if set in the Input Behavior assigned to this Action.
            This also applies to axes being used as buttons.
            </summary>
            <returns>The negative button just pressed state</returns>
        </member>
        <member name="M:Rewired.InputActionEventData.GetNegativeButtonUp">
            <summary>
            Get the negative button just released state for all Actions. This will only return TRUE for the first frame the negative button is released.
            This will return TRUE each time any negative button is released even if others are being held down.
            This also applies to axes being used as buttons.
            </summary>
            <returns>The negative button just released state</returns>
        </member>
        <member name="M:Rewired.InputActionEventData.GetNegativeButtonDoublePressDown">
            <summary>
            Gets the negative button double pressed state of an Action. This will return TRUE only on the first frame of a double press.
            </summary>
            <returns>The negative button just pressed state</returns>
        </member>
        <member name="M:Rewired.InputActionEventData.GetNegativeButtonDoublePressHold">
            <summary>
            Gets the negative button double pressed and held state of an Action. This will return TRUE after a double press and the negative button is then held.
            The double press speed is set in the Input Behavior assigned to the Action.
            </summary>
            <returns>The negative button held state</returns>
        </member>
        <member name="M:Rewired.InputActionEventData.GetNegativeButtonTimePressed">
            <summary>
            Gets the length of time in seconds that a negative button has been continuously held down. Returns 0 if the negative button is not currently pressed.
            </summary>
            <returns>The duration of the negative button hold.</returns>
        </member>
        <member name="M:Rewired.InputActionEventData.GetNegativeButtonTimeUnpressed">
            <summary>
            Gets the length of time in seconds that a negative button has not been pressed. Returns 0 if the negative button is currently pressed.
            </summary>
            <returns>The duration of the negative button inactivity.</returns>
        </member>
        <member name="M:Rewired.InputActionEventData.GetCurrentInputSources">
            <summary>
            Gets a list of all the input sources that contributed to the value of the Action in the current frame.
            </summary>
            <returns>Input source data</returns>
        </member>
        <member name="M:Rewired.InputActionEventData.IsCurrentInputSource(Rewired.ControllerType)">
            <summary>
            Checks whether any controller of type contributed input to this Action in the current frame.
            </summary>
            <param name="controllerType">Type of the controller</param>
            <returns>Whether any controller of type contributed to the Action this frame.</returns>
        </member>
        <member name="M:Rewired.InputActionEventData.IsCurrentInputSource(Rewired.ControllerType,System.Int32)">
            <summary>
            Checks whether a particular controller contributed input to this Action in the current frame.
            </summary>
            <param name="controllerType">Type of the controller</param>
            <param name="controllerId">Id of the Controller</param>
            <returns>Whether the controller contributed to the Action this frame.</returns>
        </member>
        <member name="M:Rewired.InputActionEventData.IsCurrentInputSource(Rewired.Controller)">
            <summary>
            Checks whether a particular controller contributed input to this Action in the current frame.
            </summary>
            <param name="controller">Controller</param>
            <returns>Whether the controller contributed to the Action this frame.</returns>
        </member>
        <member name="P:Rewired.InputActionEventData.player">
            <summary>
            The Player that generated this event.
            </summary>
        </member>
        <member name="P:Rewired.InputActionEventData.actionName">
            <summary>
            The scripting name of the input Action of this event.
            </summary>
        </member>
        <member name="P:Rewired.InputActionEventData.actionDescriptiveName">
            <summary>
            The descriptive name of the input Action of this event.
            </summary>
        </member>
        <member name="T:Rewired.ControllerPollingInfo">
            <summary>
            Contains polling information recieved from a controller element polling request.
            Use this to determine which controller element was activated for use in control remapping.
            </summary>
        </member>
        <member name="P:Rewired.ControllerPollingInfo.success">
            <summary>
            Was user input detected? If false, no user input was detected.
            </summary>
        </member>
        <member name="P:Rewired.ControllerPollingInfo.playerId">
            <summary>
            The player id that generated this input. This value is only valid if the controller is assigned to a Player and polling was called on or through Player.
            </summary>
        </member>
        <member name="P:Rewired.ControllerPollingInfo.controllerId">
            <summary>
            The id of the controller that returned input.
            </summary>
        </member>
        <member name="P:Rewired.ControllerPollingInfo.controllerName">
            <summary>
            The name of the controller that returned input.
            </summary>
        </member>
        <member name="P:Rewired.ControllerPollingInfo.controllerType">
            <summary>
            The type of the controller that returned input.
            </summary>
        </member>
        <member name="P:Rewired.ControllerPollingInfo.elementType">
            <summary>
            The type of element on the controller that returned input.
            </summary>
        </member>
        <member name="P:Rewired.ControllerPollingInfo.elementIndex">
            <summary>
            The index to the controller element that returned input. In combination with controllerType, this can be used to determine the exact button or axis index.
            </summary>
        </member>
        <member name="P:Rewired.ControllerPollingInfo.axisPole">
            <summary>
            The pole of the axis that was activated (+/-). This is only relevant if elementType is Axis.
            </summary>
        </member>
        <member name="P:Rewired.ControllerPollingInfo.elementIdentifierName">
            <summary>
            The name of the element identifier on the controller that returned input. This gives you the human-readable name of the element such as Left Stick X -.
            </summary>
        </member>
        <member name="P:Rewired.ControllerPollingInfo.elementIdentifierId">
            <summary>
            The id of the element identifier on the controller that returned input. This points back to the human-readable element identifier on a controller such as Left Stick X.
            This is used when creating an ActionElementMap in a ControllerMap to associate a controller element with an Action.
            </summary>
        </member>
        <member name="P:Rewired.ControllerPollingInfo.keyboardKey">
            <summary>
            The keyboard key that returned input. This is only valid if controllerType is Keyboard.
            </summary>
        </member>
        <member name="T:Rewired.ElementAssignmentConflictInfo">
            <summary>
            Information about a controller element assignment conflict.
            </summary>
        </member>
        <member name="P:Rewired.ElementAssignmentConflictInfo.isConflict">
            <summary>
            Was an assignment conflict found?
            </summary>
        </member>
        <member name="P:Rewired.ElementAssignmentConflictInfo.isUserAssignable">
            <summary>
            Is the Map Category of this Action user assignable?
            </summary>
        </member>
        <member name="P:Rewired.ElementAssignmentConflictInfo.playerId">
            <summary>
            The id of the Player that contains the map that has the conflicting assignment.
            </summary>
        </member>
        <member name="P:Rewired.ElementAssignmentConflictInfo.controllerType">
            <summary>
            The controller type of the controller that contains the conflict.
            </summary>
        </member>
        <member name="P:Rewired.ElementAssignmentConflictInfo.controllerId">
            <summary>
            The id of the controller that contains the conflict. Use with controllerType to get the Controller.
            </summary>
        </member>
        <member name="P:Rewired.ElementAssignmentConflictInfo.elementMapId">
            <summary>
            The unique id of the ActionElementMap with the assignment confilict.
            </summary>
        </member>
        <member name="P:Rewired.ElementAssignmentConflictInfo.elementType">
            <summary>
            The controller element type of the conflicting ActionElementMap.
            </summary>
        </member>
        <member name="P:Rewired.ElementAssignmentConflictInfo.elementIdentifierId">
            <summary>
            The element identifier id of the conflicting ActionElementMap.
            </summary>
        </member>
        <member name="P:Rewired.ElementAssignmentConflictInfo.keyCode">
            <summary>
            The key code of the keyboard key assignment that is conflicting. (Only applies to keyboard maps.)
            </summary>
        </member>
        <member name="P:Rewired.ElementAssignmentConflictInfo.modifierKeyFlags">
            <summary>
            The modifier key flags of the keyboard key assignment that is conflicting. (Only applies to keyboard maps.)
            </summary>
        </member>
        <member name="T:Rewired.ElementAssignmentConflictCheck">
            <summary>
            A struct for performing a controller element assignment conflict check.
            </summary>
        </member>
        <member name="F:Rewired.ElementAssignmentConflictCheck.elementAssignmentType">
            <summary>
            The type of the desired assignment.
            </summary>
        </member>
        <member name="F:Rewired.ElementAssignmentConflictCheck.playerId">
            <summary>
            The Player that is being assigned to.
            </summary>
        </member>
        <member name="F:Rewired.ElementAssignmentConflictCheck.controllerType">
            <summary>
            The type of controller that is being assigned to.
            </summary>
        </member>
        <member name="F:Rewired.ElementAssignmentConflictCheck.controllerId">
            <summary>
            The id of the controller that is being assigned to.
            </summary>
        </member>
        <member name="F:Rewired.ElementAssignmentConflictCheck.controllerMapId">
            <summary>
            The unique id of the controller map that is being assigned to. Corresponds to ControllerMap.id.
            </summary>
        </member>
        <member name="F:Rewired.ElementAssignmentConflictCheck.controllerMapCategoryId">
            <summary>
            The map category id of the controller map that is being assigned to. (Optional)
            </summary>
        </member>
        <member name="F:Rewired.ElementAssignmentConflictCheck.elementMapId">
            <summary>
            The unique id of the ActionElementMap that is being assigned to. Only used if replacing an assignment. (Optional)
            </summary>
        </member>
        <member name="F:Rewired.ElementAssignmentConflictCheck.elementIdentifierId">
            <summary>
            The element identifier id of the controller element that is being assigned. (Not used for keyboard assignments.)
            </summary>
        </member>
        <member name="F:Rewired.ElementAssignmentConflictCheck.axisRange">
            <summary>
            The range of the axis that is being assigned. (Only used for axis assignments.)
            </summary>
        </member>
        <member name="F:Rewired.ElementAssignmentConflictCheck.keyboardKey">
            <summary>
            The keyboard key that is being assigned. (Only used for keyboard assignments.)
            </summary>
        </member>
        <member name="F:Rewired.ElementAssignmentConflictCheck.modifierKeyFlags">
            <summary>
            The modifiers keys for the keyboard key that is being assigned. (Only used for keyboard assignments.)
            </summary>
        </member>
        <member name="F:Rewired.ElementAssignmentConflictCheck.actionId">
            <summary>
            The id of the Action being assigned.
            </summary>
        </member>
        <member name="F:Rewired.ElementAssignmentConflictCheck.axisContribution">
            <summary>
            The positive / negative contribution for the assignment. (Only used for split axes and buttons.)
            </summary>
        </member>
        <member name="F:Rewired.ElementAssignmentConflictCheck.invert">
            <summary>
            Is the axis inverted? (Only used for full axis assignments.)
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignmentConflictCheck.#ctor(System.Int32,Rewired.ControllerType,System.Int32,System.Int32,Rewired.ElementAssignmentType,System.Int32,Rewired.AxisRange,UnityEngine.KeyCode,Rewired.ModifierKeyFlags,System.Int32,Rewired.Pole,System.Boolean)">
            <summary>
            A struct for use in element assignment conflict checking.
            Overload for complete assignment.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignmentConflictCheck.#ctor(System.Int32,Rewired.ControllerType,System.Int32,System.Int32,Rewired.ElementAssignmentType,System.Int32,Rewired.AxisRange,UnityEngine.KeyCode,Rewired.ModifierKeyFlags,System.Int32,Rewired.Pole,System.Boolean,System.Int32)">
            <summary>
            A struct for use in element assignment conflict checking.
            Overload for complete assignment to replace an existing element map.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignmentConflictCheck.#ctor(System.Int32,Rewired.ControllerType,System.Int32,System.Int32,Rewired.ControllerElementType,System.Int32,Rewired.AxisRange,UnityEngine.KeyCode,Rewired.ModifierKeyFlags,System.Int32,Rewired.Pole,System.Boolean)">
            <summary>
            A struct for use in element assignment conflict checking.
            Overload for complete assignment.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignmentConflictCheck.#ctor(System.Int32,Rewired.ControllerType,System.Int32,System.Int32,Rewired.ControllerElementType,System.Int32,Rewired.AxisRange,UnityEngine.KeyCode,Rewired.ModifierKeyFlags,System.Int32,Rewired.Pole,System.Boolean,System.Int32)">
            <summary>
            A struct for use in element assignment conflict checking.
            Overload for complete assignment to replace an existing element map.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignmentConflictCheck.#ctor(System.Int32,Rewired.ControllerType,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            A struct for use in element assignment conflict checking.
            Overload for assignment of a full axis.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignmentConflictCheck.#ctor(System.Int32,Rewired.ControllerType,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            A struct for use in element assignment conflict checking.
            Overload for assignment of a full axis to replace an existing element map..
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignmentConflictCheck.#ctor(System.Int32,Rewired.ControllerType,System.Int32,System.Int32,System.Int32,Rewired.AxisRange,System.Int32,Rewired.Pole)">
            <summary>
            A struct for use in element assignment conflict checking.
            Overload for assignment of a split axis.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignmentConflictCheck.#ctor(System.Int32,Rewired.ControllerType,System.Int32,System.Int32,System.Int32,Rewired.AxisRange,System.Int32,Rewired.Pole,System.Int32)">
            <summary>
            A struct for use in element assignment conflict checking.
            Overload for assignment of a split axis to replace an existing element map.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignmentConflictCheck.#ctor(System.Int32,Rewired.ControllerType,System.Int32,System.Int32,System.Int32,System.Int32,Rewired.Pole)">
            <summary>
            A struct for use in element assignment conflict checking.
            Overload for assignment of a button.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignmentConflictCheck.#ctor(System.Int32,Rewired.ControllerType,System.Int32,System.Int32,System.Int32,System.Int32,Rewired.Pole,System.Int32)">
            <summary>
            A struct for use in element assignment conflict checking.
            Overload for assignment of a button to replace an existing element map..
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignmentConflictCheck.#ctor(System.Int32,Rewired.ControllerType,System.Int32,System.Int32,UnityEngine.KeyCode,Rewired.ModifierKeyFlags,System.Int32,Rewired.Pole)">
            <summary>
            A struct for use in element assignment conflict checking.
            Overload for assignment of a keyboard key.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignmentConflictCheck.#ctor(System.Int32,Rewired.ControllerType,System.Int32,System.Int32,UnityEngine.KeyCode,Rewired.ModifierKeyFlags,System.Int32,Rewired.Pole,System.Int32)">
            <summary>
            A struct for use in element assignment conflict checking.
            Overload for assignment of a keyboard key to replace an existing element map..
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignmentConflictCheck.ToElementAssignment">
            <summary>
            Converts ElementAssignmentConflictChec into an ElementAssignment.
            Can be used to make an element assignment.
            </summary>
            <returns>ElementAssignment</returns>
        </member>
        <member name="M:Rewired.ElementAssignmentConflictCheck.ToFullAxisAssignment">
            <summary>
            Converts ElementAssignmentConflictChec into an ElementAssignment for a full axis assignment.
            Can be used to make an element assignment.
            </summary>
            <returns>ElementAssignment</returns>
        </member>
        <member name="M:Rewired.ElementAssignmentConflictCheck.ToSplitAxisAssignment">
            <summary>
            Converts ElementAssignmentConflictChec into an ElementAssignment for a split axis assignment.
            Can be used to make an element assignment.
            </summary>
            <returns>ElementAssignment</returns>
        </member>
        <member name="M:Rewired.ElementAssignmentConflictCheck.ToButtonAssignment">
            <summary>
            Converts ElementAssignmentConflictChec into an ElementAssignment for a button assignment.
            Can be used to make an element assignment.
            </summary>
            <returns>ElementAssignment</returns>
        </member>
        <member name="M:Rewired.ElementAssignmentConflictCheck.ToKeyboardKeyAssignment">
            <summary>
            Converts ElementAssignmentConflictCheck into an ElementAssignment for a keyboard key assignment.
            Can be used to make an element assignment.
            </summary>
            <returns>ElementAssignment</returns>
        </member>
        <member name="T:Rewired.ElementAssignment">
            <summary>
            A struct for making a controller element assignement.
            </summary>
        </member>
        <member name="F:Rewired.ElementAssignment.elementMapId">
            <summary>
            The id of the ActionElementMap that this assignment will be replacing. (Optional)
            </summary>
        </member>
        <member name="F:Rewired.ElementAssignment.elementIdentifierId">
            <summary>
            The element identifier id the Action will be bound to.
            </summary>
        </member>
        <member name="F:Rewired.ElementAssignment.axisRange">
            <summary>
            The range of the axis of this assignment. Use Positive or Negative to assign a split axis or Full for a single unified axis assignment.
            </summary>
        </member>
        <member name="F:Rewired.ElementAssignment.keyboardKey">
            <summary>
            The keyboard key the Action will be bound to. Only used for keyboard maps.
            </summary>
        </member>
        <member name="F:Rewired.ElementAssignment.modifierKeyFlags">
            <summary>
            The keyboard modifiers the Action will be bound to. Use this in combination with keyboardKey to make a modified key assignment. Only used for keyboard maps.
            </summary>
        </member>
        <member name="F:Rewired.ElementAssignment.actionId">
            <summary>
            The id of the Action that will be bound to the controller element.
            </summary>
        </member>
        <member name="F:Rewired.ElementAssignment.axisContribution">
            <summary>
            Does this Action contribute positive or negative values to the final Action's input value? Used for split axis and button/key assignments.
            </summary>
        </member>
        <member name="F:Rewired.ElementAssignment.invert">
            <summary>
            Is the axis inverted? Used only for axis assignments.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignment.#ctor(Rewired.ElementAssignmentType,System.Int32,Rewired.AxisRange,UnityEngine.KeyCode,Rewired.ModifierKeyFlags,System.Int32,Rewired.Pole,System.Boolean,System.Int32)">
            <summary>
            A struct for use in element assignment.
            Overload for complete assignment to replace an existing element map.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignment.#ctor(Rewired.ControllerType,Rewired.ControllerElementType,System.Int32,Rewired.AxisRange,UnityEngine.KeyCode,Rewired.ModifierKeyFlags,System.Int32,Rewired.Pole,System.Boolean,System.Int32)">
            <summary>
            A struct for use in element assignment.
            Overload for complete assignment to replace an existing element map.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignment.#ctor(Rewired.ElementAssignmentType,System.Int32,Rewired.AxisRange,UnityEngine.KeyCode,Rewired.ModifierKeyFlags,System.Int32,Rewired.Pole,System.Boolean)">
            <summary>
            A struct for use in element assignment.
            Overload for complete new assignment.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignment.#ctor(Rewired.ControllerType,Rewired.ControllerElementType,System.Int32,Rewired.AxisRange,UnityEngine.KeyCode,Rewired.ModifierKeyFlags,System.Int32,Rewired.Pole,System.Boolean)">
            <summary>
            A struct for use in element assignment.
            Overload for complete new assignment.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignment.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            A struct for use in element assignment.
            Overload for assignment of a full axis.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignment.#ctor(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            A struct for use in element assignment.
            Overload for assignment of a full axis to replace an existing element map.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignment.#ctor(System.Int32,Rewired.AxisRange,System.Int32,Rewired.Pole)">
            <summary>
            A struct for use in element assignment.
            Overload for assignment of a split axis.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignment.#ctor(System.Int32,Rewired.AxisRange,System.Int32,Rewired.Pole,System.Int32)">
            <summary>
            A struct for use in element assignment.
            Overload for assignment of a split axis to replace an existing element map.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignment.#ctor(System.Int32,System.Int32,Rewired.Pole)">
            <summary>
            A struct for use in element assignment.
            Overload for assignment of a button.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignment.#ctor(System.Int32,System.Int32,Rewired.Pole,System.Int32)">
            <summary>
            A struct for use in element assignment.
            Overload for assignment of a button to replace an existing element map.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignment.#ctor(UnityEngine.KeyCode,Rewired.ModifierKeyFlags,System.Int32,Rewired.Pole)">
            <summary>
            A struct for use in element assignment.
            Overload for assignment of a keyboard key.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignment.#ctor(UnityEngine.KeyCode,Rewired.ModifierKeyFlags,System.Int32,Rewired.Pole,System.Int32)">
            <summary>
            A struct for use in element assignment.
            Overload for assignment of a keyboard key to replace an existing element map.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignment.CompleteAssignment(Rewired.ElementAssignmentType,System.Int32,Rewired.AxisRange,UnityEngine.KeyCode,Rewired.ModifierKeyFlags,System.Int32,Rewired.Pole,System.Boolean,System.Int32)">
            <summary>
            Creates a struct for use in element assignment.
            For complete assignment to replace an existing element map.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignment.CompleteAssignment(Rewired.ControllerType,Rewired.ControllerElementType,System.Int32,Rewired.AxisRange,UnityEngine.KeyCode,Rewired.ModifierKeyFlags,System.Int32,Rewired.Pole,System.Boolean,System.Int32)">
            <summary>
            Creates a struct for use in element assignment.
            For complete assignment to replace an existing element map.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignment.CompleteAssignment(Rewired.ElementAssignmentType,System.Int32,Rewired.AxisRange,UnityEngine.KeyCode,Rewired.ModifierKeyFlags,System.Int32,Rewired.Pole,System.Boolean)">
            <summary>
            Creates a struct for use in element assignment.
            For complete new assignment.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignment.CompleteAssignment(Rewired.ControllerType,Rewired.ControllerElementType,System.Int32,Rewired.AxisRange,UnityEngine.KeyCode,Rewired.ModifierKeyFlags,System.Int32,Rewired.Pole,System.Boolean)">
            <summary>
            Creates a struct for use in element assignment.
            For complete new assignment.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignment.FullAxisAssignment(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a struct for use in element assignment.
            For assignment of a full axis.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignment.FullAxisAssignment(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Creates a struct for use in element assignment.
            For assignment of a full axis to replace an existing element map.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignment.SplitAxisAssignment(System.Int32,Rewired.AxisRange,System.Int32,Rewired.Pole)">
            <summary>
            Creates a struct for use in element assignment.
            For assignment of a split axis.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignment.SplitAxisAssignment(System.Int32,Rewired.AxisRange,System.Int32,Rewired.Pole,System.Int32)">
            <summary>
            Creates a struct for use in element assignment.
            For assignment of a split axis to replace an existing element map.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignment.ButtonAssignment(System.Int32,System.Int32,Rewired.Pole)">
            <summary>
            Creates a struct for use in element assignment.
            For assignment of a button.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignment.ButtonAssignment(System.Int32,System.Int32,Rewired.Pole,System.Int32)">
            <summary>
            Creates a struct for use in element assignment.
            For assignment of a button to replace an existing element map.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignment.KeyboardKeyAssignment(UnityEngine.KeyCode,Rewired.ModifierKeyFlags,System.Int32,Rewired.Pole)">
            <summary>
            Creates a struct for use in element assignment.
            For assignment of a keyboard key.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignment.KeyboardKeyAssignment(UnityEngine.KeyCode,Rewired.ModifierKeyFlags,System.Int32,Rewired.Pole,System.Int32)">
            <summary>
            Creates a struct for use in element assignment.
            For assignment of a keyboard key to replace an existing element map.
            </summary>
        </member>
        <member name="M:Rewired.ElementAssignment.ToElementAssignmentConflictCheck">
            <summary>
            Converts this ElementAssignment to an ElementAssignmentConflictCheck struct. Can be used for conflict checking.
            You may need to provide additional data to the resulting ElementAssignmentConflictCheck before performing the conflict check.
            </summary>
            <returns>ElementAssignmentConflictCheck</returns>
        </member>
        <member name="F:Rewired.PlatformInputManager._DeviceConnectedEvent">
            Events
        </member>
        <member name="M:Rewired.Interfaces.IInputSource.SystemDeviceConnected">
            <summary>
            Only for input sources that get their device connections from without
            </summary>
        </member>
        <member name="M:Rewired.Interfaces.IInputSource.SystemDeviceDisconnected">
            <summary>
            Only for input sources that get their device connections from without
            </summary>
        </member>
        <member name="E:Rewired.Interfaces.IInputSource.DeviceChangedEvent">
            <summary>
            Only for input sources that get their device connections from within
            </summary>
        </member>
        <member name="T:Rewired.InputActionSourceData">
            <summary>
            Provides information about the current sources contributing to the value of an Input Action.
            </summary>
        </member>
        <member name="P:Rewired.InputActionSourceData.controller">
            <summary>
            Gets the Controller that contributed to the value of the Action.
            </summary>
        </member>
        <member name="P:Rewired.InputActionSourceData.controllerType">
            <summary>
            Gets the type of the Controller that contributed to the value of the Action.
            </summary>
        </member>
        <member name="P:Rewired.InputActionSourceData.controllerMap">
            <summary>
            Gets the ControllerMap that contributed to the value of the Action.
            </summary>
        </member>
        <member name="P:Rewired.InputActionSourceData.actionElementMap">
            <summary>
            Gets the ActionElementMap that contributed to the value of the Action.
            </summary>
        </member>
        <member name="P:Rewired.InputActionSourceData.elementIdentifierName">
            <summary>
            Gets the element identifier name of the element that contributed to the value of the Action.
            </summary>
        </member>
        <member name="P:Rewired.TouchInfo.isValid">
            <summary>
            Does this contain valid touch data?
            </summary>
        </member>
        <member name="T:Rewired.UI.UIAnchor">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.UI.UIPivot">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Config.UpdateLoopSetting">
            <summary>
            The update loop(s) in which input will be updated.
            </summary>
        </member>
        <member name="T:Rewired.Consts">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:Rewired.Consts._keyboardKeyValues">
            <summary>
            Original array! DO NOT WRITE TO THIS!
            </summary>
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Controller">
            <summary>
            The base class for all controllers.
            </summary>
        </member>
        <member name="F:Rewired.Controller.id">
            <summary>
            Rewired unique id of this controller. This is not an index.
            The id is unique among controllers of a specific controller type.
            </summary>
        </member>
        <member name="M:Rewired.Controller.GetButton(System.Int32)">
            <summary>
            Gets the button held state of the hardware button at the specified index. This will return TRUE as long as the button is held.
            This does not take into acount any controller mapping or Actions -- this is the unmapped physical button value only.
            Use the Player class to get button values mapped to Actions.
            </summary>
            <param name="index">Button index</param>
            <returns>Button held state</returns>
        </member>
        <member name="M:Rewired.Controller.GetButtonDown(System.Int32)">
            <summary>
            Gets the button just pressed state of the hardware button at the specified index. This will only return TRUE only on the first frame the button is pressed
            This does not take into acount any controller mapping or Actions -- this is the unmapped physical button value only.
            Use the Player class to get button values mapped to Actions.
            </summary>
            <param name="index">Button index</param>
            <returns>Button just pressed state</returns>
        </member>
        <member name="M:Rewired.Controller.GetButtonUp(System.Int32)">
            <summary>
            Gets the button just released state of the hardware button at the specified index. This will only return TRUE only on the first frame the button is released
            This does not take into acount any controller mapping or Actions -- this is the unmapped physical button value only.
            Use the Player class to get button values mapped to Actions.
            </summary>
            <param name="index">Button index</param>
            <returns>Button just released state</returns>
        </member>
        <member name="M:Rewired.Controller.GetButtonPrev(System.Int32)">
            <summary>
            Gets the previous button held state of the hardware button at the specified index. This will return TRUE if the button was held in the previous frame.
            This does not take into acount any controller mapping or Actions -- this is the unmapped physical button value only.
            Use the Player class to get button values mapped to Actions.
            </summary>
            <param name="index">Button index</param>
            <returns>Previous button held state</returns>
        </member>
        <member name="M:Rewired.Controller.GetButtonTimePressed(System.Int32)">
            <summary>
            Gets the length of time the button at index has been active.
            </summary>
            <param name="index">index</param>
            <returns>Time in seconds</returns>
        </member>
        <member name="M:Rewired.Controller.GetButtonTimeUnpressed(System.Int32)">
            <summary>
            Gets the length of time the button at index has been inactive.
            </summary>
            <param name="index">index</param>
            <returns>Time in seconds</returns>
        </member>
        <member name="M:Rewired.Controller.GetButtonLastTimePressed(System.Int32)">
            <summary>
            Gets the last timestamp the button at index was active.
            </summary>
            <param name="index">index</param>
            <returns>Timestamp</returns>
        </member>
        <member name="M:Rewired.Controller.GetButtonLastTimeUnpressed(System.Int32)">
            <summary>
            Gets the last timestamp the button at index was inactive.
            </summary>
            <param name="index">index</param>
            <returns>Timestamp</returns>
        </member>
        <member name="M:Rewired.Controller.GetAnyButton">
            <summary>
            Gets the button held state of any hardware button. This will return TRUE as long as any button is held.
            This does not take into acount any controller mapping or Actions -- this is the unmapped physical button value only.
            Use the Player class to get button values mapped to Actions.
            </summary>
            <returns>Button held state</returns>
        </member>
        <member name="M:Rewired.Controller.GetAnyButtonDown">
            <summary>
            Gets the button just pressed state of any hardware button. This will only return TRUE only on the first frame the button is pressed
            This does not take into acount any controller mapping or Actions -- this is the unmapped physical button value only.
            Use the Player class to get button values mapped to Actions.
            </summary>
            <returns>Button just pressed state</returns>
        </member>
        <member name="M:Rewired.Controller.GetAnyButtonUp">
            <summary>
            Gets the button just released state of any hardware button. This will only return TRUE only on the first frame the button is released
            This does not take into acount any controller mapping or Actions -- this is the unmapped physical button value only.
            Use the Player class to get button values mapped to Actions.
            </summary>
            <returns>Button just released state</returns>
        </member>
        <member name="M:Rewired.Controller.GetAnyButtonPrev">
            <summary>
            Gets the previous button held state of any hardware button. This will return TRUE if any button was held in the previous frame.
            This does not take into acount any controller mapping or Actions -- this is the unmapped physical button value only.
            Use the Player class to get button values mapped to Actions.
            </summary>
            <returns>Previous button held state</returns>
        </member>
        <member name="M:Rewired.Controller.GetLastTimeActive">
            <summary>
            Gets the last timestamp any button was active.
            NOTE: If comparing time against current time, always compare to ReInput.time.unscaledTime.
            </summary>
            <returns>Timestamp</returns>
        </member>
        <member name="M:Rewired.Controller.GetLastTimeActive(System.Boolean)">
            <summary>
            Gets the last timestamp any button was active.
            NOTE: If comparing time against current time, always compare to ReInput.time.unscaledTime.
            </summary>
            <param name="useRawValues">Use raw axis values</param>
            <returns>Timestamp</returns>
        </member>
        <member name="M:Rewired.Controller.GetLastTimeAnyButtonPressed">
            <summary>
            Gets the last timestamp any button was active.
            NOTE: If comparing time against current time, always compare to ReInput.time.unscaledTime.
            </summary>
            <returns>Timestamp</returns>
        </member>
        <member name="M:Rewired.Controller.GetExtension``1">
            <summary>
            Gets an object used to access controller and platform-specific controller functions.
            </summary>
            <typeparam name="T">Type</typeparam>
            <returns>Extension</returns>
        </member>
        <member name="P:Rewired.Controller.name">
            <summary>
            The name of the controller. This is drawn from the controller definition for recognized controllers. For unrecognized controllers, the name returned by the hardware is used instead.
            </summary>
        </member>
        <member name="P:Rewired.Controller.tag">
            <summary>
            The tag assigned to the controller. Can be used for find a controller by tag.
            </summary>
        </member>
        <member name="P:Rewired.Controller.hardwareName">
            <summary>
            The name the controller hardware returns.
            </summary>
        </member>
        <member name="P:Rewired.Controller.type">
            <summary>
            The type of this controller.
            </summary>
        </member>
        <member name="P:Rewired.Controller.isConnected">
            <summary>
            Is the controller connected?
            </summary>
        </member>
        <member name="P:Rewired.Controller.buttonCount">
            <summary>
            The button count in the controller.
            </summary>
        </member>
        <member name="P:Rewired.Controller.hardwareIdentifier">
            <summary>
            String of information from the controller used for identifying unknown controller maps for saving/loading.
            </summary>
        </member>
        <member name="P:Rewired.Controller.mapTypeString">
            <summary>
            String representation of the controller map type. Can be used for saving/loading.
            </summary>
        </member>
        <member name="P:Rewired.Controller.Buttons">
            <summary>
            List of buttons in this controller.
            </summary>
        </member>
        <member name="P:Rewired.Controller.extension">
            <summary>
            Gets an object used to access controller and platform-specific controller functions.
            </summary>
        </member>
        <member name="T:Rewired.Controller.Element">
            <summary>
            The base class for all controller elements.
            </summary>
        </member>
        <member name="P:Rewired.Controller.Element.isMemberElement">
            <summary>
            Returns True if the element is a member of a compound element such as an Axis2D.
            </summary>
        </member>
        <member name="T:Rewired.Controller.Axis">
            <summary>
            An Axis controller element.
            </summary>
        </member>
        <member name="P:Rewired.Controller.Axis.lastTimeActive">
            <summary>
            Gets the last time the axis was active.
            NOTE: If comparing time against current time, always compare to ReInput.time.unscaledTime.
            </summary>
        </member>
        <member name="P:Rewired.Controller.Axis.lastTimeActiveRaw">
            <summary>
            Gets the last time the axis was active based on raw value.
            NOTE: If comparing time against current time, always compare to ReInput.time.unscaledTime.
            </summary>
        </member>
        <member name="P:Rewired.Controller.Axis.lastTimeInactive">
            <summary>
            Gets the last time the axis was inactive.
            NOTE: If comparing time against current time, always compare to ReInput.time.unscaledTime.
            </summary>
        </member>
        <member name="P:Rewired.Controller.Axis.lastTimeInactiveRaw">
            <summary>
            Gets the last time the axis was inactive based on raw value.
            NOTE: If comparing time against current time, always compare to ReInput.time.unscaledTime.
            </summary>
        </member>
        <member name="P:Rewired.Controller.Axis.timeActive">
            <summary>
            The time in seconds this axis has been active.
            </summary>
        </member>
        <member name="P:Rewired.Controller.Axis.timeActiveRaw">
            <summary>
            The time in seconds this axis has been active based on raw value.
            </summary>
        </member>
        <member name="P:Rewired.Controller.Axis.timeInactive">
            <summary>
            The time in seconds this axis has been ainctive.
            </summary>
        </member>
        <member name="P:Rewired.Controller.Axis.timeInactiveRaw">
            <summary>
            The time in seconds this axis has been inactive based on raw value.
            </summary>
        </member>
        <member name="T:Rewired.Controller.Button">
            <summary>
            A Button controller element.
            </summary>
        </member>
        <member name="M:Rewired.Controller.Button.DoublePressedAndHeld(System.Single)">
            <summary>
            Was this button double pressed and then held? Returns true until released.
            <param name="speed">Required double press speed in seconds for a double press to be registered.</param>
            <returns>Boolean</returns>
            </summary>
        </member>
        <member name="M:Rewired.Controller.Button.JustDoublePressed(System.Single)">
            <summary>
            Was this button just double pressed this frame? Returns true for only one frame.
            <param name="speed">Required double press speed in seconds for a double press to be registered.</param>
            <returns>Boolean</returns>
            </summary>
        </member>
        <member name="P:Rewired.Controller.Button.valuePrev">
            <summary>
            The state of the button in the previous frame
            </summary>
        </member>
        <member name="P:Rewired.Controller.Button.value">
            <summary>
            The current state of the button.
            </summary>
        </member>
        <member name="P:Rewired.Controller.Button.pressure">
            <summary>
            The current pressure on the button. [0.0 - 1.0]
            </summary>
        </member>
        <member name="P:Rewired.Controller.Button.pressurePrev">
            <summary>
            The pressure on the button in the previous frame. [0.0 - 1.0]
            </summary>
        </member>
        <member name="P:Rewired.Controller.Button.isPressureSensitive">
            <summary>
            Is this button pressure sensitive?
            </summary>
        </member>
        <member name="P:Rewired.Controller.Button.justPressed">
            <summary>
            Was this button just pressed this frame? Returns true for only one frame. Functions the same as GetButtonDown.
            </summary>
        </member>
        <member name="P:Rewired.Controller.Button.justReleased">
            <summary>
            Was this button just released this frame? Returns true for only one frame. Functions the same as GetButtonUp.
            </summary>
        </member>
        <member name="P:Rewired.Controller.Button.doublePressedAndHeld">
            <summary>
            Was this button double pressed and then held? Returns true until released.
            </summary>
        </member>
        <member name="P:Rewired.Controller.Button.justDoublePressed">
            <summary>
            Was this button just double pressed this frame? Returns true for only one frame.
            </summary>
        </member>
        <member name="P:Rewired.Controller.Button.timePressed">
            <summary>
            The time in seconds this button has been active.
            </summary>
        </member>
        <member name="P:Rewired.Controller.Button.timeUnpressed">
            <summary>
            The time in seconds this button has been inactive.
            </summary>
        </member>
        <member name="P:Rewired.Controller.Button.lastTimePressed">
            <summary>
            Gets the last time the button was active.
            NOTE: If comparing time against current time, always compare to ReInput.time.unscaledTime.
            </summary>
        </member>
        <member name="P:Rewired.Controller.Button.lastTimeUnpressed">
            <summary>
            Gets the last time the button was inactive.
            NOTE: If comparing time against current time, always compare to ReInput.time.unscaledTime.
            </summary>
        </member>
        <member name="T:Rewired.Controller.CompoundElement">
            <summary>
            Base class for compound elements. Compound elements are a combination of existing elements such as 2 axes making up an Axis 2D.
            Compound elements have no value in and of themselves, but combine values from their member elements to produce a result.
            Compound elements cannot be mapped with an ActionElementMap. Instead, the component axes are each mapped individually.
            </summary>
        </member>
        <member name="P:Rewired.Controller.CompoundElement.name">
            <summary>
            The name of this element.
            </summary>
        </member>
        <member name="P:Rewired.Controller.CompoundElement.type">
            <summary>
            The type of this element.
            </summary>
        </member>
        <member name="P:Rewired.Controller.CompoundElement.hasElements">
            <summary>
            Does this compound element have any member elements?
            </summary>
        </member>
        <member name="P:Rewired.Controller.CompoundElement.elementCount">
            <summary>
            The number of member elements in this compound element.
            </summary>
        </member>
        <member name="P:Rewired.Controller.CompoundElement.elementCapacity">
            <summary>
            The maximum capacity of memober elements in this compound element.
            </summary>
        </member>
        <member name="T:Rewired.Controller.Axis2D">
            <summary>
            Axis 2D is a combination of values from two individual Axes. This is primarily used for analog sticks.
            A radial deadzone is applied to the combined values. The deazone is the larger of the two deadzones set in the individual axes.
            Axis 2D cannot be mapped with an ActionElementMap. Instead, the component axes are each mapped individually.
            When two Axes are combined into an Axis2D, the values of the individual Axes are changed to reflect the radial deadzone applied by the parent Axis2D.
            </summary>
        </member>
        <member name="P:Rewired.Controller.Axis2D.elementCapacity">
            <summary>
            The maximum number of member Axes of Axis2D.
            </summary>
        </member>
        <member name="P:Rewired.Controller.Axis2D.xAxis">
            <summary>
            The X Axis element.
            </summary>
        </member>
        <member name="P:Rewired.Controller.Axis2D.yAxis">
            <summary>
            The Y Axis element.
            </summary>
        </member>
        <member name="P:Rewired.Controller.Axis2D.value">
            <summary>
            The combined current value of the X and Y axes.
            </summary>
        </member>
        <member name="P:Rewired.Controller.Axis2D.valuePrev">
            <summary>
            The combined value of the X and Y axes from the previous frame.
            </summary>
        </member>
        <member name="P:Rewired.Controller.Axis2D.valueRaw">
            <summary>
            The combined current raw value of the X and Y axes.
            </summary>
        </member>
        <member name="P:Rewired.Controller.Axis2D.valueRawPrev">
            <summary>
            The combined raw value of the X and Y axes from the previous frame.
            </summary>
        </member>
        <member name="T:Rewired.Controller.Extension">
            <summary>
            A class that can be used as a base class to allow for special controller or platform-specific functions in a controller.
            </summary>
        </member>
        <member name="M:Rewired.Controller.Extension.GetController``1">
            <summary>
            Gets the parent controller.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Rewired.Controller.Extension.SetController(Rewired.Controller)">
            <summary>
            Sets the parent controller of the controller extension. This can only be set once.
            </summary>
            <param name="controller">Parent controller</param>
        </member>
        <member name="P:Rewired.Controller.Extension.controller">
            <summary>
            The parent controller of this extension.
            </summary>
        </member>
        <member name="T:Rewired.ControllerWithAxes">
            <summary>
            A controller with buttons and axes.
            </summary>
        </member>
        <member name="T:Rewired.ControllerWithMap">
            <summary>
            A controller which uses a hardware map to map controller elements.
            </summary>
        </member>
        <member name="M:Rewired.ControllerWithAxes.GetAxis(System.Int32)">
            <summary>
            Gets the current axis value.
            </summary>
            <param name="index">Index of Axis</param>
            <returns>Axis value [-1.0 to 1.0]</returns>
        </member>
        <member name="M:Rewired.ControllerWithAxes.GetAxisPrev(System.Int32)">
            <summary>
            Gets the axis value from the previous frame.
            </summary>
            <param name="index">Index of Axis</param>
            <returns>Axis value [-1.0 to 1.0]</returns>
        </member>
        <member name="M:Rewired.ControllerWithAxes.GetAxisRaw(System.Int32)">
            <summary>
            Gets the current raw axis value. Excludes calibration.
            </summary>
            <param name="index">Index of Axis</param>
            <returns>Axis value [-1.0 to 1.0]</returns>
        </member>
        <member name="M:Rewired.ControllerWithAxes.GetAxisRawPrev(System.Int32)">
            <summary>
            Gets the raw axis value from the previous frame.. Excludes calibration.
            </summary>
            <param name="index">Index of Axis</param>
            <returns>Axis value [-1.0 to 1.0]</returns>
        </member>
        <member name="M:Rewired.ControllerWithAxes.GetAxisById(System.Int32)">
            <summary>
            Gets the current axis value.
            </summary>
            <param name="elementIdentifierId">Element identifier id of Axis</param>
            <returns>Axis value [-1.0 to 1.0]</returns>
        </member>
        <member name="M:Rewired.ControllerWithAxes.GetAxisPrevById(System.Int32)">
            <summary>
            Gets the axis value from the previous frame.
            </summary>
            <param name="elementIdentifierId">Element identifier id of Axis</param>
            <returns>Axis value [-1.0 to 1.0]</returns>
        </member>
        <member name="M:Rewired.ControllerWithAxes.GetAxisRawById(System.Int32)">
            <summary>
            Gets the current raw axis value. Excludes calibration.
            </summary>
            <param name="elementIdentifierId">Element identifier id of Axis</param>
            <returns>Axis value [-1.0 to 1.0]</returns>
        </member>
        <member name="M:Rewired.ControllerWithAxes.GetAxisRawPrevById(System.Int32)">
            <summary>
            Gets the raw axis value from the previous frame.. Excludes calibration.
            </summary>
            <param name="elementIdentifierId">Element identifier id of Axis</param>
            <returns>Axis value [-1.0 to 1.0]</returns>
        </member>
        <member name="M:Rewired.ControllerWithAxes.GetAxis2D(System.Int32)">
            <summary>
            Gets the current 2D axis value.
            </summary>
            <param name="index">Index of Axis</param>
            <returns>2D Axis value [-1.0 to 1.0]</returns>
        </member>
        <member name="M:Rewired.ControllerWithAxes.GetAxis2DPrev(System.Int32)">
            <summary>
            Gets the 2D axis value from the previous frame.
            </summary>
            <param name="index">Index of Axis</param>
            <returns>2D Axis value [-1.0 to 1.0]</returns>
        </member>
        <member name="M:Rewired.ControllerWithAxes.GetAxis2DRaw(System.Int32)">
            <summary>
            Gets the current raw 2D axis value. Excludes calibration.
            </summary>
            <param name="index">Index of Axis</param>
            <returns>2D Axis value [-1.0 to 1.0]</returns>
        </member>
        <member name="M:Rewired.ControllerWithAxes.GetAxis2DRawPrev(System.Int32)">
            <summary>
            Gets the raw 2D axis value from the previous frame.. Excludes calibration.
            </summary>
            <param name="index">Index of Axis</param>
            <returns>Axis value [-1.0 to 1.0]</returns>
        </member>
        <member name="M:Rewired.ControllerWithAxes.GetLastTimeActive">
            <summary>
            Gets the last timestamp any axis or button was active.
            NOTE: If comparing time against current time, always compare to ReInput.time.unscaledTime.
            </summary>
            <returns>Timestamp</returns>
        </member>
        <member name="M:Rewired.ControllerWithAxes.GetLastTimeActive(System.Boolean)">
            <summary>
            Gets the last timestamp any axis or button was active.
            NOTE: If comparing time against current time, always compare to ReInput.time.unscaledTime.
            </summary>
            <param name="useRawValues">Use raw axis values</param>
            <returns>Timestamp</returns>
        </member>
        <member name="M:Rewired.ControllerWithAxes.GetLastTimeAnyAxisActive">
            <summary>
            Gets the last timestamp any axis was active.
            NOTE: If comparing time against current time, always compare to ReInput.time.unscaledTime.
            </summary>
            <returns>Timestamp</returns>
        </member>
        <member name="M:Rewired.ControllerWithAxes.GetLastTimeAnyAxisActive(System.Boolean)">
            <summary>
            Gets the last timestamp any axis was active.
            NOTE: If comparing time against current time, always compare to ReInput.time.unscaledTime.
            </summary>
            <param name="useRawValues">Use raw axis values</param>
            <returns>Timestamp</returns>
        </member>
        <member name="T:Rewired.CustomController">
            <summary>
            A virtual controller with a user-defined input source.
            </summary>
        </member>
        <member name="T:Rewired.ControllerExtensions.DualShock4Extension">
            <summary>
            Allows access to controller-specific functions such as vibration.
            </summary>
        </member>
        <member name="T:Rewired.Interfaces.IControllerVibrator">
            <summary>
            Interface for controller vibration.
            </summary>
        </member>
        <member name="M:Rewired.Interfaces.IControllerVibrator.SetVibration(System.Int32,System.Single)">
            <summary>
            Sets vibration level for a motor at a specified index.
            </summary>
            <param name="motorIndex">Motor index</param>
            <param name="motorLevel">Motor level [float: 0.0 - 1.0]</param>
        </member>
        <member name="M:Rewired.Interfaces.IControllerVibrator.SetVibration(System.Int32,System.Single,System.Boolean)">
            <summary>
            Sets vibration level for a motor at a specified index.
            </summary>
            <param name="motorIndex">Motor index</param>
            <param name="motorLevel">Motor level [float: 0.0 - 1.0]</param>
            <param name="stopOtherMotors">Stop other motors?</param>
        </member>
        <member name="M:Rewired.Interfaces.IControllerVibrator.GetVibration(System.Int32)">
            <summary>
            Gets vibration level for a motor at a specified index.
            </summary>
            <param name="motorIndex">Motor index</param>
            <returns>Motor level [float: 0.0 - 1.0]</returns>
        </member>
        <member name="M:Rewired.Interfaces.IControllerVibrator.StopVibration">
            <summary>
            Stops vibration on all motors.
            </summary>
        </member>
        <member name="P:Rewired.Interfaces.IControllerVibrator.vibrationMotorCount">
            <summary>
            Number of vibration motors in the controller.
            </summary>
        </member>
        <member name="M:Rewired.ControllerExtensions.DualShock4Extension.SetVibration(System.Int32,System.Single)">
            <summary>
            Sets vibration level for a motor at a specified index.
            </summary>
            <param name="motorIndex">Motor index</param>
            <param name="motorLevel">Motor level [float: 0.0 - 1.0]</param>
        </member>
        <member name="M:Rewired.ControllerExtensions.DualShock4Extension.SetVibration(System.Int32,System.Single,System.Boolean)">
            <summary>
            Sets vibration level for a motor at a specified index.
            </summary>
            <param name="motorIndex">Motor index</param>
            <param name="motorLevel">Motor level [float: 0.0 - 1.0]</param>
            <param name="stopOtherMotors">Stop other motors?</param>
        </member>
        <member name="M:Rewired.ControllerExtensions.DualShock4Extension.GetVibration(System.Int32)">
            <summary>
            Gets vibration level for a motor at a specified index.
            </summary>
            <param name="motorIndex">Motor index</param>
            <returns>Motor level [float: 0.0 - 1.0]</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.DualShock4Extension.StopVibration">
            <summary>
            Stops vibration on all motors.
            </summary>
        </member>
        <member name="M:Rewired.ControllerExtensions.DualShock4Extension.GetVibration(Rewired.ControllerExtensions.DualShock4MotorType)">
            <summary>
            Gets vibration level for a specific motor.
            </summary>
            <param name="motor">Motor type</param>
            <returns>Motor level [float: 0.0 - 1.0]</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.DualShock4Extension.SetVibration(Rewired.ControllerExtensions.DualShock4MotorType,System.Single)">
            <summary>
            Sets vibration leves on an individual motor.
            </summary>
            <param name="motor">Motor type</param>
            <param name="motorLevel">Motor level [float: 0.0 - 1.0]</param>
        </member>
        <member name="M:Rewired.ControllerExtensions.DualShock4Extension.SetVibration(Rewired.ControllerExtensions.DualShock4MotorType,System.Single,System.Boolean)">
            <summary>
            Sets vibration level on an individual motor.
            </summary>
            <param name="motor">Motor type</param>
            <param name="motorLevel">Motor level [float: 0.0 - 1.0]</param>
            <param name="stopOtherMotors">Stop other motors?</param>
        </member>
        <member name="M:Rewired.ControllerExtensions.DualShock4Extension.SetVibration(System.Single,System.Single)">
            <summary>
            Sets vibration level for left and right motors.
            </summary>
            <param name="leftMotorLevel">float: 0.0 - 1.0</param>
            <param name="rightMotorLevel">float: 0.0 - 1.0</param>
        </member>
        <member name="M:Rewired.ControllerExtensions.DualShock4Extension.GetLightColor">
            <summary>
            Gets the current light color.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.DualShock4Extension.SetLightColor(UnityEngine.Color)">
            <summary>
            Sets the light color. Alpha can be used to set intensity.
            </summary>
            <param name="color">Light color</param>
        </member>
        <member name="M:Rewired.ControllerExtensions.DualShock4Extension.SetLightColor(System.Single,System.Single,System.Single)">
            <summary>
            Sets the light color.
            </summary>
            <param name="red">Red channel [0.0 - 1.0]</param>
            <param name="green">Green channel [0.0 - 1.0]</param>
            <param name="blue">Blue channel [0.0 - 1.0]</param>
        </member>
        <member name="M:Rewired.ControllerExtensions.DualShock4Extension.SetLightColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the light color.
            </summary>
            <param name="red">Red channel [0.0 - 1.0]</param>
            <param name="green">Green channel [0.0 - 1.0]</param>
            <param name="blue">Blue channel [0.0 - 1.0]</param>
            <param name="intensity">Intensity [0.0 - 1.0]</param>
        </member>
        <member name="M:Rewired.ControllerExtensions.DualShock4Extension.SetLightFlash(System.Single,System.Single)">
            <summary>
            Sets the light flashing speed. This sets the flashing system directly in the controller hardware and is subject to the hardware limitation of a 2.5 second duration.
            </summary>
            <param name="onDuration">Duration in seconds for light to remain on. [0 - 2.5]</param>
            <param name="offDuration">Duration in seconds for light to remain off. [0 - 2.5]</param>
        </member>
        <member name="M:Rewired.ControllerExtensions.DualShock4Extension.StopLightFlash">
            <summary>
            Stops the light flashing.
            </summary>
        </member>
        <member name="M:Rewired.ControllerExtensions.DualShock4Extension.GetAccelerometerValueRaw">
            <summary>
            Gets the raw value from the accelerometer.
            </summary>
            <returns>Raw accelerometer data</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.DualShock4Extension.GetGyroscopeValueRaw">
            <summary>
            Gets the raw value from the gyroscope.
            </summary>
            <returns>Raw gyroscope data</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.DualShock4Extension.GetTouchId(System.Int32)">
            <summary>
            Gets the touch id for the touch at the specified index.
            </summary>
            <param name="index"></param>
            <returns>Touch id. Returns -1 if there is no current touch at the specified index.</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.DualShock4Extension.GetTouchPosition(System.Int32,UnityEngine.Vector2@)">
            <summary>
            Gets the touch position for a particular index normalized to a 0 - 1 range. (Left = 0, Top = 0)
            </summary>
            <param name="index">The index of the touch for which to return position.</param>
            <param name="position">X/Y position of the touch [0 - 1]</param>
            <returns>True if the touch at index is currently touching. False if there is no touch at index.</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.DualShock4Extension.GetTouchPositionByTouchId(System.Int32,UnityEngine.Vector2@)">
            <summary>
            Gets the touch position for a particular touch id normalized to a 0 - 1 range. (Left = 0, Top = 0)
            </summary>
            <param name="touchId">The id of the touch for which to return position.</param>
            <param name="position">X/Y position of the touch [0 - 1]</param>
            <returns>True if the touch at touchId is currently touching. False if there is no touch at touchId.</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.DualShock4Extension.GetTouchPositionAbsolute(System.Int32,UnityEngine.Vector2@)">
            <summary>
            Gets the touch position for a particular index in absolute units as returned by the device. (Left = 0, Top = 0)
            </summary>
            <param name="index">The index of the touch for which to return position.</param>
            <param name="position">X/Y position of the touch in absolute units.</param>
            <returns>True if the touch at index is currently touching. False if there is no touch at index.</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.DualShock4Extension.GetTouchPositionAbsoluteByTouchId(System.Int32,UnityEngine.Vector2@)">
            <summary>
            Gets the touch position for a particular touch id in absolute units as returned by the device. (Left = 0, Top = 0)
            </summary>
            <param name="touchId">The id of the touch for which to return position.</param>
            <param name="position">X/Y position of the touch in absolute units.</param>
            <returns>True if the touch at touchId is currently touching. False if there is no touch at touchId.</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.DualShock4Extension.IsTouching(System.Int32)">
            <summary>
            Determines if the current touch id is valid for any currently active touch.
            </summary>
            <param name="index">The index of the touch</param>
            <returns>True/False</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.DualShock4Extension.IsTouchingByTouchId(System.Int32)">
            <summary>
            Determines if the current touch id is valid for any currently active touch.
            </summary>
            <param name="touchId">The id of the touch</param>
            <returns>True/False</returns>
        </member>
        <member name="P:Rewired.ControllerExtensions.DualShock4Extension.vibrationMotorCount">
            <summary>
            The number of vibration motors in this controller.
            </summary>
        </member>
        <member name="P:Rewired.ControllerExtensions.DualShock4Extension.lightColorRed">
            <summary>
            Light color red channel.
            </summary>
        </member>
        <member name="P:Rewired.ControllerExtensions.DualShock4Extension.lightColorGreen">
            <summary>
            Light color green channel.
            </summary>
        </member>
        <member name="P:Rewired.ControllerExtensions.DualShock4Extension.lightColorBlue">
            <summary>
            Light color blue channel.
            </summary>
        </member>
        <member name="P:Rewired.ControllerExtensions.DualShock4Extension.maxTouches">
            <summary>
            Number of simultaneous touches supported by this device.
            </summary>
        </member>
        <member name="P:Rewired.ControllerExtensions.DualShock4Extension.batteryLevel">
            <summary>
            Battery level as a percentage. [0 - 100]
            </summary>
        </member>
        <member name="T:Rewired.ControllerExtensions.DualShock4MotorType">
            <summary>
            Dual Shock 4 game pad motors. Used for vibration.
            </summary>
        </member>
        <member name="F:Rewired.ControllerExtensions.DualShock4MotorType.LeftMotor">
            <summary>
            Left motor (stronger motor)
            </summary>
        </member>
        <member name="F:Rewired.ControllerExtensions.DualShock4MotorType.StrongMotor">
            <summary>
            Left motor (stronger motor)
            </summary>
        </member>
        <member name="F:Rewired.ControllerExtensions.DualShock4MotorType.RightMotor">
            <summary>
            Right motor (weaker motor)
            </summary>
        </member>
        <member name="F:Rewired.ControllerExtensions.DualShock4MotorType.WeakMotor">
            <summary>
            Right motor (weaker motor)
            </summary>
        </member>
        <member name="T:Rewired.ControllerExtensions.RailDriverExtension">
            <summary>
            Allows access to controller-specific functions LED panel and speaker.
            </summary>
        </member>
        <member name="M:Rewired.ControllerExtensions.RailDriverExtension.SetLEDDisplay(System.Int32,System.Byte)">
            <summary>
            Set the LED display one digit at a time.
            </summary>
            <param name="digitIndex">Index of the digit to set. [0 - 2]</param>
            <param name="digitBitValues">A byte containing 8 bits, 1 for each element in the display digit. (Like an old LCD clock, plus a period.)</param>
        </member>
        <member name="M:Rewired.ControllerExtensions.RailDriverExtension.SetLEDDisplay(System.Byte,System.Byte,System.Byte)">
            <summary>
            Set all 3 digits of the the LED display.
            </summary>
            <param name="digit1BitValues">A byte containing 7 bits, 1 for each element in the 1st display digit. (Like an old LCD clock, plus a period.)</param>
            <param name="digit2BitValues">A byte containing 7 bits, 1 for each element in the 2nd display digit. (Like an old LCD clock, plus a period.)</param>
            <param name="digit3BitValues">A byte containing 7 bits, 1 for each element in the 3rd display digit. (Like an old LCD clock, plus a period.)</param>
        </member>
        <member name="P:Rewired.ControllerExtensions.RailDriverExtension.speakerEnabled">
            <summary>
            Enable or disable speaker.
            </summary>
        </member>
        <member name="T:Rewired.ControllerExtensions.SteamControllerExtension">
            <summary>
            Allows access to controller-specific functions.
            </summary>
        </member>
        <member name="M:Rewired.ControllerExtensions.SteamControllerExtension.GetActionSetHandle(System.String)">
            <summary>
            Get the handle for a Steam Action Set.
            </summary>
            <param name="actionSetName">Name of the Steam action set</param>
            <returns>Handle</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.SteamControllerExtension.GetAnalogActionHandle(System.String)">
            <summary>
            Get the handle for a Steam analog Action.
            </summary>
            <param name="actionName">Name of the Steam action</param>
            <returns>Handle</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.SteamControllerExtension.GetDigitalActionHandle(System.String)">
            <summary>
            Get the handle for a Steam digital Action.
            </summary>
            <param name="actionName">Name of the Steam action</param>
            <returns>Handle</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.SteamControllerExtension.GetActionSetName(System.UInt64)">
            <summary>
            Get the name for a Steam Action Set.
            </summary>
            <param name="actionSetHandle">Handle of the Steam action set</param>
            <returns>Steam Action name</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.SteamControllerExtension.GetAnalogActionName(System.UInt64)">
            <summary>
            Get the name for a Steam analog Action.
            </summary>
            <param name="actionHandle">Handle of the Steam action</param>
            <returns>Steam Action name</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.SteamControllerExtension.GetDigitalActionName(System.UInt64)">
            <summary>
            Get the name for a Steam digital Action.
            </summary>
            <param name="actionHandle">Handle of the Steam action</param>
            <returns>Steam Action name</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.SteamControllerExtension.GetAnalogActionValue(System.String)">
            <summary>
            Get the current value of an analog Steam action.
            </summary>
            <param name="actionName">Name of the Steam action</param>
            <returns>X/Y value</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.SteamControllerExtension.GetAnalogActionValue(System.UInt64)">
            <summary>
            Get the current value of an analog Steam action.
            </summary>
            <param name="actionHandle">Handle of the Steam action</param>
            <returns>X/Y value</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.SteamControllerExtension.GetDigitalActionValue(System.String)">
            <summary>
            Get the current value of a digital Steam action.
            </summary>
            <param name="actionName">Name of the Steam action</param>
            <returns>True/False</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.SteamControllerExtension.GetDigitalActionValue(System.UInt64)">
            <summary>
            Get the current value of a digital Steam action.
            </summary>
            <param name="actionHandle">Handle of the Steam action</param>
            <returns>True/False</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.SteamControllerExtension.SetActiveActionSet(System.UInt64)">
            <summary>
            Set the current active Steam action set.
            </summary>
            <param name="actionSetHandle">Handle of the Steam action set</param>
            <returns>Success/Failure</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.SteamControllerExtension.SetActiveActionSet(System.String)">
            <summary>
            Set the current active Steam action set.
            </summary>
            <param name="actionSetName">Name of the Steam action set</param>
            <returns>Success/Failure</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.SteamControllerExtension.GetActiveActionSetHandle">
            <summary>
            Get the current active Steam action set handle.
            </summary>
            <returns>Action set handle</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.SteamControllerExtension.GetActiveActionSetName">
            <summary>
            Get the current active Steam action set name.
            </summary>
            <returns>Action set name</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.SteamControllerExtension.ShowBindingPanel">
            <summary>
            Show the Steam control binding panel for the current controller.
            </summary>
        </member>
        <member name="M:Rewired.ControllerExtensions.SteamControllerExtension.SetHapticPulse(Rewired.ControllerExtensions.SteamControllerPadType,System.Single)">
            <summary>
            Set a haptic pulse in a pad.
            </summary>
            <param name="targePad">Target pad</param>
            <param name="durationSeconds">Duration of pulse in seconds</param>
        </member>
        <member name="M:Rewired.ControllerExtensions.SteamControllerExtension.SetHapticPulse(Rewired.ControllerExtensions.SteamControllerPadType,System.UInt16)">
            <summary>
            Set a haptic pulse in a pad.
            </summary>
            <param name="targePad">Target pad</param>
            <param name="durationMicroSeconds">Duration of pulse in micro seconds</param>
        </member>
        <member name="M:Rewired.ControllerExtensions.SteamControllerExtension.GetDigitalActionOrigins(System.String,System.String)">
            <summary>
            Get the origins for a Steam digital action.
            </summary>
            <param name="actionSetName">Action set name</param>
            <param name="actionName">Action name</param>
            <returns>List of action origins</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.SteamControllerExtension.GetDigitalActionOrigins(System.UInt64,System.UInt64)">
            <summary>
            Get the origins for a Steam digital action.
            </summary>
            <param name="actionSetHandle">Action set handle</param>
            <param name="actionHandle">Action handle</param>
            <returns>List of action origins</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.SteamControllerExtension.GetAnalogActionOrigins(System.String,System.String)">
            <summary>
            Get the origins for a Steam analog action.
            </summary>
            <param name="actionSetName">Action set name</param>
            <param name="actionName">Action name</param>
            <returns>List of action origins</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.SteamControllerExtension.GetAnalogActionOrigins(System.UInt64,System.UInt64)">
            <summary>
            Get the origins for a Steam analog action.
            </summary>
            <param name="actionSetHandle">Action set handle</param>
            <param name="actionHandle">Action handle</param>
            <returns>List of action origins</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.SteamControllerExtension.GetDigitalActionOriginGlyphs(System.UInt64,System.UInt64)">
            <summary>
            Get a list of glyphs for a Steam digital action.
            </summary>
            <param name="actionSetHandle">Action set handle</param>
            <param name="actionHandle">Action handle</param>
            <returns>List of glyphs</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.SteamControllerExtension.GetDigitalActionOriginGlyphs(System.String,System.String)">
            <summary>
            Get a list of glyphs for a Steam digital action.
            </summary>
            <param name="actionSetName">Action set name</param>
            <param name="actionName">Action name</param>
            <returns>List of glyphs</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.SteamControllerExtension.GetAnalogActionOriginGlyphs(System.UInt64,System.UInt64)">
            <summary>
            Get a list of glyphs for a Steam analog action.
            </summary>
            <param name="actionSetHandle">Action set handle</param>
            <param name="actionHandle">Action handle</param>
            <returns>List of glyphs</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.SteamControllerExtension.GetAnalogActionOriginGlyphs(System.String,System.String)">
            <summary>
            Get a list of glyphs for a Steam digital action.
            </summary>
            <param name="actionSetName">Action set name</param>
            <param name="actionName">Action name</param>
            <returns>List of glyphs</returns>
        </member>
        <member name="M:Rewired.ControllerExtensions.SteamControllerExtension.GetActionOriginGlyph(Rewired.ControllerExtensions.SteamControllerActionOrigin)">
            <summary>
            Get a glyph for a particular Steam action origin.
            </summary>
            <param name="actionOrigin">Origin of the action</param>
            <returns>Glyph</returns>
        </member>
        <member name="T:Rewired.Joystick">
            <summary>
            A joystick with buttons and axes.
            </summary>
        </member>
        <member name="M:Rewired.Joystick.GetCalibrationMapSaveData">
            <summary>
            Gets calibration map save data from this joystick.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rewired.Joystick.SetVibration(System.Single,System.Single)">
            <summary>
            Sets vibration speed for left and right motors.
            This is specifically for XInput controllers on Windows. For other controllers or platforms, see overloads or use extension property.
            </summary>
            <param name="leftMotorSpeed">float: 0.0 - 1.0</param>
            <param name="rightMotorSpeed">float: 0.0 - 1.0</param>
        </member>
        <member name="M:Rewired.Joystick.SetVibration(System.Int32,System.Single)">
            <summary>
            Sets vibration level for a motor at a specified index.
            </summary>
            <param name="motorIndex">Motor index</param>
            <param name="motorLevel">Motor level [float: 0.0 - 1.0]</param>
        </member>
        <member name="M:Rewired.Joystick.SetVibration(System.Int32,System.Single,System.Boolean)">
            <summary>
            Sets vibration level for a motor at a specified index.
            </summary>
            <param name="motorIndex">Motor index</param>
            <param name="motorLevel">Motor level [float: 0.0 - 1.0]</param>
            <param name="stopOtherMotors">Stop other motors?</param>
        </member>
        <member name="M:Rewired.Joystick.GetVibration(System.Int32)">
            <summary>
            Gets vibration level for a motor at a specified index.
            </summary>
            <param name="motorIndex">Motor index</param>
            <returns>Motor level [float: 0.0 - 1.0]</returns>
        </member>
        <member name="M:Rewired.Joystick.StopVibration">
            <summary>
            Stops vibration on all motors.
            </summary>
        </member>
        <member name="P:Rewired.Joystick.systemId">
            <summary>
            The id of the device in the underlying input source. The meaning of this value is determined by the current input source.
            This may include Unity input, Raw Input, Direct Input, OSX I/O Kit, XBoxOneInput, Ouya input, and others.
            Generally, you should never need to use this, but it is exposed for advanced uses.
            Returns null if there is no system id associated with this joystick.
            </summary>
        </member>
        <member name="P:Rewired.Joystick.unityId">
            <summary>
            The unity joystick id of this joystick. This value is only used on platforms that use Unity input as the underlying input source.
            This value is a 1-based index corresponding to the joystick number in the Unity input manager.
            Generally, you should never need to use this, but it is exposed for advanced uses.
            Returns 0 if the platform does not use Unity input or if the joystick is not associated with a Unity joystick.
            </summary>
        </member>
        <member name="P:Rewired.Joystick.hardwareTypeGuid">
            <summary>
            The Rewired GUID associated with this device. A GUID of all zeros is an Unknown Controller.
            </summary>
        </member>
        <member name="P:Rewired.Joystick.supportsVibration">
            <summary>
            Does this controller support vibration?
            </summary>
        </member>
        <member name="P:Rewired.Joystick.vibrationLeftMotor">
            <summary>
            Sets vibration speed on the left motor or the motor at index 0. [float: 0.0 - 1.0]
            This is specifically for XInput controllers on Windows.
            </summary>
        </member>
        <member name="P:Rewired.Joystick.vibrationRightMotor">
            <summary>
            Sets vibration speed on the right motor or the motor at index 1. [float: 0.0 - 1.0]
            This is specifically for XInput controllers on Windows.
            </summary>
        </member>
        <member name="P:Rewired.Joystick.vibrationMotorCount">
            <summary>
            The number of vibration motors this device supports.
            </summary>
        </member>
        <member name="T:Rewired.Keyboard">
            <summary>
            A keyboard with keys.
            </summary>
        </member>
        <member name="T:Rewired.Mouse">
            <summary>
            A mouse with buttons and axes.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Custom.CustomInputSource">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Platforms.Custom.CustomInputSource.Controller">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Platforms.Custom.CustomInputSource.Joystick">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Platforms.Custom.CustomInputSource.Element">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Platforms.Custom.CustomInputSource.Axis">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Platforms.Custom.CustomInputSource.Button">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.ConfigVars">
            <summary>
            Configuration variables for the Input Manager.
            </summary>
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.ControllerDataFiles">
            <summary>
            Stores the supported controller hardware maps.
            </summary>
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.CustomController_Editor">
            <summary>
            Custom Controller data stored in the InputManager.
            </summary>
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.EditorSettings">
            <summary>
            Stores editor data.
            </summary>
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.ActionCategoryMap">
            <summary>
            Maps actions to an action category.
            </summary>
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap">
            <summary>
            A hardware controller profile. Maps physical hardware elements to identifiable elements on supported platforms.
            </summary>
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Interfaces.IHardwareControllerMap">
            <summary>
            Interface for hardware controller maps.
            </summary>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Utils.Interfaces.IDeepCloneable">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Elements_Base">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.MatchingCriteria_Base">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.CompoundElement">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.VidPid">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_RawOrDirectInput">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_RawOrDirectInput.MatchingCriteria">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_RawOrDirectInput.Elements_Platform_Base">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_RawOrDirectInput.Element">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_RawOrDirectInput.Button_Base">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_RawOrDirectInput.Axis_Base">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_RawOrDirectInput.DeviceType">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_DirectInput">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_DirectInput.Elements">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_DirectInput.Button">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_DirectInput.Axis">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_RawInput">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_RawInput.Elements">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_RawInput.Button">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_RawInput.Axis">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_XInput">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_XInput.MatchingCriteria">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_XInput.Elements">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_XInput.Element">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_XInput.Button">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_XInput.Axis">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_XInput.SubType">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_OSX">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_OSX.MatchingCriteria">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_OSX.Elements">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_OSX.Element">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_OSX.Button">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_OSX.Axis">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_Linux">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_Linux.MatchingCriteria">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_Linux.Elements">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_Linux.Element">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_Linux.Button">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_Linux.Axis">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_Fallback">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_Fallback.MatchingCriteria">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_Fallback.Elements">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_Fallback.Element">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_Fallback.Button">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_Fallback.Axis">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_Custom">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_Custom.MatchingCriteria">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_Custom.Elements">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_Custom.Element">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_Custom.Button">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_Custom.Axis">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_Ouya">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_Ouya.MatchingCriteria">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_Ouya.Elements">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_Ouya.Button">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_Ouya.Axis">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_XboxOne">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_XboxOne.MatchingCriteria">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_XboxOne.Elements">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_XboxOne.Button">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_XboxOne.Axis">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_InternalDriver">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_InternalDriver.MatchingCriteria">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_InternalDriver.Elements">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_InternalDriver.Button">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_InternalDriver.Axis">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_SDL2">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_SDL2.MatchingCriteria">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_SDL2.Elements">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_SDL2.Element">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_SDL2.Button">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_SDL2.Axis">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_Steam">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_Steam.MatchingCriteria">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickMap.Platform_Steam.Elements">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareJoystickTemplateMap">
            <summary>
            Maps hardware joystick maps to a common template.
            </summary>
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareElementSourceType">
            <summary>
            The type of this hardware element.
            </summary>
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HardwareElementSourceTypeWithHat">
            <summary>
            The type of this hardware element including hats.
            </summary>
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HatDirection">
            <summary>
            A specific direction of a hat.
            </summary>
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.HatType">
            <summary>
            The type of hat.
            </summary>
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.Mapping.AxisDirection">
            <summary>
            A specific direction of an axis.
            </summary>
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.RuntimeData">
            <summary>
            Data used during runtime.
            </summary>
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.EditorPlatformData">
            <summary>
            Data used in the editor.
            </summary>
        </member>
        <member name="T:Rewired.Data.EditorPlatformData.Platform">
            <summary>
            Represents a platform.
            </summary>
        </member>
        <member name="T:Rewired.Data.Player_Editor">
            <summary>
            Player data stored in an InputManager.
            </summary>
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Data.UserData">
            <summary>
            User data stored in an InputManager.
            </summary>
            <exclude></exclude>
        </member>
        <member name="M:Rewired.Data.UserData.FindJoystickMap_Game(Rewired.InputSource,System.Int32,System.Guid,System.Int32)">
            <summary>
            Searches the user-defined maps for a matching map based on category, layout, controller Guid, and template Guid.
            First it will search for an exact controller guid + category + layout match. If no controller guid's match, it search for a template
            map. Failing that, it will search for a generic map. If no map is found, a blank map will be loaded.
            </summary>
        </member>
        <member name="M:Rewired.Data.UserData.FindKeyboardMap_Game(System.Int32,System.Int32)">
            <summary>
            Searches the user-defined maps for a matching map based on category, layout, controller Guid, and template Guid.
            First it will search for an exact controller guid + category + layout match. If no controller guid's match, it search for a template
            map. Failing that, it will search for a generic map. If no map is found, a blank map will be loaded.
            </summary>
        </member>
        <member name="M:Rewired.Data.UserData.FindMouseMap_Game(System.Int32,System.Int32)">
            <summary>
            Searches the user-defined maps for a matching map based on category, layout, controller Guid, and template Guid.
            First it will search for an exact controller guid + category + layout match. If no controller guid's match, it search for a template
            map. Failing that, it will search for a generic map. If no map is found, a blank map will be loaded.
            </summary>
        </member>
        <member name="M:Rewired.Data.UserData.FindCustomControllerMap_Game(System.Int32,System.Int32,System.Int32)">
            <summary>
            Searches the user-defined maps for a matching map based on category, layout, controller Guid, and template Guid.
            First it will search for an exact controller guid + category + layout match. If no controller guid's match, it search for a template
            map. Failing that, it will search for a generic map. If no map is found, a blank map will be loaded.
            </summary>
        </member>
        <member name="T:Rewired.Data.UserDataStore">
            <summary>
            Base class for Rewired data storage system. Implement this class to make a custom data store.
            </summary>
        </member>
        <member name="T:Rewired.Interfaces.IUserDataStore">
            <summary>
            Interface for UserDataStore. Used for saving and loading controller configuration data.
            </summary>
        </member>
        <member name="M:Rewired.Interfaces.IUserDataStore.Save">
            <summary>
            Save all data now.
            </summary>
        </member>
        <member name="M:Rewired.Interfaces.IUserDataStore.SaveControllerData(System.Int32,Rewired.ControllerType,System.Int32)">
            <summary>
            Save all data for a specific controller for a Player.
            </summary>
            <param name="playerId">Player id</param>
            <param name="controllerType">Controller type</param>
            <param name="controllerId">Controller id</param>
        </member>
        <member name="M:Rewired.Interfaces.IUserDataStore.SaveControllerData(Rewired.ControllerType,System.Int32)">
            <summary>
            Save all data for a specific controller. Does not save Player data.
            </summary>
            <param name="controllerType">Controller type</param>
            <param name="controllerId">Controller id</param>
        </member>
        <member name="M:Rewired.Interfaces.IUserDataStore.SavePlayerData(System.Int32)">
            <summary>
            Save all data for a specific Player.
            </summary>
            <param name="playerId">Player id</param>
        </member>
        <member name="M:Rewired.Interfaces.IUserDataStore.SaveInputBehavior(System.Int32,System.Int32)">
            <summary>
            Save all data for a specific InputBehavior for a Player.
            </summary>
            <param name="playerId">Player id</param>
            <param name="behaviorId">Input Behavior id</param>
        </member>
        <member name="M:Rewired.Interfaces.IUserDataStore.Load">
            <summary>
            Load all data now.
            </summary>
        </member>
        <member name="M:Rewired.Interfaces.IUserDataStore.LoadControllerData(System.Int32,Rewired.ControllerType,System.Int32)">
            <summary>
            Load all data for a specific controller for a Player.
            </summary>
            <param name="playerId">Player id</param>
            <param name="controllerType">Controller type</param>
            <param name="controllerId">Controller id</param>
        </member>
        <member name="M:Rewired.Interfaces.IUserDataStore.LoadControllerData(Rewired.ControllerType,System.Int32)">
            <summary>
            Load all data for a specific controller. Does not load Player data.
            </summary>
            <param name="controllerType">Controller type</param>
            <param name="controllerId">Controller id</param>
        </member>
        <member name="M:Rewired.Interfaces.IUserDataStore.LoadPlayerData(System.Int32)">
            <summary>
            Load all data for a specific Player.
            </summary>
            <param name="playerId">Player id</param>
        </member>
        <member name="M:Rewired.Interfaces.IUserDataStore.LoadInputBehavior(System.Int32,System.Int32)">
            <summary>
            Load all data for a specific InputBehavior for a Player.
            </summary>
            <param name="playerId">Player id</param>
            <param name="behaviorId">Input Behavior id</param>
        </member>
        <member name="M:Rewired.Data.UserDataStore.Load">
            <summary>
            Load all data now.
            </summary>
        </member>
        <member name="M:Rewired.Data.UserDataStore.LoadControllerData(System.Int32,Rewired.ControllerType,System.Int32)">
            <summary>
            Load all data for a specific controller for a Player.
            </summary>
            <param name="playerId">Player id</param>
            <param name="controllerType">Controller type</param>
            <param name="controllerId">Controller id</param>
        </member>
        <member name="M:Rewired.Data.UserDataStore.LoadControllerData(Rewired.ControllerType,System.Int32)">
            <summary>
            Load all data for a specific controller. Does not load Player data.
            </summary>
            <param name="controllerType">Controller type</param>
            <param name="controllerId">Controller id</param>
        </member>
        <member name="M:Rewired.Data.UserDataStore.LoadPlayerData(System.Int32)">
            <summary>
            Load all data for a specific Player.
            </summary>
            <param name="playerId">Player id</param>
        </member>
        <member name="M:Rewired.Data.UserDataStore.LoadInputBehavior(System.Int32,System.Int32)">
            <summary>
            Load all data for a specific InputBehavior for a Player.
            </summary>
            <param name="playerId">Player id</param>
            <param name="behaviorId">Input Behavior id</param>
        </member>
        <member name="M:Rewired.Data.UserDataStore.Save">
            <summary>
            Save all data now.
            </summary>
        </member>
        <member name="M:Rewired.Data.UserDataStore.SaveControllerData(System.Int32,Rewired.ControllerType,System.Int32)">
            <summary>
            Save all data for a specific controller for a Player.
            </summary>
            <param name="playerId">Player id</param>
            <param name="controllerType">Controller type</param>
            <param name="controllerId">Controller id</param>
        </member>
        <member name="M:Rewired.Data.UserDataStore.SaveControllerData(Rewired.ControllerType,System.Int32)">
            <summary>
            Save all data for a specific controller. Does not save Player data.
            </summary>
            <param name="controllerType">Controller type</param>
            <param name="controllerId">Controller id</param>
        </member>
        <member name="M:Rewired.Data.UserDataStore.SavePlayerData(System.Int32)">
            <summary>
            Save all data for a specific Player.
            </summary>
            <param name="playerId">Player id</param>
        </member>
        <member name="M:Rewired.Data.UserDataStore.SaveInputBehavior(System.Int32,System.Int32)">
            <summary>
            Save all data for a specific InputBehavior for a Player.
            </summary>
            <param name="playerId">Player id</param>
            <param name="behaviorId">Input Behavior id</param>
        </member>
        <member name="M:Rewired.Data.UserDataStore.OnInitialize">
            <summary>
            Called when SaveDataStore is initialized.
            </summary>
        </member>
        <member name="M:Rewired.Data.UserDataStore.OnControllerConnected(Rewired.ControllerStatusChangedEventArgs)">
            <summary>
            Called when a controller is connected.
            </summary>
            <param name="args">ControllerStatusChangedEventArgs</param>
        </member>
        <member name="M:Rewired.Data.UserDataStore.OnControllerDisconnected(Rewired.ControllerStatusChangedEventArgs)">
            <summary>
            Called when a controller is about to be disconnected.
            </summary>
            <param name="args">ControllerStatusChangedEventArgs</param>
        </member>
        <member name="M:Rewired.Data.UserDataStore.OnControllerPreDiscconnect(Rewired.ControllerStatusChangedEventArgs)">
            <summary>
            Calls after a controller has been disconnected.
            </summary>
            <param name="args">ControllerStatusChangedEventArgs</param>
        </member>
        <member name="T:Rewired.ModifierKey">
            <summary>
            A keyboard modifier key type.
            </summary>
        </member>
        <member name="T:Rewired.ModifierKeyFlags">
            <summary>
            Keyboard modifier keys as flags.
            </summary>
        </member>
        <member name="T:Rewired.KeyboardKeyCode">
            <summary>
            A keyboard key code.
            </summary>
        </member>
        <member name="T:Rewired.MouseInputElement">
            <summary>
            An input element on the mouse.
            </summary>
        </member>
        <member name="T:Rewired.MouseXYAxisMode">
            <summary>
            The mode for the mouse's X and Y axes.
            </summary>
        </member>
        <member name="T:Rewired.MouseXYAxisDeltaCalc">
            <summary>
            The delta calulation mode for the mouse's X and Y axes.
            </summary>
        </member>
        <member name="T:Rewired.MouseOtherAxisMode">
            <summary>
            The mode for the mouse's other axes apart from X and Y.
            </summary>
        </member>
        <member name="T:Rewired.InputActionType">
            <summary>
            The expected element type of an action.
            </summary>
        </member>
        <member name="T:Rewired.AxisType">
            <summary>
            The type of axis.
            </summary>
        </member>
        <member name="T:Rewired.Pole">
            <summary>
            A positive or negative value.
            </summary>
        </member>
        <member name="T:Rewired.AxisRange">
            <summary>
            The range of an axis.
            </summary>
        </member>
        <member name="T:Rewired.ControllerType">
            <summary>
            The type of a controller.
            </summary>
        </member>
        <member name="T:Rewired.ControllerElementType">
            <summary>
            The type of an element in a controller.
            </summary>
        </member>
        <member name="T:Rewired.CompoundControllerElementType">
            <summary>
            The type of a compound element in a controller.
            </summary>
        </member>
        <member name="T:Rewired.DeadZone2DType">
            <summary>
            Calculation type for 2D deadzones.
            </summary>
        </member>
        <member name="T:Rewired.ElementAssignmentType">
            <summary>
            The type of an element assignment.
            </summary>
        </member>
        <member name="T:Rewired.UpdateLoopType">
            <summary>
            Unity update loop type.
            </summary>
        </member>
        <member name="T:Rewired.InputActionEventType">
            <summary>
            Input action events. When using event based input, this is used to specify when to send an event.
            </summary>
        </member>
        <member name="T:Rewired.Utils.Interfaces.IExternalTools">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.InputManager_Base">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Utils.Classes.Data.Workpool_DataContainer`1">
            <summary>
            A Workpool which uses objects to hold data.
            Creates an object for every entry. These objects remain even when Clear is called, but the contents are cleared.
            Data is added by padding another instance of T object from which the contents are copied to the public object.
            The passed object itself is not added, but objects contained in the passer object are stored by reference (not cloned).
            You cannot add objects to the list directly, only data witin the object.
            Your T must implement the Workpool_DataContainer&lt;T&gt;.IEntry interface.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Rewired.Internal.OnGUIHelper">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.ActionElementMap">
            <summary>
            Maps an action to a controller element.
            </summary>
        </member>
        <member name="P:Rewired.ActionElementMap.actionId">
            <summary>
            Gets the id of the Action to which the element is bound.
            </summary>
        </member>
        <member name="P:Rewired.ActionElementMap.actionCategoryId">
            <summary>
            OBSOLETE: DO NOT USE. To get the actionCategoryId for an Action, obtain it from ReInput.mapping.GetAction(actionId).categoryId.
            </summary>
        </member>
        <member name="P:Rewired.ActionElementMap.elementType">
            <summary>
            Gets the element type of the controller element bound to the Action.
            </summary>
        </member>
        <member name="P:Rewired.ActionElementMap.elementIdentifierId">
            <summary>
            The controller element identifier id bound to the Action.
            </summary>
        </member>
        <member name="P:Rewired.ActionElementMap.axisRange">
            <summary>
            The range of the axis.
            </summary>
        </member>
        <member name="P:Rewired.ActionElementMap.invert">
            <summary>
            Is the axis inverted?
            </summary>
        </member>
        <member name="P:Rewired.ActionElementMap.axisContribution">
            <summary>
            The axis contribution of the axis.
            </summary>
        </member>
        <member name="P:Rewired.ActionElementMap.keyboardKeyCode">
            <summary>
            The keyboard key code. Only used for keyboard bindings. Returns Rewired.KeyboardKeyCode value.
            </summary>
        </member>
        <member name="P:Rewired.ActionElementMap.modifierKey1">
            <summary>
            The first keyboard modifier key;
            </summary>
        </member>
        <member name="P:Rewired.ActionElementMap.modifierKey2">
            <summary>
            The second keyboard modifier key;
            </summary>
        </member>
        <member name="P:Rewired.ActionElementMap.modifierKey3">
            <summary>
            The third keyboard modifier key;
            </summary>
        </member>
        <member name="P:Rewired.ActionElementMap.axisType">
            <summary>
            The axis type.
            </summary>
        </member>
        <member name="P:Rewired.ActionElementMap.modifierKeyFlags">
            <summary>
            Flags representing all the assigned keyboard modifier keys.
            </summary>
        </member>
        <member name="P:Rewired.ActionElementMap.keyCode">
            <summary>
            The keyboard key code. Only used for keyboard bindings. Returns UnityEngine.KeyCode value.
            </summary>
        </member>
        <member name="P:Rewired.ActionElementMap.hasModifiers">
            <summary>
            Does this use any keyboard modfiier keys?
            </summary>
        </member>
        <member name="P:Rewired.ActionElementMap.elementIdentifierName">
            <summary>
            Gets the name of the element identifier bound to the Action. For split axes, this will return the Positive or Negative name or the Descriptive Name with a +/- suffix.
            </summary>
        </member>
        <member name="P:Rewired.ActionElementMap.elementIndex">
            <summary>
            Gets the controller element index pointed to by this mapping.
            </summary>
        </member>
        <member name="P:Rewired.ActionElementMap.id">
            <summary>
            Gets the unique runtime id of this ActionElementMap. This value is not consistent between game sessions, so do not store it.
            </summary>
        </member>
        <member name="T:Rewired.CalibrationMapSaveData">
            <summary>
            Save data for a Calibration Map.
            </summary>
        </member>
        <member name="T:Rewired.JoystickCalibrationMapSaveData">
            <summary>
            Save data for a Joystick Calibration Map.
            </summary>
        </member>
        <member name="T:Rewired.CalibrationMap">
            <summary>
            Maps calibration data to a controller's axes.
            </summary>
        </member>
        <member name="T:Rewired.AxisCalibration">
            <summary>
            Holds calibration information for a controller axis.
            </summary>
        </member>
        <member name="T:Rewired.AxisCalibrationData">
            <summary>
            A struct for working with axis calibration data.
            </summary>
        </member>
        <member name="T:Rewired.ControllerElementIdentifier">
            <summary>
            Represents a single element on a controller. Used to identify physical elements on controllers by type and name.
            </summary>
        </member>
        <member name="T:Rewired.ControllerMapSaveData">
            <summary>
            Base class for controller map save data.
            </summary>
        </member>
        <member name="T:Rewired.KeyboardMapSaveData">
            <summary>
            Used to retrieve saveable keyboard map data.
            </summary>
        </member>
        <member name="T:Rewired.MouseMapSaveData">
            <summary>
            Used to retrieve saveable mouse map data.
            </summary>
        </member>
        <member name="T:Rewired.JoystickMapSaveData">
            <summary>
            Used to retrieve saveable joystick map data.
            </summary>
        </member>
        <member name="T:Rewired.CustomControllerMapSaveData">
            <summary>
            Used to retrieve saveable custom controller map data.
            </summary>
        </member>
        <member name="T:Rewired.ControllerMap">
            <summary>
            The base class for all controller maps. Maps actions to specific controller elements.
            </summary>
        </member>
        <member name="M:Rewired.ControllerMap.ContainsAction(System.String)">
            <summary>
            Does this controller map contain any ActionElementMaps that are bound to a particular Action?
            </summary>
            <param name="actionName">The name of the Action.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Rewired.ControllerMap.ContainsAction(System.Int32)">
            <summary>
            Does this controller map contain any ActionElementMaps that are bound to a particular Action?
            </summary>
            <param name="actionId">The id of the Action.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Rewired.ControllerMap.ReplaceOrCreateElementMap(Rewired.ElementAssignment)">
            <summary>
            Replaces an existing ActionElementMap with a new assignment.
            ElementAssignment.elementMapId must be set to the ActionElementMap.id of the assignment to replace if replacing.
            If no ActionElementMap is found matching that id, a new ActionElementMap will be created instead.
            NOTE: When replacing, a new ActionElementMap object will be created and will have a new unique id. The old ActionElementMap that was replaced will no longer be valid.
            </summary>
            <param name="elementAssignment">ElementAssignment info</param>
            <returns>Success/Failure</returns>
        </member>
        <member name="M:Rewired.ControllerMap.CreateElementMap(Rewired.ElementAssignment)">
            <summary>
            Creates an ActionElementMap in this controller map based on the data in elementAssignment.
            </summary>
            <param name="elementAssignment">ElementAssignment info</param>
            <returns>Success/Failure</returns>
        </member>
        <member name="M:Rewired.ControllerMap.CreateElementMap(System.Int32,Rewired.Pole,UnityEngine.KeyCode,Rewired.ModifierKey,Rewired.ModifierKey,Rewired.ModifierKey)">
            <summary>
            Creates an ActionElementMap in this controller map for a keyboard key assignment.
            </summary>
            <param name="actionId">The id of the Action to bind to.</param>
            <param name="axisContribution">When the key is pressed, does it return a positive or negative value?</param>
            <param name="keyCode">The keyboard key the Action will be bound to.</param>
            <param name="modifierKey1">First modifier key for the keyboard key. KeyCode.None = no modifier.</param>
            <param name="modifierKey2">Second modifier key for the keyboard key. KeyCode.None = no modifier.</param>
            <param name="modifierKey3">Third modifier key for the keyboard key. KeyCode.None = no modifier.</param>
            <returns>Success/Failure</returns>
        </member>
        <member name="M:Rewired.ControllerMap.CreateElementMap(System.Int32,Rewired.Pole,UnityEngine.KeyCode,Rewired.ModifierKeyFlags)">
            <summary>
            Creates an ActionElementMap in this controller map for a keyboard key assignment.
            </summary>
            <param name="actionId">The id of the Action to bind to.</param>
            <param name="axisContribution">When the key is pressed, does it return a positive or negative value?</param>
            <param name="keyCode">The keyboard key the Action will be bound to.</param>
            <param name="modifierKeyFlags">Modifier key flags for the keyboard key. ModifierKeyFlags.None = no modifiers.</param>
            <returns>Success/Failure</returns>
        </member>
        <member name="M:Rewired.ControllerMap.CreateElementMap(System.Int32,Rewired.Pole,System.Int32,Rewired.ControllerElementType,Rewired.AxisRange,System.Boolean)">
            <summary>
            Creates an ActionElementMap in this controller map for a controller button or axis assignment.
            </summary>
            <param name="actionId">The id of the Action to bind to.</param>
            <param name="axisContribution">When the button or split-axis is activated, does it return a positive or negative value?</param>
            <param name="elementIdentifierId">The id of the controller element identifier the Action will be bound to.</param>
            <param name="elementType">The type of controller element the Action will be bound to.</param>
            <param name="axisRange">The portion of the axis the Action will be bound to. (Only used if elementType is Axis.)</param>
            <param name="invert">Is the axis inverted? (Only used if elementType is Axis and axisRange is Full.)</param>
            <returns>Success/Failure</returns>
        </member>
        <member name="M:Rewired.ControllerMap.ReplaceElementMap(Rewired.ElementAssignment)">
            <summary>
            Replaces an existing ActionElementMap with a new assignment.
            ElementAssignment.elementMapId must be set to the ActionElementMap.id of the assignment to replace if replacing.
            If no matching ActionElementMap is found, it will return false.
            </summary>
            <param name="elementAssignment">ElementAssignment info</param>
            <returns>Success/Failure</returns>
        </member>
        <member name="M:Rewired.ControllerMap.ReplaceElementMap(System.Int32,System.Int32,Rewired.Pole,UnityEngine.KeyCode,Rewired.ModifierKey,Rewired.ModifierKey,Rewired.ModifierKey)">
            <summary>
            Replaces an ActionElementMap in this controller map with a new keyboard key assignment.
            If the ActionElementMap is not found in this controller map, a new ActionElementMap will not be created.
            NOTE: When replacing, a new ActionElementMap object will be created and will have a new unique id. The old ActionElementMap that was replaced will no longer be valid.
            </summary>
            <param name="elementMapId">The unique id of the ActionElementMap being replaced.</param>
            <param name="actionId">The id of the Action to bind to.</param>
            <param name="axisContribution">When the key is pressed, does it return a positive or negative value?</param>
            <param name="keyCode">The keyboard key the Action will be bound to.</param>
            <param name="modifierKey1">First modifier key for the keyboard key. KeyCode.None = no modifier.</param>
            <param name="modifierKey2">Second modifier key for the keyboard key. KeyCode.None = no modifier.</param>
            <param name="modifierKey3">Third modifier key for the keyboard key. KeyCode.None = no modifier.</param>
            <returns>Success/Failure</returns>
        </member>
        <member name="M:Rewired.ControllerMap.ReplaceElementMap(System.Int32,System.Int32,Rewired.Pole,UnityEngine.KeyCode,Rewired.ModifierKeyFlags)">
            <summary>
            Replaces an ActionElementMap in this controller map with a new keyboard key assignment.
            If the ActionElementMap is not found in this controller map, a new ActionElementMap will not be created.
            NOTE: When replacing, a new ActionElementMap object will be created and will have a new unique id. The old ActionElementMap that was replaced will no longer be valid.
            </summary>
            <param name="elementMapId">The unique id of the ActionElementMap being replaced.</param>
            <param name="actionId">The id of the Action to bind to.</param>
            <param name="axisContribution">When the key is pressed, does it return a positive or negative value?</param>
            <param name="keyCode">The keyboard key the Action will be bound to.</param>
            <param name="modifierKeyFlags">Modifier key flags for the keyboard key. ModifierKeyFlags.None = no modifiers.</param>
            <returns></returns>
        </member>
        <member name="M:Rewired.ControllerMap.ReplaceElementMap(System.Int32,System.Int32,Rewired.Pole,System.Int32,Rewired.ControllerElementType,Rewired.AxisRange,System.Boolean)">
            <summary>
            Replaces an ActionElementMap in this controller map with a new button or axis assignment.
            If the ActionElementMap is not found in this controller map, a new ActionElementMap will not be created.
            NOTE: When replacing, a new ActionElementMap object will be created and will have a new unique id. The old ActionElementMap that was replaced will no longer be valid.
            </summary>
            <param name="elementMapId">The unique id of the ActionElementMap being replaced.</param>
            <param name="actionId">The id of the Action to bind to.</param>
            <param name="axisContribution">When the button or split-axis is activated, does it return a positive or negative value?</param>
            <param name="elementIdentifierId">The id of the controller element identifier the Action will be bound to.</param>
            <param name="elementType">The type of controller element the Action will be bound to.</param>
            <param name="axisRange">The portion of the axis the Action will be bound to. (Only used if elementType is Axis.)</param>
            <param name="invert">Is the axis inverted? (Only used if elementType is Axis and axisRange is Full.)</param>
            <returns>Success/Failure</returns>
        </member>
        <member name="M:Rewired.ControllerMap.DeleteElementMap(System.Int32)">
            <summary>
            Deletes the ActionElementMap from the controller map.
            </summary>
            <param name="elementMapId">The unique id of the ActionElementMap to delete.</param>
            <returns>Success/Failure</returns>
        </member>
        <member name="M:Rewired.ControllerMap.DeleteElementMapsWithAction(System.String)">
            <summary>
            Deletes all ActionElementMap from the controller map that contain a specific Action.
            </summary>
            <param name="actionName">The name of the Action.</param>
            <returns>True/False if any ActionElementMaps were deleted.</returns>
        </member>
        <member name="M:Rewired.ControllerMap.DeleteElementMapsWithAction(System.Int32)">
            <summary>
            Deletes all ActionElementMap from the controller map that contain a specific Action.
            </summary>
            <param name="actionId">The id of the Action.</param>
            <returns>True/False if any ActionElementMaps were deleted.</returns>
        </member>
        <member name="M:Rewired.ControllerMap.GetElementMap(System.Int32)">
            <summary>
            Gets the ActionElementMap that matches the id.
            </summary>
            <param name="elementMapId">Unique id of the ActionElementMap.</param>
            <returns>ActionElementMap</returns>
        </member>
        <member name="M:Rewired.ControllerMap.GetElementMaps">
            <summary>
            Gets all ActionElementMaps in this controller map.
            </summary>
            <returns>Array of ActionElementMap</returns>
        </member>
        <member name="M:Rewired.ControllerMap.GetElementMapsWithAction(System.String)">
            <summary>
            Gets all ActionElementMaps in this controller map that contain a specific Action.
            </summary>
            <param name="actionName">The name of the Action</param>
            <returns>Array of ActionElementMap</returns>
        </member>
        <member name="M:Rewired.ControllerMap.GetElementMapsWithAction(System.Int32)">
            <summary>
            Gets all ActionElementMaps in this controller map that contain a specific Action.
            </summary>
            <param name="actionId">The id of the Action</param>
            <returns>Array of ActionElementMap</returns>
        </member>
        <member name="M:Rewired.ControllerMap.ElementMapsWithAction(System.String)">
            <summary>
            Enumarates all ActionElementMaps in this controller map that contain a specific Action.
            </summary>
            <param name="actionName">The name of the Action</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Rewired.ControllerMap.ElementMapsWithAction(System.Int32)">
            <summary>
            Enumarates all ActionElementMaps in this controller map that contain a specific Action.
            </summary>
            <param name="actionId">The id of the Action</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Rewired.ControllerMap.GetFirstElementMapWithAction(System.Int32)">
            <summary>
            Gets the first ActionElementMap found in this controller that contains a specific Action.
            </summary>
            <param name="actionId">The id of the Action</param>
            <returns>ActionElementMap</returns>
        </member>
        <member name="M:Rewired.ControllerMap.GetFirstElementMapWithAction(System.String)">
            <summary>
            Gets the first ActionElementMap found in this controller that contains a specific Action.
            </summary>
            <param name="actionName">The name of the Action</param>
            <returns>ActionElementMap</returns>
        </member>
        <member name="M:Rewired.ControllerMap.ClearElementMaps">
            <summary>
            Deletes all ActionElementMaps in this controller map.
            </summary>
        </member>
        <member name="M:Rewired.ControllerMap.GetButtonMap(System.Int32)">
            <summary>
            Gets the Button ActionElementMap at a specific index..
            </summary>
            <param name="index">Index</param>
            <returns>ActionElementMap</returns>
        </member>
        <member name="M:Rewired.ControllerMap.GetButtonMaps">
            <summary>
            Gets all Button ActionElementMaps in this controller map.
            </summary>
            <returns>Array of ActionElementMap</returns>
        </member>
        <member name="M:Rewired.ControllerMap.GetButtonMapsWithAction(System.String)">
            <summary>
            Gets all Button ActionElementMaps in this controller map that contain a specific Action.
            </summary>
            <param name="actionName">The name of the Action</param>
            <returns>Array of ActionElementMap</returns>
        </member>
        <member name="M:Rewired.ControllerMap.GetButtonMapsWithAction(System.Int32)">
            <summary>
            Gets all Button ActionElementMaps in this controller map that contain a specific Action.
            </summary>
            <param name="actionId">The id of the Action</param>
            <returns>Array of ActionElementMap</returns>
        </member>
        <member name="M:Rewired.ControllerMap.ButtonMapsWithAction(System.Int32)">
            <summary>
            Enumarates all Button ActionElementMaps in this controller map that contain a specific Action.
            </summary>
            <param name="actionId">The id of the Action</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Rewired.ControllerMap.ButtonMapsWithAction(System.String)">
            <summary>
            Enumarates all Axis ActionElementMaps in this controller map that contain a specific Action.
            </summary>
            <param name="actionName">The name of the Action</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Rewired.ControllerMap.GetFirstButtonMapWithAction(System.Int32)">
            <summary>
            Gets the first Button ActionElementMap found in this controller that contains a specific Action.
            </summary>
            <param name="actionId">The id of the Action</param>
            <returns>ActionElementMap</returns>
        </member>
        <member name="M:Rewired.ControllerMap.GetFirstButtonMapWithAction(System.String)">
            <summary>
            Gets the first Button ActionElementMap found in this controller that contains a specific Action.
            </summary>
            <param name="actionName">The name of the Action</param>
            <returns>ActionElementMap</returns>
        </member>
        <member name="M:Rewired.ControllerMap.DeleteButtonMapsWithAction(System.String)">
            <summary>
            Deletes all Button ActionElementMap from the controller map that contain a specific Action.
            </summary>
            <param name="actionName">The name of the Action.</param>
            <returns>True/False if any ActionElementMaps were deleted.</returns>
        </member>
        <member name="M:Rewired.ControllerMap.DeleteButtonMapsWithAction(System.Int32)">
            <summary>
            Deletes all Button ActionElementMap from the controller map that contain a specific Action.
            </summary>
            <param name="actionId">The id of the Action.</param>
            <returns>True/False if any ActionElementMaps were deleted.</returns>
        </member>
        <member name="M:Rewired.ControllerMap.DoesElementAssignmentConflict(Rewired.ControllerMap)">
            <summary>
            Determines if any element assignments conflict between this controller map and the incoming controller map.
            </summary>
            <param name="controllerMap">ControllerMap</param>
            <returns>True/False</returns>
        </member>
        <member name="M:Rewired.ControllerMap.DoesElementAssignmentConflict(Rewired.ActionElementMap)">
            <summary>
            Determines if any element assignments conflict between the this controller map and the incoming ActionElementMap.
            </summary>
            <param name="actionElementMap">ActionElementMap</param>
            <returns>True/False</returns>
        </member>
        <member name="M:Rewired.ControllerMap.DoesElementAssignmentConflict(Rewired.ElementAssignmentConflictCheck)">
            <summary>
            Determines if any element assignments conflict between this controller map and the potential assignment contained in the ElementAssignmentConflictCheck.
            </summary>
            <param name="conflictCheck">ElementAssignmentConflictCheck</param>
            <returns>True/False</returns>
        </member>
        <member name="M:Rewired.ControllerMap.ElementAssignmentConflicts(Rewired.ControllerMap)">
            <summary>
            Enumerates all assignment conflicts between this controller map and the incoming controller map.
            </summary>
            <param name="controllerMap">ControllerMap</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Rewired.ControllerMap.ElementAssignmentConflicts(Rewired.ActionElementMap)">
            <summary>
            Enumerates all assignment conflicts between the this controller map and the incoming ActionElementMap.
            </summary>
            <param name="actionElementMap">ActionElementMap</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Rewired.ControllerMap.ElementAssignmentConflicts(Rewired.ElementAssignmentConflictCheck)">
            <summary>
            Enumerates all assignment conflicts between this controller map and the potential assignment contained in the ElementAssignmentConflictCheck.
            </summary>
            <param name="conflictCheck">ElementAssignmentConflictCheck</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Rewired.ControllerMap.RemoveElementAssignmentConflicts(Rewired.ControllerMap)">
            <summary>
            Deletes any ActionElementMaps in this controller map that conflict with the incoming controller map.
            </summary>
            <param name="controllerMap">ControllerMap</param>
            <returns>Number of conflicting ActionElementMaps removed.</returns>
        </member>
        <member name="M:Rewired.ControllerMap.RemoveElementAssignmentConflicts(Rewired.ActionElementMap)">
            <summary>
            Deletes any ActionElementMaps in this controller map that conflict with the incoming ActionElementMap.
            </summary>
            <param name="actionElementMap">ActionElementMap</param>
            <returns>Number of conflicting ActionElementMaps removed.</returns>
        </member>
        <member name="M:Rewired.ControllerMap.RemoveElementAssignmentConflicts(Rewired.ElementAssignmentConflictCheck)">
            <summary>
            Deletes any ActionElementMaps in this controller map that conflict with the potential assignment contained in the ElementAssignmentConflictCheck.
            </summary>
            <param name="conflictCheck">ElementAssignmentConflictCheck</param>
            <returns>Number of conflicting ActionElementMaps removed.</returns>
        </member>
        <member name="M:Rewired.ControllerMap.GetButtonNames">
            <summary>
            Gets the element identifier names in all button maps.
            </summary>
            <returns>Array of names</returns>
        </member>
        <member name="M:Rewired.ControllerMap.ToXmlString">
            <summary>
            Exports the mapping information to XML.
            </summary>
            <returns>XML string</returns>
        </member>
        <member name="P:Rewired.ControllerMap.id">
            <summary>
            The unique id of this controller map.
            </summary>
        </member>
        <member name="P:Rewired.ControllerMap.sourceMapId">
            <summary>
            The id of the original source ControllerMap from the Rewired Input Manager. This is only valid for maps loaded from the Rewired Input Manager on start, not maps loaded via XML or created at runtime.
            </summary>
        </member>
        <member name="P:Rewired.ControllerMap.categoryId">
            <summary>
            The id of the Map Category of this controller map.
            </summary>
        </member>
        <member name="P:Rewired.ControllerMap.layoutId">
            <summary>
            The id of the Layout of this controller map.
            </summary>
        </member>
        <member name="P:Rewired.ControllerMap.name">
            <summary>
            The name of this controller map. (This is currently unused and will always be blank.)
            </summary>
        </member>
        <member name="P:Rewired.ControllerMap.hardwareGuid">
            <summary>
            The GUID of the controller definition this map is for. This GUID corresponds to the Rewired HardwareJoystickMap controller definition and can be used to identify recognized controller types.
            This will always be Guid.Empty for Unknown Controllers.
            </summary>
        </member>
        <member name="P:Rewired.ControllerMap.enabled">
            <summary>
            Is the controller map enabled? Disabled maps will never return input values for the ActionElementMaps contained within.
            </summary>
        </member>
        <member name="P:Rewired.ControllerMap.playerId">
            <summary>
            The id of the Player that owns this controller map.
            </summary>
        </member>
        <member name="P:Rewired.ControllerMap.controllerId">
            <summary>
            The id of the controller this controller map applies to.
            </summary>
        </member>
        <member name="P:Rewired.ControllerMap.controllerType">
            <summary>
            The type of controller this controller map applies to.
            </summary>
        </member>
        <member name="P:Rewired.ControllerMap.player">
            <summary>
            The Player that owns this controller map.
            </summary>
        </member>
        <member name="P:Rewired.ControllerMap.elementMapCount">
            <summary>
            The count of all ActionElementMaps contained in this controller map.
            </summary>
        </member>
        <member name="P:Rewired.ControllerMap.buttonMapCount">
            <summary>
            The count of all Button ActionElementMaps contained in this controller map.
            </summary>
        </member>
        <member name="P:Rewired.ControllerMap.AllMaps">
            <summary>
            Gets all ActionElementMaps in this controller map.
            </summary>
        </member>
        <member name="P:Rewired.ControllerMap.ButtonMaps">
            <summary>
            Gets all Button ActionElementMaps in this controller map.
            </summary>
        </member>
        <member name="T:Rewired.ControllerMapWithAxes">
            <summary>
            Maps actions to controller elements for a controller with axes.
            </summary>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.ContainsAction(System.Int32)">
            <summary>
            Does this controller map contain any ActionElementMaps that are bound to a particular Action?
            </summary>
            <param name="actionId">The id of the Action.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.CreateElementMap(System.Int32,Rewired.Pole,System.Int32,Rewired.ControllerElementType,Rewired.AxisRange,System.Boolean)">
            <summary>
            Creates an ActionElementMap in this controller map for a controller button or axis assignment.
            </summary>
            <param name="actionId">The id of the Action to bind to.</param>
            <param name="axisContribution">When the button or split-axis is activated, does it return a positive or negative value?</param>
            <param name="elementIdentifierId">The id of the controller element identifier the Action will be bound to.</param>
            <param name="elementType">The type of controller element the Action will be bound to.</param>
            <param name="axisRange">The portion of the axis the Action will be bound to. (Only used if elementType is Axis.)</param>
            <param name="invert">Is the axis inverted? (Only used if elementType is Axis and axisRange is Full.)</param>
            <returns>Success/Failure</returns>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.ReplaceElementMap(System.Int32,System.Int32,Rewired.Pole,System.Int32,Rewired.ControllerElementType,Rewired.AxisRange,System.Boolean)">
            <summary>
            Replaces an ActionElementMap in this controller map with a new button or axis assignment.
            If the ActionElementMap is not found in this controller map, a new ActionElementMap will not be created.
            </summary>
            <param name="elementMapId">The unique id of the ActionElementMap being replaced.</param>
            <param name="actionId">The id of the Action to bind to.</param>
            <param name="axisContribution">When the button or split-axis is activated, does it return a positive or negative value?</param>
            <param name="elementIdentifierId">The id of the controller element identifier the Action will be bound to.</param>
            <param name="elementType">The type of controller element the Action will be bound to.</param>
            <param name="axisRange">The portion of the axis the Action will be bound to. (Only used if elementType is Axis.)</param>
            <param name="invert">Is the axis inverted? (Only used if elementType is Axis and axisRange is Full.)</param>
            <returns>Success/Failure</returns>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.DeleteElementMap(System.Int32)">
            <summary>
            Deletes the ActionElementMap from the controller map.
            </summary>
            <param name="elementMapId">The unique id of the ActionElementMap to delete.</param>
            <returns>Success/Failure</returns>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.DeleteElementMapsWithAction(System.String)">
            <summary>
            Deletes all ActionElementMap from the controller map that contain a specific Action.
            </summary>
            <param name="actionName">The name of the Action.</param>
            <returns>True/False if any ActionElementMaps were deleted.</returns>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.DeleteElementMapsWithAction(System.Int32)">
            <summary>
            Deletes all ActionElementMap from the controller map that contain a specific Action.
            </summary>
            <param name="actionId">The id of the Action.</param>
            <returns>True/False if any ActionElementMaps were deleted.</returns>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.GetElementMap(System.Int32)">
            <summary>
            Gets the ActionElementMap that matches the id.
            </summary>
            <param name="elementMapId">Unique id of the ActionElementMap.</param>
            <returns>ActionElementMap</returns>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.GetFirstElementMapWithAction(System.Int32)">
            <summary>
            Gets the first ActionElementMap found in this controller that contains a specific Action.
            </summary>
            <param name="actionId">The id of the Action</param>
            <returns>ActionElementMap</returns>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.ClearElementMaps">
            <summary>
            Deletes all ActionElementMaps in this controller map.
            </summary>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.GetAxisMap(System.Int32)">
            <summary>
            Gets the Axis ActionElementMap at a specific index..
            </summary>
            <param name="index">Index</param>
            <returns>ActionElementMap</returns>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.GetAxisMaps">
            <summary>
            Gets all Axis ActionElementMaps in this controller map.
            </summary>
            <returns>Array of ActionElementMap</returns>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.GetAxisMapsWithAction(System.String)">
            <summary>
            Gets all Axis ActionElementMaps in this controller map that contain a specific Action.
            </summary>
            <param name="actionName">The name of the Action</param>
            <returns>Array of ActionElementMap</returns>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.GetAxisMapsWithAction(System.Int32)">
            <summary>
            Gets all Axis ActionElementMaps in this controller map that contain a specific Action.
            </summary>
            <param name="actionId">The id of the Action</param>
            <returns>Array of ActionElementMap</returns>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.AxisMapsWithAction(System.String)">
            <summary>
            Enumarates all Axis ActionElementMaps in this controller map that contain a specific Action.
            </summary>
            <param name="actionName">The name of the Action</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.AxisMapsWithAction(System.Int32)">
            <summary>
            Enumarates all Axis ActionElementMaps in this controller map that contain a specific Action.
            </summary>
            <param name="actionId">The id of the Action</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.GetFirstAxisMapWithAction(System.Int32)">
            <summary>
            Gets the first Axis ActionElementMap found in this controller that contains a specific Action.
            </summary>
            <param name="actionId">The id of the Action</param>
            <returns>ActionElementMap</returns>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.GetFirstAxisMapWithAction(System.String)">
            <summary>
            Gets the first Axis ActionElementMap found in this controller that contains a specific Action.
            </summary>
            <param name="actionName">The name of the Action</param>
            <returns>ActionElementMap</returns>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.DeleteAxisMapsWithAction(System.String)">
            <summary>
            Deletes all Axis ActionElementMap from the controller map that contain a specific Action.
            </summary>
            <param name="actionName">The name of the Action.</param>
            <returns>True/False if any ActionElementMaps were deleted.</returns>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.DeleteAxisMapsWithAction(System.Int32)">
            <summary>
            Deletes all Axis ActionElementMap from the controller map that contain a specific Action.
            </summary>
            <param name="actionId">The id of the Action.</param>
            <returns>True/False if any ActionElementMaps were deleted.</returns>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.DoesElementAssignmentConflict(Rewired.ControllerMap)">
            <summary>
            Determines if any element assignments conflict between this controller map and the incoming controller map.
            </summary>
            <param name="controllerMap">ControllerMap</param>
            <returns>True/False</returns>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.DoesElementAssignmentConflict(Rewired.ActionElementMap)">
            <summary>
            Determines if any element assignments conflict between the this controller map and the incoming ActionElementMap.
            </summary>
            <param name="actionElementMap">ActionElementMap</param>
            <returns>True/False</returns>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.DoesElementAssignmentConflict(Rewired.ElementAssignmentConflictCheck)">
            <summary>
            Determines if any element assignments conflict between this controller map and the potential assignment contained in the ElementAssignmentConflictCheck.
            </summary>
            <param name="conflictCheck">ElementAssignmentConflictCheck</param>
            <returns>True/False</returns>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.ElementAssignmentConflicts(Rewired.ControllerMap)">
            <summary>
            Enumerates all assignment conflicts between this controller map and the incoming controller map.
            </summary>
            <param name="controllerMap">ControllerMap</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.ElementAssignmentConflicts(Rewired.ActionElementMap)">
            <summary>
            Enumerates all assignment conflicts between the this controller map and the incoming ActionElementMap.
            </summary>
            <param name="actionElementMap">ActionElementMap</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.ElementAssignmentConflicts(Rewired.ElementAssignmentConflictCheck)">
            <summary>
            Enumerates all assignment conflicts between this controller map and the potential assignment contained in the ElementAssignmentConflictCheck.
            </summary>
            <param name="conflictCheck">ElementAssignmentConflictCheck</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.RemoveElementAssignmentConflicts(Rewired.ControllerMap)">
            <summary>
            Deletes any ActionElementMaps in this controller map that conflict with the incoming controller map.
            </summary>
            <param name="controllerMap">ControllerMap</param>
            <returns>Number of conflicting ActionElementMaps removed.</returns>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.RemoveElementAssignmentConflicts(Rewired.ActionElementMap)">
            <summary>
            Deletes any ActionElementMaps in this controller map that conflict with the incoming ActionElementMap.
            </summary>
            <param name="actionElementMap">ActionElementMap</param>
            <returns>Number of conflicting ActionElementMaps removed.</returns>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.RemoveElementAssignmentConflicts(Rewired.ElementAssignmentConflictCheck)">
            <summary>
            Deletes any ActionElementMaps in this controller map that conflict with the potential assignment contained in the ElementAssignmentConflictCheck.
            </summary>
            <param name="conflictCheck">ElementAssignmentConflictCheck</param>
            <returns>Number of conflicting ActionElementMaps removed.</returns>
        </member>
        <member name="M:Rewired.ControllerMapWithAxes.GetAxisNames">
            <summary>
            Gets the element identifier names in all axis maps.
            </summary>
            <returns>Array of names</returns>
        </member>
        <member name="P:Rewired.ControllerMapWithAxes.elementMapCount">
            <summary>
            The count of all ActionElementMaps contained in this controller map.
            </summary>
        </member>
        <member name="P:Rewired.ControllerMapWithAxes.axisMapCount">
            <summary>
            The count of all Axis ActionElementMaps contained in this controller map.
            </summary>
        </member>
        <member name="P:Rewired.ControllerMapWithAxes.AllMaps">
            <summary>
            Gets all ActionElementMaps in this controller map.
            </summary>
        </member>
        <member name="P:Rewired.ControllerMapWithAxes.AxisMaps">
            <summary>
            Gets all Axis ActionElementMaps in this controller map.
            </summary>
        </member>
        <member name="T:Rewired.KeyboardMap">
            <summary>
            Maps actions to controller elements for a keyboard.
            </summary>
        </member>
        <member name="T:Rewired.MouseMap">
            <summary>
            Maps actions to controller elements for a mouse.
            </summary>
        </member>
        <member name="T:Rewired.JoystickMap">
            <summary>
            Maps actions to controller elements for a joystick.
            </summary>
        </member>
        <member name="T:Rewired.CustomControllerMap">
            <summary>
            Maps actions to controller elements for a custom controller.
            </summary>
        </member>
        <member name="T:Rewired.InputAction">
            <summary>
            Represents a single action.
            </summary>
        </member>
        <member name="T:Rewired.InputBehavior">
            <summary>
            Provides configutaion options for an InputAction.
            </summary>
        </member>
        <member name="M:Rewired.InputBehavior.ToXmlString">
            <summary>
            Exports data to XML string for saving.
            </summary>
            <returns>XML string</returns>
        </member>
        <member name="M:Rewired.InputBehavior.ImportXmlString(System.String)">
            <summary>
            Imports data from XML string.
            </summary>
            <param name="xmlString">XML string data</param>
            <returns>Success/Fail</returns>
        </member>
        <member name="M:Rewired.InputBehavior.ImportData(Rewired.InputBehavior)">
            <summary>
            Imports data from an InputBehavior.
            Note: Does not copy id.
            </summary>
            <param name="inputBehavior">An InputBehavior</param>
            <returns>Success/Fail</returns>
        </member>
        <member name="M:Rewired.InputBehavior.Clone">
            <summary>
            Copies this object.
            </summary>
            <returns>Copy of InputBehavior</returns>
        </member>
        <member name="M:Rewired.InputBehavior.Reset">
            <summary>
            Restores all settings to originals from the Rewired Input Manager.
            </summary>
        </member>
        <member name="T:Rewired.InputCategory">
            <summary>
            A category for organizing input-related data.
            </summary>
        </member>
        <member name="T:Rewired.InputMapCategory">
            <summary>
            A category for organizing controller maps.
            </summary>
        </member>
        <member name="T:Rewired.InputLayout">
            <summary>
            A layout for organizing input maps.
            </summary>
        </member>
        <member name="T:Rewired.PlayerSaveData">
            <summary>
            A struct used for retrieving all the saveable data in a Player.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.Platform">
            <summary>
            The runtime platform.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.EditorPlatform">
            <summary>
            The editor platform.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.WebplayerPlatform">
            <summary>
            The webplayer platform.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.WindowsStandalonePrimaryInputSource">
            <summary>
            Windows Standalone input sources.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.OSXStandalonePrimaryInputSource">
            <summary>
            OSX Standalone input sources.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.LinuxStandalonePrimaryInputSource">
            <summary>
            Linux Standalone input sources.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.XboxOnePrimaryInputSource">
            <summary>
            Xbox One input sources.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.DirectInputAxis">
            <summary>
            Axes supported by DirectInput.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.RawInputAxis">
            <summary>
            Axes supported by RawInput in the Generic Desktop Usage Page.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.XInputAxis">
            <summary>
            Axes supported by XInput.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.XInputButton">
            <summary>
            Buttons supported by XInput.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.OSXAxis">
            <summary>
            Axes supported by OSX.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.UnityAxis">
            <summary>
            Axes supported by Unity input.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.UnityButton">
            <summary>
            Buttons supported by Unity input.
            </summary>
        </member>
        <member name="T:Rewired.Player">
            <summary>
            Represents a player to which controllers are assigned. Input should normally be managed through the Player class.
            </summary>
        </member>
        <member name="F:Rewired.Player.controllers">
            <summary>
            A helper object that provides access controllers and controller maps.
            </summary>
        </member>
        <member name="M:Rewired.Player.GetSaveData(System.Boolean)">
            <summary>
            Gets save data for this player.
            </summary>
            <param name="userAssignableMapsOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Rewired.Player.GetButton(System.String)">
            <summary>
            Gets the button held state of an Action. This will return TRUE as long as the button is held.
            This also applies to axes being used as buttons.
            </summary>
            <param name="actionName">Name of the Action</param>
            <returns>The button held state</returns>
        </member>
        <member name="M:Rewired.Player.GetButton(System.Int32)">
            <summary>
            Gets the button held state of an Action. This will return TRUE as long as the button is held.
            This also applies to axes being used as buttons.
            </summary>
            <param name="actionId">Id of the Action</param>
            <returns>The button held state</returns>
        </member>
        <member name="M:Rewired.Player.GetButtonDown(System.String)">
            <summary>
            Gets the button just pressed state of an Action. This will only return TRUE only on the first frame the button is pressed or for the duration of the Button Down Buffer time limit if set in the Input Behavior assigned to this Action.
            This also applies to axes being used as buttons.
            </summary>
            <param name="actionName">Name of the Action</param>
            <returns>The button just pressed state</returns>
        </member>
        <member name="M:Rewired.Player.GetButtonDown(System.Int32)">
            <summary>
            Gets the button just pressed state of an Action. This will only return TRUE only on the first frame the button is pressed or for the duration of the Button Down Buffer time limit if set in the Input Behavior assigned to this Action.
            This also applies to axes being used as buttons.
            </summary>
            <param name="actionId">Id of the Action</param>
            <returns>The button just pressed state</returns>
        </member>
        <member name="M:Rewired.Player.GetButtonUp(System.String)">
            <summary>
            Get the button just released state for an Action. This will only return TRUE for the first frame the button is released.
            This also applies to axes being used as buttons.
            </summary>
            <param name="actionName">Name of the Action</param>
            <returns>The button just released state</returns>
        </member>
        <member name="M:Rewired.Player.GetButtonUp(System.Int32)">
            <summary>
            Get the button just released state for an Action. This will only return TRUE for the first frame the button is released.
            This also applies to axes being used as buttons.
            </summary>
            <param name="actionId">Id of the Action</param>
            <returns>The button just released state</returns>
        </member>
        <member name="M:Rewired.Player.GetButtonPrev(System.String)">
            <summary>
            Gets the button held state of an Action during the previous frame.
            </summary>
            <param name="actionName">Name of the Action</param>
            <returns>The previous button held state</returns>
        </member>
        <member name="M:Rewired.Player.GetButtonPrev(System.Int32)">
            <summary>
            Gets the button held state of an Action during the previous frame.
            </summary>
            <param name="actionId">Id of the Action</param>
            <returns>The previous button held state</returns>
        </member>
        <member name="M:Rewired.Player.GetButtonDoublePressHold(System.String,System.Single)">
            <summary>
            Gets the button double pressed and held state of an Action. This will return TRUE after a double press and the button is then held.
            </summary>
            <param name="actionName">Name of the Action</param>
            <param name="speed">Allowed time for a double press in seconds.</param>
            <returns>The button held state</returns>
        </member>
        <member name="M:Rewired.Player.GetButtonDoublePressHold(System.Int32,System.Single)">
            <summary>
            Gets the button double pressed and held state of an Action. This will return TRUE after a double press and the button is then held.
            </summary>
            <param name="actionId">Id of the Action</param>
            <param name="speed">Allowed time for a double press in seconds.</param>
            <returns>The button held state</returns>
        </member>
        <member name="M:Rewired.Player.GetButtonDoublePressHold(System.String)">
            <summary>
            Gets the button double pressed and held state of an Action. This will return TRUE after a double press and the button is then held.
            The double press speed is set in the Input Behavior assigned to the Action.
            </summary>
            <param name="actionName">Name of the Action</param>
            <returns>The button held state</returns>
        </member>
        <member name="M:Rewired.Player.GetButtonDoublePressHold(System.Int32)">
            <summary>
            Gets the button double pressed and held state of an Action. This will return TRUE after a double press and the button is then held.
            The double press speed is set in the Input Behavior assigned to the Action.
            </summary>
            <param name="actionId">Id of the Action</param>
            <returns>The button held state</returns>
        </member>
        <member name="M:Rewired.Player.GetButtonDoublePressDown(System.String,System.Single)">
            <summary>
            Gets the button double pressed state of an Action. This will return TRUE only on the first frame of a double press.
            </summary>
            <param name="actionName">Name of the Action</param>
            <param name="speed">Allowed time for a double press in seconds.</param>
            <returns>The button just pressed state</returns>
        </member>
        <member name="M:Rewired.Player.GetButtonDoublePressDown(System.Int32,System.Single)">
            <summary>
            Gets the button double pressed state of an Action. This will return TRUE only on the first frame of a double press.
            </summary>
            <param name="actionId">Id of the Action</param>
            <param name="speed">Allowed time for a double press in seconds.</param>
            <returns>The button just pressed state</returns>
        </member>
        <member name="M:Rewired.Player.GetButtonDoublePressDown(System.String)">
            <summary>
            Gets the button double pressed state of an Action. This will return TRUE only on the first frame of a double press.
            The double press speed is set in the Input Behavior assigned to the Action.
            </summary>
            <param name="actionName">Name of the Action</param>
            <returns>The button just pressed state</returns>
        </member>
        <member name="M:Rewired.Player.GetButtonDoublePressDown(System.Int32)">
            <summary>
            Gets the button double pressed state of an Action. This will return TRUE only on the first frame of a double press.
            The double press speed is set in the Input Behavior assigned to the Action.
            </summary>
            <param name="actionId">Id of the Action</param>
            <returns>The button just pressed state</returns>
        </member>
        <member name="M:Rewired.Player.GetAnyButton">
            <summary>
            Gets the button held state of all Actions. This will return TRUE as long as any button is held.
            This also applies to axes being used as buttons.
            </summary>
            <returns>The button held state</returns>
        </member>
        <member name="M:Rewired.Player.GetAnyButtonDown">
            <summary>
            Gets the button just pressed state of all Actions. This will only return TRUE only on the first frame any button is pressed or for the duration of the Button Down Buffer time limit if set in the Input Behavior assigned to the Action.
            This will return TRUE each time any button is pressed even if others are being held down.
            This also applies to axes being used as buttons.
            </summary>
            <returns>The button just pressed state</returns>
        </member>
        <member name="M:Rewired.Player.GetAnyButtonUp">
            <summary>
            Get the button just released state for all Actions. This will only return TRUE for the first frame the button is released.
            This will return TRUE each time any button is released even if others are being held down.
            This also applies to axes being used as buttons.
            </summary>
            <returns>The button just released state</returns>
        </member>
        <member name="M:Rewired.Player.GetAnyButtonPrev">
            <summary>
            Gets the button held state of an any Action during the previous frame.
            This also applies to axes being used as buttons.
            </summary>
            <returns>The previous button held state</returns>
        </member>
        <member name="M:Rewired.Player.GetButtonTimePressed(System.String)">
            <summary>
            Gets the length of time in seconds that a button has been continuously held down. Returns 0 if the button is not currently pressed.
            </summary>
            <param name="actionName">Name of the Action</param>
            <returns>The duration of the button hold.</returns>
        </member>
        <member name="M:Rewired.Player.GetButtonTimePressed(System.Int32)">
            <summary>
            Gets the length of time in seconds that a button has been continuously held down. Returns 0 if the button is not currently pressed.
            </summary>
            <param name="actionId">Id of the Action</param>
            <returns>The duration of the button hold.</returns>
        </member>
        <member name="M:Rewired.Player.GetButtonTimeUnpressed(System.String)">
            <summary>
            Gets the length of time in seconds that a button has not been pressed. Returns 0 if the button is currently pressed.
            </summary>
            <param name="actionName">Name of the Action</param>
            <returns>The duration of the button inactivity.</returns>
        </member>
        <member name="M:Rewired.Player.GetButtonTimeUnpressed(System.Int32)">
            <summary>
            Gets the length of time in seconds that a button has not been pressed. Returns 0 if the button is currently pressed.
            </summary>
            <param name="actionId">Id of the Action</param>
            <returns>The duration of the button inactivity.</returns>
        </member>
        <member name="M:Rewired.Player.GetNegativeButton(System.String)">
            <summary>
            Gets the negative button held state of an Action. This will return TRUE as long as the negative button is held.
            This also applies to axes being used as buttons.
            </summary>
            <param name="actionName">Name of the Action</param>
            <returns>The negative button held state</returns>
        </member>
        <member name="M:Rewired.Player.GetNegativeButton(System.Int32)">
            <summary>
            Gets the negative button held state of an Action. This will return TRUE as long as the negative button is held.
            This also applies to axes being used as buttons.
            </summary>
            <param name="actionId">Id of the Action</param>
            <returns>The negative button held state</returns>
        </member>
        <member name="M:Rewired.Player.GetNegativeButtonDown(System.String)">
            <summary>
            Gets the negative button just pressed state of an Action. This will only return TRUE only on the first frame the negative button is pressed or for the duration of the Button Down Buffer time limit if set in the Input Behavior assigned to this Action.
            This also applies to axes being used as buttons.
            </summary>
            <param name="actionName">Name of the Action</param>
            <returns>The negative button just pressed state</returns>
        </member>
        <member name="M:Rewired.Player.GetNegativeButtonDown(System.Int32)">
            <summary>
            Gets the negative button just pressed state of an Action. This will only return TRUE only on the first frame the negative button is pressed or for the duration of the Button Down Buffer time limit if set in the Input Behavior assigned to this Action.
            This also applies to axes being used as buttons.
            </summary>
            <param name="actionId">Id of the Action</param>
            <returns>The negative button just pressed state</returns>
        </member>
        <member name="M:Rewired.Player.GetNegativeButtonUp(System.String)">
            <summary>
            Get the negative button just released state for an Action. This will only return TRUE for the first frame the negative button is released.
            This also applies to axes being used as buttons.
            </summary>
            <param name="actionName">Name of the Action</param>
            <returns>The negative button just released state</returns>
        </member>
        <member name="M:Rewired.Player.GetNegativeButtonUp(System.Int32)">
            <summary>
            Get the negative button just released state for an Action. This will only return TRUE for the first frame the negative button is released.
            This also applies to axes being used as buttons.
            </summary>
            <param name="actionId">Id of the Action</param>
            <returns>The negative button just released state</returns>
        </member>
        <member name="M:Rewired.Player.GetNegativeButtonPrev(System.String)">
            <summary>
            Gets the negative button held state of an Action during the previous frame.
            </summary>
            <param name="actionName">Name of the Action</param>
            <returns>The previous negative button held state</returns>
        </member>
        <member name="M:Rewired.Player.GetNegativeButtonPrev(System.Int32)">
            <summary>
            Gets the negative button held state of an Action during the previous frame.
            </summary>
            <param name="actionId">Id of the Action</param>
            <returns>The previous negative button held state</returns>
        </member>
        <member name="M:Rewired.Player.GetNegativeButtonDoublePressHold(System.String,System.Single)">
            <summary>
            Gets the negative button double pressed and held state of an Action. This will return TRUE after a double press and the negative button is then held.
            </summary>
            <param name="actionName">Name of the Action</param>
            <param name="speed">Allowed time for a double press in seconds.</param>
            <returns>The negative button held state</returns>
        </member>
        <member name="M:Rewired.Player.GetNegativeButtonDoublePressHold(System.Int32,System.Single)">
            <summary>
            Gets the negative button double pressed and held state of an Action. This will return TRUE after a double press and the negative button is then held.
            </summary>
            <param name="actionId">Id of the Action</param>
            <param name="speed">Allowed time for a double press in seconds.</param>
            <returns>The negative button held state</returns>
        </member>
        <member name="M:Rewired.Player.GetNegativeButtonDoublePressHold(System.String)">
            <summary>
            Gets the negative button double pressed and held state of an Action. This will return TRUE after a double press and the negative button is then held.
            The double press speed is set in the Input Behavior assigned to the Action.
            </summary>
            <param name="actionName">Name of the Action</param>
            <returns>The negative button held state</returns>
        </member>
        <member name="M:Rewired.Player.GetNegativeButtonDoublePressHold(System.Int32)">
            <summary>
            Gets the negative button double pressed and held state of an Action. This will return TRUE after a double press and the negative button is then held.
            The double press speed is set in the Input Behavior assigned to the Action.
            </summary>
            <param name="actionId">Id of the Action</param>
            <returns>The negative button held state</returns>
        </member>
        <member name="M:Rewired.Player.GetNegativeButtonDoublePressDown(System.String,System.Single)">
            <summary>
            Gets the negative button double pressed state of an Action. This will return TRUE only on the first frame of a double press.
            </summary>
            <param name="actionName">Name of the Action</param>
            <param name="speed">Allowed time for a double press in seconds.</param>
            <returns>The negative button just pressed state</returns>
        </member>
        <member name="M:Rewired.Player.GetNegativeButtonDoublePressDown(System.Int32,System.Single)">
            <summary>
            Gets the negative button double pressed state of an Action. This will return TRUE only on the first frame of a double press.
            </summary>
            <param name="actionId">Id of the Action</param>
            <param name="speed">Allowed time for a double press in seconds.</param>
            <returns>The negative button just pressed state</returns>
        </member>
        <member name="M:Rewired.Player.GetNegativeButtonDoublePressDown(System.String)">
            <summary>
            Gets the negative button double pressed state of an Action. This will return TRUE only on the first frame of a double press.
            The double press speed is set in the Input Behavior assigned to the Action.
            </summary>
            <param name="actionName">Name of the Action</param>
            <returns>The negative button just pressed state</returns>
        </member>
        <member name="M:Rewired.Player.GetNegativeButtonDoublePressDown(System.Int32)">
            <summary>
            Gets the negative button double pressed state of an Action. This will return TRUE only on the first frame of a double press.
            The double press speed is set in the Input Behavior assigned to the Action.
            </summary>
            <param name="actionId">Id of the Action</param>
            <returns>The negative button just pressed state</returns>
        </member>
        <member name="M:Rewired.Player.GetAnyNegativeButton">
            <summary>
            Gets the negative button held state of all Actions. This will return TRUE as long as any negative button is held.
            This also applies to axes being used as buttons.
            </summary>
            <returns>The negative button held state</returns>
        </member>
        <member name="M:Rewired.Player.GetAnyNegativeButtonDown">
            <summary>
            Gets the negative button just pressed state of all Actions. This will only return TRUE only on the first frame any negative button is pressed or for the duration of the Button Down Buffer time limit if set in the Input Behavior assigned to the Action.
            This will return TRUE each time any negative button is pressed even if others are being held down.
            This also applies to axes being used as buttons.
            </summary>
            <returns>The negative button just pressed state</returns>
        </member>
        <member name="M:Rewired.Player.GetAnyNegativeButtonUp">
            <summary>
            Get the negative button just released state for all Actions. This will only return TRUE for the first frame the negative button is released.
            This will return TRUE each time any negative button is released even if others are being held down.
            This also applies to axes being used as buttons.
            </summary>
            <returns>The negative button just released state</returns>
        </member>
        <member name="M:Rewired.Player.GetAnyNegativeButtonPrev">
            <summary>
            Gets the negative button held state of an any Action during the previous frame.
            This also applies to axes being used as buttons.
            </summary>
            <returns>The previous negative button held state</returns>
        </member>
        <member name="M:Rewired.Player.GetNegativeButtonTimePressed(System.String)">
            <summary>
            Gets the length of time in seconds that a negative button has been continuously held down. Returns 0 if the negative button is not currently pressed.
            </summary>
            <param name="actionName">Name of the Action</param>
            <returns>The duration of the negative button hold.</returns>
        </member>
        <member name="M:Rewired.Player.GetNegativeButtonTimePressed(System.Int32)">
            <summary>
            Gets the length of time in seconds that a negative button has been continuously held down. Returns 0 if the negative button is not currently pressed.
            </summary>
            <param name="actionId">Id of the Action</param>
            <returns>The duration of the negative button hold.</returns>
        </member>
        <member name="M:Rewired.Player.GetNegativeButtonTimeUnpressed(System.String)">
            <summary>
            Gets the length of time in seconds that a negative button has not been pressed. Returns 0 if the negative button is currently pressed.
            </summary>
            <param name="actionName">Name of the Action</param>
            <returns>The duration of the negative button inactivity.</returns>
        </member>
        <member name="M:Rewired.Player.GetNegativeButtonTimeUnpressed(System.Int32)">
            <summary>
            Gets the length of time in seconds that a negative button has not been pressed. Returns 0 if the negative button is currently pressed.
            </summary>
            <param name="actionId">Id of the Action</param>
            <returns>The duration of the negative button inactivity.</returns>
        </member>
        <member name="M:Rewired.Player.GetAxis(System.String)">
            <summary>
            Gets the axis value of an Action.
            </summary>
            <param name="actionName">Name of the Action</param>
            <returns>The axis value.</returns>
        </member>
        <member name="M:Rewired.Player.GetAxis(System.Int32)">
            <summary>
            Gets the axis value of an Action.
            </summary>
            <param name="actionId">Id of the Action</param>
            <returns>The axis value.</returns>
        </member>
        <member name="M:Rewired.Player.GetAxisRaw(System.String)">
            <summary>
            Gets the raw axis value of an Action. The raw value excludes any digital axis simulation modification by the Input Behavior assigned to this Action.
            This raw value is modified by deadzone and axis calibration settings in the controller. To get truly raw values, you must get the raw value directly from the Controller element.
            </summary>
            <param name="actionName">Name of the Action</param>
            <returns>The raw axis value.</returns>
        </member>
        <member name="M:Rewired.Player.GetAxisRaw(System.Int32)">
            <summary>
            Gets the raw axis value of an Action. The raw value excludes any digital axis simulation modification by the Input Behavior assigned to this Action.
            This raw value is modified by deadzone and axis calibration settings in the controller. To get truly raw values, you must get the raw value directly from the Controller element.
            </summary>
            <param name="actionId">Id of the Action</param>
            <returns>The raw axis value.</returns>
        </member>
        <member name="M:Rewired.Player.GetAxisPrev(System.String)">
            <summary>
            Gets the axis value of an Action during the previous frame..
            </summary>
            <param name="actionName">Name of the Action</param>
            <returns>The previous axis value.</returns>
        </member>
        <member name="M:Rewired.Player.GetAxisPrev(System.Int32)">
            <summary>
            Gets the axis value of an Action during the previous frame..
            </summary>
            <param name="actionId">Id of the Action</param>
            <returns>The previous axis value.</returns>
        </member>
        <member name="M:Rewired.Player.GetAxisRawPrev(System.String)">
            <summary>
            Gets the raw axis value of an Action during the previous frame. The raw value excludes any digital axis simulation modification by the Input Behavior assigned to this Action.
            This raw value is modified by deadzone and axis calibration settings in the controller. To get truly raw values, you must get the raw value directly from the Controller element.
            </summary>
            <param name="actionName">Name of the Action</param>
            <returns>The previous raw axis value.</returns>
        </member>
        <member name="M:Rewired.Player.GetAxisRawPrev(System.Int32)">
            <summary>
            Gets the raw axis value of an Action during the previous frame. The raw value excludes any digital axis simulation modification by the Input Behavior assigned to this Action.
            This raw value is modified by deadzone and axis calibration settings in the controller. To get truly raw values, you must get the raw value directly from the Controller element.
            </summary>
            <param name="actionId">Id of the Action</param>
            <returns>The previous raw axis value.</returns>
        </member>
        <member name="M:Rewired.Player.GetAxis2D(System.String,System.String)">
            <summary>
            Gets the axis value of two Actions.
            </summary>
            <param name="xAxisActionName">Name of the X axis Action</param>
            <param name="yAxisActionName">Name of the Y axis Action</param>
            <returns>The 2D axis value.</returns>
        </member>
        <member name="M:Rewired.Player.GetAxis2D(System.Int32,System.Int32)">
            <summary>
            Gets the axis value of two Actions.
            </summary>
            <param name="xAxisActionId">Id of the X axis Action</param>
            <param name="yAxisActionId">Id of the Y axis Action</param>
            <returns>The 2D axis value.</returns>
        </member>
        <member name="M:Rewired.Player.GetAxis2DPrev(System.String,System.String)">
            <summary>
            Gets the axis value of two Actions during the previous frame.
            </summary>
            <param name="xAxisActionName">Name of the X axis Action</param>
            <param name="yAxisActionName">Name of the Y axis Action</param>
            <returns>The 2D axis value.</returns>
        </member>
        <member name="M:Rewired.Player.GetAxis2DPrev(System.Int32,System.Int32)">
            <summary>
            Gets the axis value of two Actions during the previous frame.
            </summary>
            <param name="xAxisActionId">Id of the X axis Action</param>
            <param name="yAxisActionId">Id of the Y axis Action</param>
            <returns>The 2D axis value.</returns>
        </member>
        <member name="M:Rewired.Player.GetAxis2DRaw(System.String,System.String)">
            <summary>
            Gets the raw axis value of two Actions.
            The raw value excludes any digital axis simulation modification by the Input Behavior assigned to this Action.
            This raw value is modified by deadzone and axis calibration settings in the controller. To get truly raw values, you must get the raw value directly from the Controller element.
            </summary>
            <param name="xAxisActionName">Name of the X axis Action</param>
            <param name="yAxisActionName">Name of the Y axis Action</param>
            <returns>The raw 2D axis value.</returns>
        </member>
        <member name="M:Rewired.Player.GetAxis2DRaw(System.Int32,System.Int32)">
            <summary>
            Gets the raw axis value of two Actions.
            The raw value excludes any digital axis simulation modification by the Input Behavior assigned to this Action.
            This raw value is modified by deadzone and axis calibration settings in the controller. To get truly raw values, you must get the raw value directly from the Controller element.
            </summary>
            <param name="xAxisActionId">Id of the X axis Action</param>
            <param name="yAxisActionId">Id of the Y axis Action</param>
            <returns>The raw 2D axis value.</returns>
        </member>
        <member name="M:Rewired.Player.GetAxis2DRawPrev(System.String,System.String)">
            <summary>
            Gets the raw axis value of two Actions during the previous frame.
            The raw value excludes any digital axis simulation modification by the Input Behavior assigned to this Action.
            This raw value is modified by deadzone and axis calibration settings in the controller. To get truly raw values, you must get the raw value directly from the Controller element.
            </summary>
            <param name="xAxisActionName">Name of the X axis Action</param>
            <param name="yAxisActionName">Name of the Y axis Action</param>
            <returns>The raw 2D axis value.</returns>
        </member>
        <member name="M:Rewired.Player.GetAxis2DRawPrev(System.Int32,System.Int32)">
            <summary>
            Gets the raw axis value of two Actions during the previous frame.
            The raw value excludes any digital axis simulation modification by the Input Behavior assigned to this Action.
            This raw value is modified by deadzone and axis calibration settings in the controller. To get truly raw values, you must get the raw value directly from the Controller element.
            </summary>
            <param name="xAxisActionId">Id of the X axis Action</param>
            <param name="yAxisActionId">Id of the Y axis Action</param>
            <returns>The raw 2D axis value.</returns>
        </member>
        <member name="M:Rewired.Player.GetAxisTimeActive(System.String)">
            <summary>
            Gets the length of time in seconds that an axis has been continuously active. Returns 0 if the axis is not currently active.
            </summary>
            <param name="actionName">Name of the Action</param>
            <returns>The duration the axis has been continuously active.</returns>
        </member>
        <member name="M:Rewired.Player.GetAxisTimeActive(System.Int32)">
            <summary>
            Gets the length of time in seconds that an axis has been continuously active. Returns 0 if the axis is not currently active.
            </summary>
            <param name="actionId">Id of the Action</param>
            <returns>The duration the axis has been continuously active.</returns>
        </member>
        <member name="M:Rewired.Player.GetAxisTimeInactive(System.String)">
            <summary>
            Gets the length of time in seconds that an axis has been inactive. Returns 0 if the axis is currently active.
            </summary>
            <param name="actionName">Name of the Action</param>
            <returns>The duration the axis has been continuously inactive.</returns>
        </member>
        <member name="M:Rewired.Player.GetAxisTimeInactive(System.Int32)">
            <summary>
            Gets the length of time in seconds that an axis has been inactive. Returns 0 if the axis is currently active.
            </summary>
            <param name="actionId">Id of the Action</param>
            <returns>The duration the axis has been continuously inactive.</returns>
        </member>
        <member name="M:Rewired.Player.GetAxisRawTimeActive(System.String)">
            <summary>
            Gets the length of time in seconds that an axis has been continuously active as calculated from the raw value. Returns 0 if the axis is not currently active.
            </summary>
            <param name="actionName">Name of the Action</param>
            <returns>The duration the raw axis has been continuously active.</returns>
        </member>
        <member name="M:Rewired.Player.GetAxisRawTimeActive(System.Int32)">
            <summary>
            Gets the length of time in seconds that an axis has been continuously active as calculated from the raw value. Returns 0 if the axis is not currently active.
            </summary>
            <param name="actionId">Id of the Action</param>
            <returns>The duration the raw axis has been continuously active.</returns>
        </member>
        <member name="M:Rewired.Player.GetAxisRawTimeInactive(System.String)">
            <summary>
            Gets the length of time in seconds that an axis has been inactive as calculated from the raw value. Returns 0 if the axis is currently active.
            </summary>
            <param name="actionName">Name of the Action</param>
            <returns>The duration the axis has been continuously inactive.</returns>
        </member>
        <member name="M:Rewired.Player.GetAxisRawTimeInactive(System.Int32)">
            <summary>
            Gets the length of time in seconds that an axis has been inactive as calculated from the raw value. Returns 0 if the axis is currently active.
            </summary>
            <param name="actionId">Id of the Action</param>
            <returns>The duration the axis has been continuously inactive.</returns>
        </member>
        <member name="M:Rewired.Player.GetCurrentInputSources(System.String)">
            <summary>
            Gets a list of all the input sources that contributed to the value of an Action in the current frame.
            </summary>
            <param name="actionName">Name of the Action</param>
            <returns>Input source data</returns>
        </member>
        <member name="M:Rewired.Player.GetCurrentInputSources(System.Int32)">
            <summary>
            Gets a list of all the input sources that contributed to the value of an Action in the current frame.
            </summary>
            <param name="actionId">Id of the Action</param>
            <returns>Input source data</returns>
        </member>
        <member name="M:Rewired.Player.IsCurrentInputSource(System.String,Rewired.ControllerType)">
            <summary>
            Checks whether any controller of controller type contributed input to this Action in the current frame.
            </summary>
            <param name="actionName">Name of the Action</param>
            <param name="controllerType">Type of the controller</param>
            <returns>Whether any controller type contributed to the Action this frame.</returns>
        </member>
        <member name="M:Rewired.Player.IsCurrentInputSource(System.Int32,Rewired.ControllerType)">
            <summary>
            Checks whether any controller of type contributed input to this Action in the current frame.
            </summary>
            <param name="actionId">Id of the Action</param>
            <param name="controllerType">Type of the controller</param>
            <returns>Whether any controller type contributed to the Action this frame.</returns>
        </member>
        <member name="M:Rewired.Player.IsCurrentInputSource(System.String,Rewired.ControllerType,System.Int32)">
            <summary>
            Checks whether a particular controller contributed input to this Action in the current frame.
            </summary>
            <param name="actionName">Name of the Action</param>
            <param name="controllerType">Type of the controller</param>
            <param name="controllerId">Id the controller</param>
            <returns>Whether a controller contributed to the Action this frame.</returns>
        </member>
        <member name="M:Rewired.Player.IsCurrentInputSource(System.Int32,Rewired.ControllerType,System.Int32)">
            <summary>
            Checks whether a particular controller contributed input to this Action in the current frame.
            </summary>
            <param name="actionId">Id of the Action</param>
            <param name="controllerType">Type of the controller</param>
            <param name="controllerId">Id the controller</param>
            <returns>Whether a controller contributed to the Action this frame.</returns>
        </member>
        <member name="M:Rewired.Player.IsCurrentInputSource(System.String,Rewired.Controller)">
            <summary>
            Checks whether a particular controller contributed input to this Action in the current frame.
            </summary>
            <param name="actionName">Name of the Action</param>
            <param name="controller">The controller</param>
            <returns>Whether a controller contributed to the Action this frame.</returns>
        </member>
        <member name="M:Rewired.Player.IsCurrentInputSource(System.Int32,Rewired.Controller)">
            <summary>
            Checks whether a particular controller contributed input to this Action in the current frame.
            </summary>
            <param name="actionId">Id of the Action</param>
            <param name="controller">The controller</param>
            <returns>Whether a controller contributed to the Action this frame.</returns>
        </member>
        <member name="M:Rewired.Player.AddInputEventDelegate(System.Action{Rewired.InputActionEventData},Rewired.UpdateLoopType)">
            <summary>
            Add a delegate to receive input action events every time any input action value is updated.
            </summary>
            <param name="callback">The delegate that will be called.</param>
            <param name="updateLoop">The update loop in which to monitor changes.</param>
        </member>
        <member name="M:Rewired.Player.AddInputEventDelegate(System.Action{Rewired.InputActionEventData},Rewired.UpdateLoopType,System.Int32)">
            <summary>
            Add a delegate to receive input action events every time a specific input action value is updated.
            </summary>
            <param name="callback">The delegate that will be called.</param>
            <param name="updateLoop">The update loop in which to monitor changes.</param>
            <param name="actionId">The id of the action for which to receive change events.</param>
        </member>
        <member name="M:Rewired.Player.AddInputEventDelegate(System.Action{Rewired.InputActionEventData},Rewired.UpdateLoopType,System.String)">
            <summary>
            Add a delegate to receive input action events every time a specific input action value is updated.
            </summary>
            <param name="callback">The delegate that will be called.</param>
            <param name="updateLoop">The update loop in which to monitor changes.</param>
            <param name="actionName">The name of the action for which to receive change events.</param>
        </member>
        <member name="M:Rewired.Player.AddInputEventDelegate(System.Action{Rewired.InputActionEventData},Rewired.UpdateLoopType,Rewired.InputActionEventType)">
            <summary>
            Add a delegate to receive input action events every time a specific event occurs in any action.
            </summary>
            <param name="callback">The delegate that will be called.</param>
            <param name="updateLoop">The update loop in which to monitor changes.</param>
            <param name="eventType">The event type for which to send an event.</param>
        </member>
        <member name="M:Rewired.Player.AddInputEventDelegate(System.Action{Rewired.InputActionEventData},Rewired.UpdateLoopType,Rewired.InputActionEventType,System.Int32)">
            <summary>
            Add a delegate to receive input action events every time a specific event occurs in a specific action.
            </summary>
            <param name="callback">The delegate that will be called.</param>
            <param name="updateLoop">The update loop in which to monitor changes.</param>
            <param name="eventType">The event type for which to send an event.</param>
            <param name="actionId">The id of the action for which to receive change events.</param>
        </member>
        <member name="M:Rewired.Player.AddInputEventDelegate(System.Action{Rewired.InputActionEventData},Rewired.UpdateLoopType,Rewired.InputActionEventType,System.String)">
            <summary>
            Add a delegate to receive input action events every time a specific event occurs in a specific action.
            </summary>
            <param name="callback">The delegate that will be called.</param>
            <param name="updateLoop">The update loop in which to monitor changes.</param>
            <param name="eventType">The event type for which to send an event.</param>
            <param name="actionName">The name of the action for which to receive change events.</param>
        </member>
        <member name="M:Rewired.Player.RemoveInputEventDelegate(System.Action{Rewired.InputActionEventData})">
            <summary>
            Remove a delegate to no longer receive input action events from any update loop for all actions.
            </summary>
            <param name="callback">The delegate to be removed.</param>
        </member>
        <member name="M:Rewired.Player.RemoveInputEventDelegate(System.Action{Rewired.InputActionEventData},System.Int32)">
            <summary>
            Remove a delegate to no longer receive input action events from any update loop for the specified action.
            </summary>
            <param name="callback">The delegate to be removed.</param>
            <param name="actionId">The id of the action.</param>
        </member>
        <member name="M:Rewired.Player.RemoveInputEventDelegate(System.Action{Rewired.InputActionEventData},System.String)">
            <summary>
            Remove a delegate to no longer receive input action events from any update loop for the specified action.
            </summary>
            <param name="callback">The delegate to be removed.</param>
            <param name="actionName">The name of the action.</param>
        </member>
        <member name="M:Rewired.Player.RemoveInputEventDelegate(System.Action{Rewired.InputActionEventData},Rewired.UpdateLoopType)">
            <summary>
            Remove a delegate to no longer receive input action events from the specified update loop for all actions.
            </summary>
            <param name="callback">The delegate to be removed.</param>
            <param name="updateLoop">The update loop.</param>
        </member>
        <member name="M:Rewired.Player.RemoveInputEventDelegate(System.Action{Rewired.InputActionEventData},Rewired.InputActionEventType)">
            <summary>
            Remove a delegate to no longer receive input action events from the specified update loop for all actions.
            </summary>
            <param name="callback">The delegate to be removed.</param>
            <param name="eventType">The event type for which to send an event.</param>
        </member>
        <member name="M:Rewired.Player.RemoveInputEventDelegate(System.Action{Rewired.InputActionEventData},Rewired.UpdateLoopType,System.Int32)">
            <summary>
            Remove a delegate to no longer receive input action events from the specified update loop for the specified action.
            </summary>
            <param name="callback">The delegate to be removed.</param>
            <param name="updateLoop">The update loop.</param>
            <param name="actionId">The id of the action.</param>
        </member>
        <member name="M:Rewired.Player.RemoveInputEventDelegate(System.Action{Rewired.InputActionEventData},Rewired.UpdateLoopType,System.String)">
            <summary>
            Remove a delegate to no longer receive input action events from the specified update loop for the specified action.
            </summary>
            <param name="callback">The delegate to be removed.</param>
            <param name="updateLoop">The update loop.</param>
            <param name="actionName">The name of the action.</param>
        </member>
        <member name="M:Rewired.Player.RemoveInputEventDelegate(System.Action{Rewired.InputActionEventData},Rewired.InputActionEventType,System.Int32)">
            <summary>
            Remove a delegate to no longer receive input action events from any update loop for the specified action.
            </summary>
            <param name="callback">The delegate to be removed.</param>
            <param name="eventType">The event type for which to send an event.</param>
            <param name="actionId">The id of the action.</param>
        </member>
        <member name="M:Rewired.Player.RemoveInputEventDelegate(System.Action{Rewired.InputActionEventData},Rewired.InputActionEventType,System.String)">
            <summary>
            Remove a delegate to no longer receive input action events from any update loop for the specified action.
            </summary>
            <param name="callback">The delegate to be removed.</param>
            <param name="eventType">The event type for which to send an event.</param>
            <param name="actionName">The name of the action.</param>
        </member>
        <member name="M:Rewired.Player.RemoveInputEventDelegate(System.Action{Rewired.InputActionEventData},Rewired.UpdateLoopType,Rewired.InputActionEventType)">
            <summary>
            Remove a delegate to no longer receive input action events from the specified update loop for all actions.
            </summary>
            <param name="callback">The delegate to be removed.</param>
            <param name="updateLoop">The update loop.</param>
            <param name="eventType">The event type for which to send an event.</param>
        </member>
        <member name="M:Rewired.Player.RemoveInputEventDelegate(System.Action{Rewired.InputActionEventData},Rewired.UpdateLoopType,Rewired.InputActionEventType,System.Int32)">
            <summary>
            Remove a delegate to no longer receive input action events from the specified update loop for the specified action.
            </summary>
            <param name="callback">The delegate to be removed.</param>
            <param name="updateLoop">The update loop.</param>
            <param name="eventType">The event type for which to send an event.</param>
            <param name="actionId">The id of the action.</param>
        </member>
        <member name="M:Rewired.Player.RemoveInputEventDelegate(System.Action{Rewired.InputActionEventData},Rewired.UpdateLoopType,Rewired.InputActionEventType,System.String)">
            <summary>
            Remove a delegate to no longer receive input action events from the specified update loop for the specified action.
            </summary>
            <param name="callback">The delegate to be removed.</param>
            <param name="updateLoop">The update loop.</param>
            <param name="eventType">The event type for which to send an event.</param>
            <param name="actionName">The name of the action.</param>
        </member>
        <member name="M:Rewired.Player.ClearInputEventDelegates">
            <summary>
            Clears all input action event delegates. You will no longer receive any input action update events.
            </summary>
        </member>
        <member name="P:Rewired.Player.id">
            <summary>
            The id of the Player.
            </summary>
        </member>
        <member name="P:Rewired.Player.name">
            <summary>
            The scripting name of the Player.
            </summary>
        </member>
        <member name="P:Rewired.Player.descriptiveName">
            <summary>
            The descriptive name of the Player.
            </summary>
        </member>
        <member name="P:Rewired.Player.isPlaying">
            <summary>
            Is this Player currently playing?
            </summary>
        </member>
        <member name="T:Rewired.Player.ControllerHelper">
            <summary>
            Provides access to all controller-related members in Player.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.GetController``1(System.Int32)">
            <summary>
            Gets a controller of the specified type assigned to this Player.
            </summary>
            <typeparam name="T">Controller type</typeparam>
            <param name="controllerId">Controller id</param>
            <returns></returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.GetControllerWithTag``1(System.String)">
            <summary>
            Gets a controller of the specificed type with the specified tag assigned to this Player.
            </summary>
            <typeparam name="T">Controller type</typeparam>
            <param name="tag">The tag</param>
            <returns>Controller</returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.AddController``1(System.Int32,System.Boolean)">
            <summary>
            Assigns a controller to this Player.
            </summary>
            <typeparam name="T">Controller type</typeparam>
            <param name="controllerId">Controller id</param>
            <param name="removeFromOtherPlayers">Unassign this controller from all other players.</param>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.RemoveController``1(System.Int32)">
            <summary>
            Unassigns a controller from this Player.
            </summary>
            <typeparam name="T">Controller type</typeparam>
            <param name="controllerId">Controller id</param>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.ContainsController``1(System.Int32)">
            <summary>
            Checks if a controller is assigned to this Player.
            </summary>
            <typeparam name="T">Controller type</typeparam>
            <param name="controllerId">Controller id</param>
            <returns></returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.ClearControllersOfType``1">
            <summary>
            Unassign all controllers of a specific type from this Player.
            </summary>
            <typeparam name="T">Controller type</typeparam>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.ClearAllControllers">
            <summary>
            Unassign all controllers from this Player.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.GetLastActiveController">
            <summary>
            Get the last controller that contributed input through the Player.
            </summary>
            <returns>Controller</returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.GetLastActiveController(Rewired.ControllerType)">
            <summary>
            Get the last controller that contributed input through the Player.
            </summary>
            <param name="controllerType">The controller type.</param>
            <returns></returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.GetLastActiveController``1">
            <summary>
            Get the last controller that contributed input through the Player.
            </summary>
            <typeparam name="T">Controller type</typeparam>
            <returns>Controller</returns>
        </member>
        <member name="P:Rewired.Player.ControllerHelper.hasMouse">
            <summary>
            Is the mouse assigned to this Player?
            </summary>
        </member>
        <member name="P:Rewired.Player.ControllerHelper.excludeFromControllerAutoAssignment">
            <summary>
            Determines whether controllers can be auto-assigned to this Player.
            </summary>
        </member>
        <member name="P:Rewired.Player.ControllerHelper.Keyboard">
            <summary>
            Gets the Keyboard.
            </summary>
        </member>
        <member name="P:Rewired.Player.ControllerHelper.Mouse">
            <summary>
            Gets the Mouse.
            </summary>
        </member>
        <member name="P:Rewired.Player.ControllerHelper.joystickCount">
            <summary>
            The number of joysticks assigned to this Player.
            </summary>
        </member>
        <member name="P:Rewired.Player.ControllerHelper.Joysticks">
            <summary>
            A list of joysticks assigned to this Player.
            </summary>
        </member>
        <member name="P:Rewired.Player.ControllerHelper.customControllerCount">
            <summary>
            The number of Custom Controllers assigned to this Player.
            </summary>
        </member>
        <member name="P:Rewired.Player.ControllerHelper.CustomControllers">
            <summary>
            Gets a list of Custom Controllers assigned to this Player.
            </summary>
        </member>
        <member name="P:Rewired.Player.ControllerHelper.Controllers">
            <summary>
            Enumerates all controllers of all types assigned to this Player.
            </summary>
        </member>
        <member name="T:Rewired.Player.ControllerHelper.MapHelper">
            <summary>
            Provides access to all mapping related members.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.LoadMap``1(System.Int32,System.Int32,System.Int32)">
            <summary>
            Loads a controller map from the maps defined in the Rewired Editor. Replaces if a map already exists with the same category and layout.
            When replaced, map enabled state is copied from the existing map into the replacement. Otherwise, map starts disabled and must be enabled before it can contribute to input.
            </summary>
            <typeparam name="T">Controller map type</typeparam>
            <param name="controllerId">Controller id</param>
            <param name="categoryId">Category id</param>
            <param name="layoutId">Layout id</param>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.LoadMap``1(System.Int32,System.String,System.String)">
            <summary>
            Loads a controller map from the maps defined in the Rewired Editor. Replaces if a map already exists with the same category and layout.
            When replaced, map enabled state is copied from the existing map into the replacement. Otherwise, map starts disabled and must be enabled before it can contribute to input.
            </summary>
            <typeparam name="T">Controller map type</typeparam>
            <param name="controllerId">Controller id</param>
            <param name="categoryName">Category name</param>
            <param name="layoutName">Layout name</param>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.LoadMap(Rewired.ControllerType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Loads a controller map from the maps defined in the Rewired Editor. Replaces if a map already exists with the same category and layout.
            When replaced, map enabled state is copied from the existing map into the replacement. Otherwise, map starts disabled and must be enabled before it can contribute to input.
            </summary>
            <param name="controllerType">Controller type</param>
            <param name="controllerId">Controller id</param>
            <param name="categoryId">Category id</param>
            <param name="layoutId">Layout id</param>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.LoadMap(Rewired.ControllerType,System.Int32,System.String,System.String)">
            <summary>
            Loads a controller map from the maps defined in the Rewired Editor. Replaces if a map already exists with the same category and layout.
            When replaced, map enabled state is copied from the existing map into the replacement. Otherwise, map starts disabled and must be enabled before it can contribute to input.
            </summary>
            <param name="controllerType">Controller type</param>
            <param name="controllerId">Controller id</param>
            <param name="categoryName">Category name</param>
            <param name="layoutName">Layout name</param>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.LoadMap``1(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Loads a controller map from the maps defined in the Rewired Editor. Replaces if a map already exists with the same category and layout.
            </summary>
            <typeparam name="T">Controller map type</typeparam>
            <param name="controllerId">Controller id</param>
            <param name="categoryId">Category id</param>
            <param name="layoutId">Layout id</param>
            <param name="startEnabled">Start this map enabled?</param>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.LoadMap``1(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Loads a controller map from the maps defined in the Rewired Editor. Replaces if a map already exists with the same category and layout.
            </summary>
            <typeparam name="T">Controller map type</typeparam>
            <param name="controllerId">Controller id</param>
            <param name="categoryName">Category name</param>
            <param name="layoutName">Layout name</param>
            <param name="startEnabled">Start this map enabled?</param>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.LoadMap(Rewired.ControllerType,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Loads a controller map from the maps defined in the Rewired Editor. Replaces if a map already exists with the same category and layout.
            </summary>
            <param name="controllerType">Controller type</param>
            <param name="controllerId">Controller id</param>
            <param name="categoryId">Category id</param>
            <param name="layoutId">Layout id</param>
            <param name="startEnabled">Start this map enabled?</param>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.LoadMap(Rewired.ControllerType,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Loads a controller map from the maps defined in the Rewired Editor. Replaces if a map already exists with the same category and layout.
            </summary>
            <param name="controllerType">Controller type</param>
            <param name="controllerId">Controller id</param>
            <param name="categoryName">Category name</param>
            <param name="layoutName">Layout name</param>
            <param name="startEnabled">Start this map enabled?</param>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetAllMaps">
            <summary>
            Enumerates all controller maps assigned to this Player.
            </summary>
            <returns>IEnumerable of controller maps</returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetAllMaps``1">
            <summary>
            Enumerates all controller maps assigned to this Player.
            </summary>
            <typeparam name="T">Controller Map type</typeparam>
            <returns>IEnumerable of controller maps</returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetAllMaps(Rewired.ControllerType)">
            <summary>
            Enumerates all controller maps for a specific controller type assigned to this Player.
            </summary>
            <param name="controllerType">Controller type</param>
            <returns>IEnumerable of controller maps</returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetAllMapsInCategory(System.String)">
            <summary>
            Enumerates all controller maps assigned to this player in a specific category.
            </summary>
            <param name="categoryName">Category name</param>
            <returns>IEnumerable of controller maps</returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetAllMapsInCategory(System.Int32)">
            <summary>
            Enumerates all controller maps assigned to this player in a specific category.
            </summary>
            <param name="categoryId">Category id</param>
            <returns>IEnumerable of controller maps</returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetAllMapsInCategory``1(System.String)">
            <summary>
            Enumerates all controller maps assigned to this player in a specific category.
            </summary>
            <typeparam name="T">Controller Map type</typeparam>
            <param name="categoryName">Category name</param>
            <returns>IEnumerable of controller maps</returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetAllMapsInCategory``1(System.Int32)">
            <summary>
            Enumerates all controller maps assigned to this player in a specific category.
            </summary>
            <typeparam name="T">Controller Map type</typeparam>
            <param name="categoryId">Category id</param>
            <returns>IEnumerable of controller maps</returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetAllMapsInCategory(System.String,Rewired.ControllerType)">
            <summary>
            Enumerates all controller maps assigned to this player in a specific category.
            </summary>
            <param name="categoryName">Category name</param>
            <param name="controllerType">Controller type</param>
            <returns>IEnumerable of controller maps</returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetAllMapsInCategory(System.Int32,Rewired.ControllerType)">
            <summary>
            Enumerates all controller maps assigned to this player in a specific category.
            </summary>
            <param name="categoryId">Category id</param>
            <param name="controllerType">Controller type</param>
            <returns>IEnumerable of controller maps</returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetMaps``1(System.Int32)">
            <summary>
            Gets a list of controller maps for a specific controller assigned to this Player.
            </summary>
            <typeparam name="T">Controller map type</typeparam>
            <param name="controllerId">Controller id</param>
            <returns>IList of controller maps</returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetMaps(Rewired.ControllerType,System.Int32)">
            <summary>
            Gets a list of controller maps for a specific controller assigned to this Player.
            </summary>
            <typeparam name="T">Controller map type</typeparam>
            <param name="controllerType">Controller type</param>
            <param name="controllerId">Controller id</param>
            <returns>IList of controller maps</returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetMap``1(System.Int32,System.Int32)">
            <summary>
            Gets a controller map for a specific controller by id assigned to this Player.
            </summary>
            <typeparam name="T">Controller map type</typeparam>
            <param name="controllerId">Controller id</param>
            <param name="mapId">Controller map id</param>
            <returns>Controller Map</returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetMap``1(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a controller map for a specific controller by id assigned to this Player.
            </summary>
            <typeparam name="T">Controller map type</typeparam>
            <param name="controllerId">Controller id</param>
            <param name="categoryId">Category id</param>
            <param name="layoutId">Layout id</param>
            <returns>Controller Map</returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetMap``1(System.Int32,System.String,System.String)">
            <summary>
            Gets a controller map for a specific controller by id assigned to this Player.
            </summary>
            <typeparam name="T">Controller map type</typeparam>
            <param name="controllerId">Controller id</param>
            <param name="categoryName">Category name</param>
            <param name="layoutName">Layout name</param>
            <returns>Controller Map</returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetMap(Rewired.ControllerType,System.Int32,System.Int32)">
            <summary>
            Gets a controller map for a specific controller by id assigned to this Player.
            </summary>
            <typeparam name="T">Controller map type</typeparam>
            <param name="controllerType">Controller type</param>
            <param name="controllerId">Controller id</param>
            <param name="mapId">Controller map id</param>
            <returns>Controller Map</returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetMap(Rewired.ControllerType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a controller map for a specific controller by id assigned to this Player.
            </summary>
            <typeparam name="T">Controller map type</typeparam>
            <param name="controllerType">Controller type</param>
            <param name="controllerId">Controller id</param>
            <param name="categoryId">Category id</param>
            <param name="layoutId">Layout id</param>
            <returns>Controller Map</returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetMap(Rewired.ControllerType,System.Int32,System.String,System.String)">
            <summary>
            Gets a controller map for a specific controller by id assigned to this Player.
            </summary>
            <typeparam name="T">Controller map type</typeparam>
            <param name="controllerType">Controller type</param>
            <param name="controllerId">Controller id</param>
            <param name="categoryName">Category name</param>
            <param name="layoutName">Layout name</param>
            <returns>Controller Map</returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetFirstMapInCategory``1(System.Int32,System.String)">
            <summary>
            Gets the first controller map for the specified controller in the matching category assigned to this Player.
            </summary>
            <typeparam name="T">Controller map type</typeparam>
            <param name="controllerId">Controller id</param>
            <param name="categoryName">Category name</param>
            <returns>Controller Map</returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetFirstMapInCategory``1(System.Int32,System.Int32)">
            <summary>
            Gets the first controller map for the specified controller in the matching category assigned to this Player.
            </summary>
            <typeparam name="T">Controller map type</typeparam>
            <param name="controllerId">Controller id</param>
            <param name="categoryId">Category id</param>
            <returns>Controller Map</returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetFirstMapInCategory(Rewired.ControllerType,System.Int32,System.String)">
            <summary>
            Gets the first controller map for the specified controller in the matching category assigned to this Player.
            </summary>
            <typeparam name="T">Controller map type</typeparam>
            <param name="controllerType">Controller type</param>
            <param name="controllerId">Controller id</param>
            <param name="categoryName">Category name</param>
            <returns>Controller Map</returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetFirstMapInCategory(Rewired.ControllerType,System.Int32,System.Int32)">
            <summary>
            Gets the first controller map for the specified controller in the matching category assigned to this Player.
            </summary>
            <typeparam name="T">Controller map type</typeparam>
            <param name="controllerType">Controller type</param>
            <param name="controllerId">Controller id</param>
            <param name="categoryId">Category id</param>
            <returns>Controller Map</returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.AddMap``1(System.Int32,Rewired.ControllerMap)">
            <summary>
            Adds a controller map to the Player. Replaces if a map already exists with the same category and layout.
            When replaced, map enabled state is copied from the existing map into the replacement.
            </summary>
            <typeparam name="T">Map type</typeparam>
            <param name="controllerId">Controller id</param>
            <param name="map">Controller Map</param>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.AddMap(Rewired.Controller,Rewired.ControllerMap)">
            <summary>
            Adds a controller map to the Player. Replaces if a map already exists with the same category and layout.
            When replaced, map enabled state is copied from the existing map into the replacement.
            </summary>
            <param name="controller">Controller</param>
            <param name="map">Controller Map</param>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.AddMap(Rewired.ControllerType,System.Int32,Rewired.ControllerMap)">
            <summary>
            Adds a controller map to the Player. Replaces if a map already exists with the same category and layout.
            When replaced, map enabled state is copied from the existing map into the replacement.
            </summary>
            <param name="controllerType">Controller type</param>
            <param name="controllerId">Controller id</param>
            <param name="map">Controller Map</param>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.AddMap``1(System.Int32,Rewired.ControllerMap,System.Boolean)">
            <summary>
            Adds a controller map to the Player. Replaces if a map already exists with the same category and layout.
            When replaced, map enabled state is copied from the existing map into the replacement.
            </summary>
            <typeparam name="T">Map type</typeparam>
            <param name="controllerId">Controller id</param>
            <param name="map">Controller Map</param>
            <param name="startEnabled">Start this map enabled?</param>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.AddMap(Rewired.Controller,Rewired.ControllerMap,System.Boolean)">
            <summary>
            Adds a controller map to the Player. Replaces if a map already exists with the same category and layout.
            When replaced, map enabled state is copied from the existing map into the replacement.
            </summary>
            <param name="controller">Controller</param>
            <param name="map">Controller Map</param>
            <param name="startEnabled">Start this map enabled?</param>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.AddMap(Rewired.ControllerType,System.Int32,Rewired.ControllerMap,System.Boolean)">
            <summary>
            Adds a controller map to the Player. Replaces if a map already exists with the same category and layout.
            When replaced, map enabled state is copied from the existing map into the replacement.
            </summary>
            <param name="controllerType">Controller type</param>
            <param name="controllerId">Controller id</param>
            <param name="map">Controller Map</param>
            <param name="startEnabled">Start this map enabled?</param>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.AddMapFromXml``1(System.Int32,System.String)">
            <summary>
            Adds a controller map to the Player from Xml save data.
            </summary>
            <typeparam name="T">Map type</typeparam>
            <param name="controllerId">Controller id</param>
            <param name="xmlString">Xml save data</param>
            <returns>Success/Failure</returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.AddMapFromXml(Rewired.ControllerType,System.Int32,System.String)">
            <summary>
            Adds a controller map to the Player from Xml save data.
            </summary>
            <param name="controllerType">Controller type</param>
            <param name="controllerId">Controller id</param>
            <param name="xmlString">Xml save data</param>
            <returns>Success/Failure</returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.AddMapsFromXml``1(System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            Adds multiple controller maps to the Player from Xml save data.
            </summary>
            <typeparam name="T">Map type</typeparam>
            <param name="controllerId">Controller id</param>
            <param name="xmlStrings">Xml save data</param>
            <returns></returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.AddMapsFromXml(Rewired.ControllerType,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            Adds multiple controller maps to the Player from Xml save data.
            </summary>
            <param name="controllerType">Controller type</param>
            <param name="controllerId">Controller id</param>
            <param name="xmlStrings">Xml save data</param>
            <returns></returns>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.AddEmptyMap``1(System.Int32,System.Int32,System.Int32)">
            <summary>
            Add an empty controller map to the Player with the specified category and layout.
            </summary>
            <typeparam name="T">Map type</typeparam>
            <param name="controllerId">Controller id</param>
            <param name="categoryId">Category id</param>
            <param name="layoutId">Layout id</param>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.AddEmptyMap``1(System.Int32,System.String,System.String)">
            <summary>
            Add an empty controller map to the Player with the specified category and layout.
            </summary>
            <typeparam name="T">Map type</typeparam>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.AddEmptyMap(Rewired.ControllerType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add an empty controller map to the Player with the specified category and layout.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.AddEmptyMap(Rewired.ControllerType,System.Int32,System.String,System.String)">
            <summary>
            Add an empty controller map to the Player with the specified category and layout.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.RemoveMap``1(System.Int32,System.Int32)">
            <summary>
            Removes a controller map for a specific controller.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.RemoveMap``1(System.Int32,System.Int32,System.Int32)">
            <summary>
            Removes a controller map for a specific controller.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.RemoveMap``1(System.Int32,System.String,System.String)">
            <summary>
            Removes a controller map for a specific controller.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.RemoveMap(Rewired.ControllerType,System.Int32,System.Int32)">
            <summary>
            Removes a controller map for a specific controller.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.RemoveMap(Rewired.ControllerType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Removes a controller map for a specific controller.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.RemoveMap(Rewired.ControllerType,System.Int32,System.String,System.String)">
            <summary>
            Removes a controller map for a specific controller.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.ClearMaps``1(System.Boolean)">
            <summary>
            Removes all controller maps of a specific type.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.ClearMaps(Rewired.ControllerType,System.Boolean)">
            <summary>
            Removes all controller maps of a specific type.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.ClearAllMaps(System.Boolean)">
            <summary>
            Removes all controller maps.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetFirstButtonMapWithAction(Rewired.ControllerType,System.Int32,System.Boolean)">
            <summary>
            Get the first button ActionElementMap for a specific controller type that contains a specific Action.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetFirstButtonMapWithAction(Rewired.ControllerType,System.String,System.Boolean)">
            <summary>
            Get the first button ActionElementMap for a specific controller type that contains a specific Action.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetFirstButtonMapWithAction(System.Int32,System.Boolean)">
            <summary>
            Get the first button ActionElementMap for any controller type that contains a specific Action.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetFirstButtonMapWithAction(System.String,System.Boolean)">
            <summary>
            Get the first button ActionElementMap for any controller type that contains a specific Action.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.ButtonMapsWithAction(Rewired.ControllerType,System.Int32,System.Boolean)">
            <summary>
            Enumerates all button ActionElementMaps for a specific controller type that contains a specific Action.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.ButtonMapsWithAction(Rewired.ControllerType,System.String,System.Boolean)">
            <summary>
            Enumerates all button ActionElementMaps for a specific controller type that contains a specific Action.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.ButtonMapsWithAction(System.Int32,System.Boolean)">
            <summary>
            Enumerates all button ActionElementMaps for any controller type that contains a specific Action.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.ButtonMapsWithAction(System.String,System.Boolean)">
            <summary>
            Enumerates all button ActionElementMaps for any controller type that contains a specific Action.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetFirstAxisMapWithAction(Rewired.ControllerType,System.Int32,System.Boolean)">
            <summary>
            Get the first axis ActionElementMap for a specific controller type that contains a specific Action.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetFirstAxisMapWithAction(Rewired.ControllerType,System.String,System.Boolean)">
            <summary>
            Get the first axis ActionElementMap for a specific controller type that contains a specific Action.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetFirstAxisMapWithAction(System.Int32,System.Boolean)">
            <summary>
            Get the first axis ActionElementMap for any controller type that contains a specific Action.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetFirstAxisMapWithAction(System.String,System.Boolean)">
            <summary>
            Get the first axis ActionElementMap for any controller type that contains a specific Action.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.AxisMapsWithAction(Rewired.ControllerType,System.Int32,System.Boolean)">
            <summary>
            Enumerates all axis ActionElementMaps for a specific controller type that contains a specific Action.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.AxisMapsWithAction(Rewired.ControllerType,System.String,System.Boolean)">
            <summary>
            Enumerates all axis ActionElementMaps for a specific controller type that contains a specific Action.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.AxisMapsWithAction(System.Int32,System.Boolean)">
            <summary>
            Enumerates all axis ActionElementMaps for any controller type that contains a specific Action.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.AxisMapsWithAction(System.String,System.Boolean)">
            <summary>
            Enumerates all axis ActionElementMaps for any controller type that contains a specific Action.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetFirstElementMapWithAction(Rewired.ControllerType,System.Int32,System.Boolean)">
            <summary>
            Get the first ActionElementMap for a specific controller type that contains a specific Action.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetFirstElementMapWithAction(Rewired.ControllerType,System.String,System.Boolean)">
            <summary>
            Get the first ActionElementMap for a specific controller type that contains a specific Action.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetFirstElementMapWithAction(System.Int32,System.Boolean)">
            <summary>
            Get the first ActionElementMap for any controller type that contains a specific Action.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetFirstElementMapWithAction(System.String,System.Boolean)">
            <summary>
            Get the first ActionElementMap for any controller type that contains a specific Action.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.ElementMapsWithAction(Rewired.ControllerType,System.Int32,System.Boolean)">
            <summary>
            Enumerates all ActionElementMaps for a specific controller type that contains a specific Action.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.ElementMapsWithAction(Rewired.ControllerType,System.String,System.Boolean)">
            <summary>
            Enumerates all ActionElementMaps for a specific controller type that contains a specific Action.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.ElementMapsWithAction(System.Int32,System.Boolean)">
            <summary>
            Enumerates all ActionElementMaps for any controller type that contains a specific Action.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.ElementMapsWithAction(System.String,System.Boolean)">
            <summary>
            Enumerates all ActionElementMaps for any controller type that contains a specific Action.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetMapSaveData``1(System.Int32,System.Boolean)">
            <summary>
            Gets controller map save data for a specific controller. Used for saving/loading.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetMapSaveData(Rewired.ControllerType,System.Int32,System.Boolean)">
            <summary>
            Gets controller map save data for a specific controller. Used for saving/loading.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetAllMapSaveData``1(System.Boolean)">
            <summary>
            Gets all controller map save data. Used for saving/loading.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetAllMapSaveData(Rewired.ControllerType,System.Boolean)">
            <summary>
            Gets all controller map save data for a specific controller type. Used for saving/loading.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetAllMapSaveData(System.Boolean)">
            <summary>
            Gets all controller map save data. Used for saving/loading.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.SetAllMapsEnabled(System.Boolean)">
            <summary>
            Set the enabled state in all controller maps.
            </summary>
            <param name="state">The enabled state.</param>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.SetAllMapsEnabled(System.Boolean,Rewired.ControllerType)">
            <summary>
            Set the enabled state in all controller maps for a particular controller type.
            </summary>
            <param name="state">The enabled state.</param>
            <param name="controllerType">The controller type.</param>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.SetMapsEnabled(System.Boolean,System.Int32)">
            <summary>
            Set the enabled state in all maps in a particular category.
            </summary>
            <param name="state">The enabled state.</param>
            <param name="categoryId">The id of the category.</param>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.SetMapsEnabled(System.Boolean,System.String)">
            <summary>
            Set the enabled state in all maps in a particular category.
            </summary>
            <param name="state">The enabled state.</param>
            <param name="categoryName">The name of the category.</param>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.SetMapsEnabled(System.Boolean,System.Int32,System.Int32)">
            <summary>
            DEPRECATED: Use SetMapsEnabled(bool state, string categoryName, string layoutName) instead. Reason: LayoutId is not specific enough because this method applies to all controller map types but each controller type has its own unique layout ids.
            Set the enabled state in all maps in a particular category and layout.
            </summary>
            <param name="state">The enabled state.</param>
            <param name="categoryId">The id of the category.</param>
            <param name="layoutId">The id of the layout.</param>
            <exclude></exclude>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.SetMapsEnabled(System.Boolean,System.String,System.String)">
            <summary>
            Set the enabled state in all maps in a particular category and layout.
            </summary>
            <param name="state">The enabled state.</param>
            <param name="categoryName">The name of the category.</param>
            <param name="layoutName">The name of the layout.</param>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.SetMapsEnabled(System.Boolean,Rewired.ControllerType,System.Int32)">
            <summary>
            Set the enabled state in all maps in a category for a particular controller type.
            </summary>
            <param name="state">The enabled state.</param>
            <param name="controllerType">The controller type.</param>
            <param name="categoryId">The id of the category.</param>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.SetMapsEnabled(System.Boolean,Rewired.ControllerType,System.String)">
            <summary>
            Set the enabled state in all maps in a category for a particular controller type.
            </summary>
            <param name="state">The enabled state.</param>
            <param name="controllerType">The controller type.</param>
            <param name="categoryName">The name of the category.</param>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.SetMapsEnabled(System.Boolean,Rewired.ControllerType,System.Int32,System.Int32)">
            <summary>
            Set the enabled state in all maps in a category and layout for a particular controller type.
            </summary>
            <param name="state">The enabled state.</param>
            <param name="controllerType">The controller type.</param>
            <param name="categoryId">The id of the category.</param>
            <param name="layoutId">The id of the layout.</param>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.SetMapsEnabled(System.Boolean,Rewired.ControllerType,System.String,System.String)">
            <summary>
            Set the enabled state in all maps in a category and layout for a particular controller type.
            </summary>
            <param name="state">The enabled state.</param>
            <param name="controllerType">The controller type.</param>
            <param name="categoryName">The name of the category.</param>
            <param name="layoutName">The name of the layout.</param>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.LoadDefaultMaps(Rewired.ControllerType)">
            <summary>
            Loads the maps defined in the Rewired Editor and assigned to this player for the specified controller type.
            All existing maps will be cleared and replaced with the default maps.
            The Enabled state of each map will attempt to be preserved, but if you have
            added or removed maps through scripting, the result may not be as expected and you should set the Enabled states manually.
            </summary>
            <param name="controllerType">The controller type.</param>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.ContainsMapInCategory(Rewired.InputMapCategory)">
            <summary>
            Determines if any maps exist in a particular Map Category.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.ContainsMapInCategory(System.Int32)">
            <summary>
            Determines if any maps exist in a particular Map Category.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.ContainsMapInCategory(Rewired.ControllerType,System.Int32)">
            <summary>
            Determines if any maps exist in a particular Map Category for a specific controller type.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetInputBehavior(System.Int32)">
            <summary>
            Gets a specific InputBehavior.
            </summary>
        </member>
        <member name="M:Rewired.Player.ControllerHelper.MapHelper.GetInputBehavior(System.String)">
            <summary>
            Gets a specific InputBehavior.
            </summary>
        </member>
        <member name="P:Rewired.Player.ControllerHelper.MapHelper.InputBehaviors">
            <summary>
            Gets a list of all InputBehaviors in this Player.
            </summary>
        </member>
        <member name="T:Rewired.Player.ControllerHelper.PollingHelper">
            <summary>
            Provides access to all controller element polling related members.
            </summary>
        </member>
        <member name="T:Rewired.Player.ControllerHelper.ConflictCheckingHelper">
            <summary>
            Provides access to all controller element assignment conflict checking related members.
            </summary>
        </member>
        <member name="T:Rewired.ReInput">
            <summary>
            The main class for accessing all input-related information.
            </summary>
        </member>
        <member name="M:Rewired.ReInput.Reset">
            <summary>
            Resets Rewired completely and reinitializes input source(s). All stored Rewired objects such as Players, Controllers, Maps, etc. will no longer be valid after reset.
            Joystick assignments will be lost and re-assigned based on joystick auto-assignment settings in the Rewired Input Manager.
            </summary>
        </member>
        <member name="E:Rewired.ReInput.ControllerConnectedEvent">
            <summary>
            Event triggered when a controller is conected.
            </summary>
        </member>
        <member name="E:Rewired.ReInput.ControllerPreDisconnectEvent">
            <summary>
            Event triggered just before a controller is disconnected. You can use this event to save controller maps before the controller is removed.
            </summary>
        </member>
        <member name="E:Rewired.ReInput.ControllerDisconnectedEvent">
            <summary>
            Event triggered after a controller is disconnected.
            </summary>
        </member>
        <member name="E:Rewired.ReInput.InputSourceUpdateEvent">
            <summary>
            Event triggered before all input sources are updated. Use this event to update the element values Custom Controllers.
            </summary>
        </member>
        <member name="E:Rewired.ReInput.EditorRecompileEvent">
            <summary>
            Event triggered when editor begins recompiling scripts.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.players">
            <summary>
            Gets an object that contains all player-related members.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.controllers">
            <summary>
            Gets an object that contains all controller-related members.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.mapping">
            <summary>
            Gets an object that contains all mapping-related members.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.touch">
            <summary>
            Gets an object that contains all touch-related members.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.time">
            <summary>
            Gets an object that provides access to time-related data. This is mostly for time comparisons for button and axis active/inactive time measurement.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.userDataStore">
            <summary>
            Gets the UserDataStore component attached to the Rewired Input Manager if any. Use to access data saving and loading.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.configuration">
            <summary>
            Gets an object that provides access to configuration-related data.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.programVersion">
            <summary>
            Gets the current Rewired version number as a string.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.usingUnityInput">
            <summary>
            Is Unity (fallback) input currently being used to drive input?
            </summary>
        </member>
        <member name="P:Rewired.ReInput.unityJoystickIdentificationRequired">
            <summary>
            Does the current platform require manual joystick identification?
            </summary>
        </member>
        <member name="P:Rewired.ReInput.isReady">
            <summary>
            Is the input system ready?
            </summary>
        </member>
        <member name="T:Rewired.ReInput.PlayerHelper">
            <summary>
            Provides access to all player-related members.
            </summary>
        </member>
        <member name="M:Rewired.ReInput.PlayerHelper.GetPlayers(System.Boolean)">
            <summary>
            Gets a list of Players.
            </summary>
            <param name="includeSystemPlayer">Optionally include the System player</param>
            <returns>Player collection</returns>
        </member>
        <member name="M:Rewired.ReInput.PlayerHelper.GetPlayer(System.Int32)">
            <summary>
            Gets a Player at a specific id
            </summary>
            <param name="playerId">The id of the player</param>
            <returns>Player with id</returns>
        </member>
        <member name="M:Rewired.ReInput.PlayerHelper.GetPlayer(System.String)">
            <summary>
            Gets a Player by name
            </summary>
            <param name="name">The name of the player</param>
            <returns>Player with name</returns>
        </member>
        <member name="M:Rewired.ReInput.PlayerHelper.GetSystemPlayer">
            <summary>
            Gets the System Player
            </summary>
            <returns>The system player</returns>
        </member>
        <member name="M:Rewired.ReInput.PlayerHelper.GetPlayerId(System.String)">
            <summary>
            Gets the id of a Player by name
            </summary>
            <param name="playerName">The name of the player</param>
            <returns>Id of the Player</returns>
        </member>
        <member name="M:Rewired.ReInput.PlayerHelper.GetPlayerNames(System.Boolean)">
            <summary>
            Gets an array of player names. Optionally includes the System player.
            Allocates an array, so use sparingly to reduce garbage collection.
            </summary>
            <param name="includeSystemPlayer"></param>
            <returns>Player names</returns>
        </member>
        <member name="M:Rewired.ReInput.PlayerHelper.GetPlayerDescriptiveNames(System.Boolean)">
            <summary>
            Gets an array of player descriptive names. Optionally includes the System player.
            Allocates an array, so use sparingly to reduce garbage collection.
            </summary>
            <param name="includeSystemPlayer"></param>
            <returns>Player descriptive names</returns>
        </member>
        <member name="M:Rewired.ReInput.PlayerHelper.GetPlayerIds(System.Boolean)">
            <summary>
            Gets an array of player ids. Optionally includes System player.
            Allocates an array, so use sparingly to reduce garbage collection.
            </summary>
            <param name="includeSystemPlayer"></param>
            <returns>Player ids</returns>
        </member>
        <member name="P:Rewired.ReInput.PlayerHelper.playerCount">
            <summary>
            Count of Players excluding system player
            </summary>
            <returns>Count of Players excluding system player</returns>
        </member>
        <member name="P:Rewired.ReInput.PlayerHelper.allPlayerCount">
            <summary>
            Count of all players including system player
            </summary>
            <returns>Count of all players including system player</returns>
        </member>
        <member name="P:Rewired.ReInput.PlayerHelper.Players">
            <summary>
            List of all Players excluding System player
            </summary>
            <returns>Player collection excluding the system player</returns>
        </member>
        <member name="P:Rewired.ReInput.PlayerHelper.AllPlayers">
            <summary>
            List of all Players including System player
            </summary>
            <returns>Player collection including the system player</returns>
        </member>
        <member name="P:Rewired.ReInput.PlayerHelper.SystemPlayer">
            <summary>
            The System player
            </summary>
            <returns>System player</returns>
        </member>
        <member name="T:Rewired.ReInput.ControllerHelper">
            <summary>
            Provides access to all controller-related members.
            </summary>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.GetController``1(System.Int32)">
            <summary>
            Gets a controller of type by id.
            </summary>
            <typeparam name="T">Type of Controller</typeparam>
            <param name="controllerId">The controller id</param>
            <returns>A controller of type T</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.GetControllerCount(Rewired.ControllerType)">
            <summary>
            Gets the number of controllers that exist of a specific type.
            </summary>
            <param name="controllerType">Type of controller</param>
            <returns>Number of controllers of a specific type</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.GetController(Rewired.ControllerType,System.Int32)">
            <summary>
            Gets a controller of a specific type with a specific id.
            </summary>
            <param name="controllerType">Type of controller</param>
            <param name="controllerId">Controller id</param>
            <returns>Controller</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.GetControllers(Rewired.ControllerType)">
            <summary>
            Get a collection of connected controllers.
            Allocates an array, so use sparingly to reduce garbage collection.
            </summary>
            <returns>An array of all Controllers of this type</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.GetControllerNames(Rewired.ControllerType)">
            <summary>
            Get an array of connected controller names.
            Allocates an array, so use sparingly to reduce garbage collection.
            </summary>
            <returns>An array of the names of all controllers of this type</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.IsControllerAssigned(Rewired.ControllerType,Rewired.Controller)">
            <summary>
            Is the specified controller assigned to any players?
            </summary>
            <param name="controllerType">Type of controller</param>
            <param name="controller">The controller</param>
            <returns>Boolean determining whether this controller is assigned to any player</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.IsControllerAssigned(Rewired.ControllerType,System.Int32)">
            <summary>
            Is the specified controller assigned to any players?
            </summary>
            <param name="controllerType">Type of controller</param>
            <param name="controllerId">Id of the controller</param>
            <returns>Boolean determining whether this controller is assigned to any player</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.IsControllerAssignedToPlayer(Rewired.ControllerType,System.Int32,System.Int32)">
            <summary>
            Is the specified controller assigned to the specified player?
            </summary>
            <param name="controllerType">Type of controller</param>
            <param name="controllerId">Id of the controller</param>
            <param name="playerId">Id of the player</param>
            <returns>Boolean determining whether this controller is assigned to the player</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.RemoveControllerFromAllPlayers(Rewired.Controller,System.Boolean)">
            <summary>
            De-assigns the specified controller from all players.
            </summary>
            <param name="controller">The controller</param>
            <param name="includeSystemPlayer">Do we de-assign from the System player also?</param>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.RemoveControllerFromAllPlayers(Rewired.ControllerType,System.Int32,System.Boolean)">
            <summary>
            De-assigns the specified controller from all players.
            </summary>
            <param name="controllerType">Tyoe of the controller</param>
            <param name="controllerId">Id of the controller</param>
            <param name="includeSystemPlayer">Do we de-assign from the System player also?</param>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.GetJoystick(System.Int32)">
            <summary>
            Gets a specific joystick.
            </summary>
            <param name="joystickId">The id of the joystick</param>
            <returns>The Joystick</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.GetJoysticks">
            <summary>
            Gets a collection of connected joysticks.
            Allocates an array, so use sparingly to reduce garbage collection.
            </summary>
            <returns>Array of Joysticks</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.GetJoystickNames">
            <summary>
            Gets an array of connected joystick names.
            Allocates an array, so use sparingly to reduce garbage collection.
            </summary>
            <returns>Array of joystick names</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.IsJoystickAssigned(Rewired.Joystick)">
            <summary>
            Is a specific Joystick assigned to any players?
            </summary>
            <param name="joystick">The Joystick</param>
            <returns>Boolean determining if the specified joystick is assigned to any players</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.IsJoystickAssigned(System.Int32)">
            <summary>
            Is a specific Joystick assigned to any players?
            </summary>
            <param name="joystickId">Id of the Joystick</param>
            <returns>Boolean determining if the specified joystick is assigned to any players</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.IsJoystickAssignedToPlayer(System.Int32,System.Int32)">
            <summary>
            Is a specific Joystick assigned to a specific player?
            </summary>
            <param name="joystickId">Id of the Joystick</param>
            <param name="playerId">Id of the Player</param>
            <returns>Boolean determining if the specified joystick is assigned to the specified player</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.RemoveJoystickFromAllPlayers(Rewired.Joystick,System.Boolean)">
            <summary>
            De-assigns a specific Joystick from all Players
            </summary>
            <param name="joystick">The Joystick</param>
            <param name="includeSystemPlayer">De-assign from System player also?</param>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.RemoveJoystickFromAllPlayers(System.Int32,System.Boolean)">
            <summary>
            De-assigns a specific Joystick from all Players
            </summary>
            <param name="joystickId">Id of the Joystick</param>
            <param name="includeSystemPlayer">De-assign from System player also?</param>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.GetUnityJoystickIdFromAnyButtonPress">
            <summary>
            Returns the 0 based id of the Unity joystick whose button was pressed. -1 if no button was pressed on any joystick.
            Use this to identify joysticks when using Unity's input system.
            This has no effect if Unity Input is not handling input on the current platform.
            </summary>
            <returns>0-based index of the Unity joystick whose button was pressed</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.GetUnityJoystickIdFromAnyButtonOrAxisPress(System.Single,System.Boolean)">
            <summary>
            Returns the 0 based id of the Unity joystick whose button or axis was pressed. -1 if no button or axis was pressed on any joystick.
            Use this to identify joysticks when using Unity's input system.
            This has no effect if Unity Input is not handling input on the current platform.
            </summary>
            <returns>0-based index of the Unity joystick whose button or axis was pressed</returns>
            <param name="axisThreshold">Any axis value below this threshold will be ignored.</param>
            <param name="positiveAxesOnly">Ignore negative axis values.</param>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.SetUnityJoystickId(System.Int32,System.Int32)">
            <summary>
            Sets a Unity joystick as the input source of a Joystick.
            Use this to remap a joystick to its source when reconnected on platforms that use Unity Input.
            This has no effect if Unity Input is not handling input on the current platform.
            </summary>
            <param name="joystickId">The id of the Joystick whose input source you are remapping.</param>
            <param name="unityJoystickId">The 0 based index of the Unity joystick which will become the Joystick's new input source.</param>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.SetUnityJoystickIdFromAnyButtonPress(System.Int32)">
            <summary>
            Sets a Unity joystick as the input source of a Joystick.
            The first Unity joystick that returns a button press will be assigned to the Joystick.
            While no buttons are pressed, this will return False. When a button press is detected, it will return True and assign the joystick id.
            </summary>
            <param name="joystickId">The id of the Joystick</param>
            <returns>True if a joystick button was pressed and a joystick id was assigned.</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.SetUnityJoystickIdFromAnyButtonOrAxisPress(System.Int32,System.Single,System.Boolean)">
            <summary>
            Sets a Unity joystick as the input source of a Joystick.
            The first Unity joystick that returns a button or axis press will be assigned to the Joystick.
            While no buttons or axes are pressed, this will return False. When a press is detected, it will return True and assign the joystick id.
            </summary>
            <param name="joystickId">The id of the Joystick</param>
            <returns>True if a joystick button was pressed and a joystick id was assigned.</returns>
            <param name="axisThreshold">Any axis value below this threshold will be ignored.</param>
            <param name="positiveAxesOnly">Ignore negative axis values.</param>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.GetCustomController(System.Int32)">
            <summary>
            Gets a specific custom controller
            </summary>
            <param name="customControllerId">The id of the custom controller</param>
            <returns>The Custom Controller</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.GetCustomControllers">
            <summary>
            Get a collection of connected custom controllers.
            Allocates an array, so use sparingly to reduce garbage collection.
            </summary>
            <returns>CustomController[]</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.GetCustomControllerNames">
            <summary>
            Get an array of connected custom controller names.
            Allocates an array, so use sparingly to reduce garbage collection.
            </summary>
            <returns>string[]</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.IsCustomControllerAssigned(Rewired.CustomController)">
            <summary>
            Is a specific Custom Controller assigned to any players?
            </summary>
            <param name="customController">The Custom Controller</param>
            <returns>Boolean determining if the specified custom controller is assigned to any players</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.IsCustomControllerAssigned(System.Int32)">
            <summary>
            Is a specific Custom Controller assigned to any players?
            </summary>
            <param name="customControllerId">Id of the Custom Controller</param>
            <returns>Boolean determining if the specified custom controller is assigned to any players</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.IsCustomControllerAssignedToPlayer(System.Int32,System.Int32)">
            <summary>
            Is a specific Custom Controller assigned to a specific player?
            </summary>
            <param name="customControllerId">Id of the Custom Controller</param>
            <param name="playerId">Id of the Player</param>
            <returns>Boolean determining if the specified custom controller is assigned to the specified player</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.RemoveCustomControllerFromAllPlayers(Rewired.CustomController,System.Boolean)">
            <summary>
            De-assigns a specific Custom Controller from all Players
            </summary>
            <param name="customController">The Custom Controller</param>
            <param name="includeSystemPlayer">De-assign from System player also?</param>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.RemoveCustomControllerFromAllPlayers(System.Int32,System.Boolean)">
            <summary>
            De-assigns a specific Custom Controller from all Players
            </summary>
            <param name="customControllerId">Id of the Custom Controller</param>
            <param name="includeSystemPlayer">De-assign from System player also?</param>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.GetLastActiveController">
            <summary>
            Get the last controller that produced input.
            </summary>
            <returns>Controller</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.GetLastActiveController(Rewired.ControllerType)">
            <summary>
            Get the last controller that produced input.
            </summary>
            <param name="controllerType">The controller type.</param>
            <returns>Controller</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.GetLastActiveController``1">
            <summary>
            Get the last controller that produced input.
            </summary>
            <typeparam name="T">Controller type</typeparam>
            <returns>Controller</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.GetAnyButton">
            <summary>
            Get the button held state of all buttons on all controllers. Returns TRUE if any button is held.
            This retrieves the value from the actual hardware buttons, not Actions as mapped by Controller Maps in Player.
            </summary>
            <returns>Button held state</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.GetAnyButton(Rewired.ControllerType)">
            <summary>
            Get the button held state of all buttons on all controllers of a specified type. Returns TRUE if any button is held.
            This retrieves the value from the actual hardware buttons, not Actions as mapped by Controller Maps in Player.
            </summary>
            <param name="controllerType">Controller type</param>
            <returns>Button held state</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.GetAnyButtonDown">
            <summary>
            Get the button just pressed state of all buttons on all controllers. This will only return TRUE only on the first frame a button is pressed.
            This retrieves the value from the actual hardware buttons, not Actions as mapped by Controller Maps in Player.
            </summary>
            <returns>Button just pressed state</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.GetAnyButtonDown(Rewired.ControllerType)">
            <summary>
            Get the button just pressed state of all buttons on all controllers of a specified type. This will only return TRUE only on the first frame a button is pressed.
            This retrieves the value from the actual hardware buttons, not Actions as mapped by Controller Maps in Player.
            </summary>
            <param name="controllerType">Controller type</param>
            <returns>Button just pressed state</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.GetAnyButtonUp">
            <summary>
            Get the button just released state of all buttons on all controllers of a specified type. This will only return TRUE only on the first frame a button is released.
            This retrieves the value from the actual hardware buttons, not Actions as mapped by Controller Maps in Player.
            </summary>
            <returns>Button just released state</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.GetAnyButtonUp(Rewired.ControllerType)">
            <summary>
            Get the button just released state of all buttons on all controllers of a specified type. This will only return TRUE only on the first frame a button is released.
            This retrieves the value from the actual hardware buttons, not Actions as mapped by Controller Maps in Player.
            </summary>
            <param name="controllerType">Controller type</param>
            <returns>Button just released state</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.GetAnyButtonPrev">
            <summary>
            Get the previous button held state of all buttons on all controllers. Returns TRUE if any button was held in the previous frame.
            This retrieves the value from the actual hardware buttons, not Actions as mapped by Controller Maps in Player.
            </summary>
            <returns>Previous button held state</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.GetAnyButtonPrev(Rewired.ControllerType)">
            <summary>
            Get the previous button held state of all buttons on all controllers of a specified type. Returns TRUE if any button was held in the previous frame.
            This retrieves the value from the actual hardware buttons, not Actions as mapped by Controller Maps in Player.
            </summary>
            <param name="controllerType">Controller type</param>
            <returns>Previous button held state</returns>
        </member>
        <member name="P:Rewired.ReInput.ControllerHelper.Controllers">
            <summary>
            Gets an enumeration of connected controllers.
            </summary>
            <returns>IEnumerable of Controller</returns>
        </member>
        <member name="P:Rewired.ReInput.ControllerHelper.Mouse">
            <summary>
            Gets the primary Mouse controller.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.ControllerHelper.Keyboard">
            <summary>
            Gets the primary Keyboard controller.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.ControllerHelper.keyboardEnabled">
            <summary>
            Enabled or disables keyboard input processing. Disabling keyboard input can improve performance on mobile devices.
            Also useful for joystick games on Android where certain joystick buttons return keyboard keycodes. Disabling keyboard input on Android will
            still allow certain keyboard keys to return values if triggered by a button press on a joystick, but no keyboard maps will ever be processed.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.ControllerHelper.joystickCount">
            <summary>
            The number of joysticks currently connected.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.ControllerHelper.Joysticks">
            <summary>
            Get a collection of connected joysticks.
            </summary>
            <returns>List of Joysticks</returns>
        </member>
        <member name="P:Rewired.ReInput.ControllerHelper.customControllerCount">
            <summary>
            The number of custom controllers
            </summary>
        </member>
        <member name="P:Rewired.ReInput.ControllerHelper.CustomControllers">
            <summary>
            Get a collection of connected custom controllers.
            </summary>
            <returns>List of Custom Controllers</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.PollingHelper.PollAllControllersForFirstElement">
            <summary>
            Poll every connected controller and gets information about the first element that is activated.
            Does not return Player information. If you need information about the Player, poll through Player instead.
            </summary>
            <returns>ControllerPollingInfo</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.PollingHelper.PollAllControllersForAllElements">
            <summary>
            Poll every connected controller and gets information about all elements that are activated.
            Does not return Player information. If you need information about the Player, poll through Player instead.
            </summary>
            <returns>IEnumerable of ControllerPollingInfo</returns>
        </member>
        <member name="M:Rewired.ReInput.ControllerHelper.PollingHelper.PollAllCustomControllersForFirstElement">
            <summary>
            Poll every connected customController and get information about the first element that is activated.
            Does not return Player information. If you need information about the Player, poll through Player instead.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rewired.ReInput.MappingHelper">
            <summary>
            Provides access to all mapping-related members.
            </summary>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetMapCategory(System.Int32)">
            <summary>
            Gets a specific map category
            </summary>
            <param name="categoryId">Map Category id</param>
            <returns>Map Category</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetMapCategory(System.String)">
            <summary>
            Gets a specific map category
            </summary>
            <param name="name">Map Category name</param>
            <returns>Map Category</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetMapCategoryId(System.String)">
            <summary>
            Gets id of a specific map category
            </summary>
            <param name="name">Map Category name</param>
            <returns>Map Category id</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.MapCategoriesWithTag(System.String)">
            <summary>
            Enumerates all map categories with matching tag
            </summary>
            <param name="tag">Tag</param>
            <returns>IEnumerable of Map Categories with tag</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.UserAssignableMapCategoriesWithTag(System.String)">
            <summary>
            Enumerates all user-assignable map categories with matching tag
            </summary>
            <param name="tag">Tag</param>
            <returns>IEnumerable of user-assignable Map Categories with tag</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.IsMapCategoryUserAssignable(System.Int32)">
            <summary>
            Is the specified map category user assignable?
            </summary>
            <param name="categoryId">Map Category id</param>
            <returns>True = is user assignable</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetActionCategory(System.Int32)">
            <summary>
            Gets a specific action category
            </summary>
            <param name="categoryId">Action Category id</param>
            <returns>Action Category</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetActionCategory(System.String)">
            <summary>
            Gets a specific action category
            </summary>
            <param name="name">Action Category name</param>
            <returns>Action Category</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetActionCategoryId(System.String)">
            <summary>
            Gets the id of a specific action category
            </summary>
            <param name="name">Action Category name</param>
            <returns>Id of the Action Category</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.ActionCategoriesWithTag(System.String)">
            <summary>
            Enumerates all action categories with matching tag
            </summary>
            <param name="tag">Tag</param>
            <returns>IEnumerable of Action Categories with tag</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.UserAssignableActionCategoriesWithTag(System.String)">
            <summary>
            Enumerates all user-assignable action categories with matching tag
            </summary>
            <param name="tag">Tag</param>
            <returns>IEnumerable of user-assignable Action Categories with tag</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.IsActionCategoryUserAssignable(System.Int32)">
            <summary>
            Is the specified action category user-assignable?
            </summary>
            <param name="categoryId">Action Category id</param>
            <returns>True = is user assignable</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetLayout(Rewired.ControllerType,System.Int32)">
            <summary>
            Gets a layout by specifying the controller type and layout id
            </summary>
            <param name="controllerType">Controller type</param>
            <param name="layoutId">Layout id</param>
            <returns>Layout</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetLayout(Rewired.ControllerType,System.String)">
            <summary>
            Gets a layout by specifying the controller type and layout name
            </summary>
            <param name="controllerType">Controller type</param>
            <param name="name">Layout name</param>
            <returns>Layout</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetLayoutId(Rewired.ControllerType,System.String)">
            <summary>
            Gets id of a layout by controller type
            </summary>
            <param name="controllerType">Controller type</param>
            <param name="name">Layout name</param>
            <returns>Layout id</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetJoystickLayout(System.Int32)">
            <summary>
            Gets a joystick layout
            </summary>
            <param name="layoutId">Layout id</param>
            <returns>Joystick Layout</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetJoystickLayout(System.String)">
            <summary>
            Gets a joystick layout
            </summary>
            <param name="name">Layout name</param>
            <returns>Joystick Layout</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetJoystickLayoutId(System.String)">
            <summary>
            Gets the id of a joystick layout
            </summary>
            <param name="name">Layout name</param>
            <returns>Joystick Layout id</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetKeyboardLayout(System.Int32)">
            <summary>
            Gets a keyboard layout
            </summary>
            <param name="layoutId">Layout id</param>
            <returns>Keyboard Layout</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetKeyboardLayout(System.String)">
            <summary>
            Gets a keyboard layout
            </summary>
            <param name="name">Layout name</param>
            <returns>Keyboard layout</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetKeyboardLayoutId(System.String)">
            <summary>
            Gets the id of a keyboard layout
            </summary>
            <param name="name">Layout name</param>
            <returns>Keyboard Layout id</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetMouseLayout(System.Int32)">
            <summary>
            Get a mouse layout
            </summary>
            <param name="layoutId">Layout id</param>
            <returns>Mouse Layout</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetMouseLayout(System.String)">
            <summary>
            Gets a mouse layout
            </summary>
            <param name="name">Layout name</param>
            <returns>Mouse Layout</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetMouseLayoutId(System.String)">
            <summary>
            Gets the id of a mouse layout
            </summary>
            <param name="name">Layout name</param>
            <returns>Mouse Layout id</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetCustomControllerLayout(System.Int32)">
            <summary>
            Gets a custom controller layout
            </summary>
            <param name="layoutId">Layout id</param>
            <returns>Custom Controller Layout</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetCustomControllerLayout(System.String)">
            <summary>
            Gets a custom controller layout
            </summary>
            <param name="name">Layout name</param>
            <returns>Custom Controller Layout</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetCustomControllerLayoutId(System.String)">
            <summary>
            Gets the id of a custom controller layout
            </summary>
            <param name="name">Layout name</param>
            <returns>Custom Controller id</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.MapLayouts(Rewired.ControllerType)">
            <summary>
            Gets a list of all map layouts for the specified controller type
            </summary>
            <param name="controllerType">Type of controller</param>
            <returns>List of map layouts</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetAction(System.Int32)">
            <summary>
            Gets a specific action
            </summary>
            <param name="actionId">Action id</param>
            <returns>Action</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetAction(System.String)">
            <summary>
            Gets a specific action
            </summary>
            <param name="name">Action name</param>
            <returns>Action</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetActionId(System.String)">
            <summary>
            Gets the id of a specific action
            </summary>
            <param name="name">Action name</param>
            <returns>Action id</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.ActionsInCategory(System.String)">
            <summary>
            Enumerates all actions in a specific category
            </summary>
            <param name="categoryName">Category name</param>
            <returns>IEnumerable of actions in category</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.ActionsInCategory(System.String,System.Boolean)">
            <summary>
            Enumerates all actions in a specific category
            </summary>
            <param name="categoryName">Category name</param>
            <param name="sort">Sorts results as shown in Rewired Input Manager</param>
            <returns>IEnumerable of actions in category</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.ActionsInCategory(System.Int32)">
            <summary>
            Enumerates all actions in a specific category
            </summary>
            <param name="categoryId">Caregory id</param>
            <returns>IEnumerable of actions in category</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.ActionsInCategory(System.Int32,System.Boolean)">
            <summary>
            Enumerates all actions in a specific category
            </summary>
            <param name="categoryId">Caregory id</param>
            <param name="sort">Sorts results as shown in Rewired Input Manager</param>
            <returns>IEnumerable of actions in category</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.ActionsInCategoriesWithTag(System.String)">
            <summary>
            Enumerates all actions with a tag
            </summary>
            <param name="tag">Tag</param>
            <returns>IEnumerable of actions with tag</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.UserAssignableActionsInCategory(System.Int32)">
            <summary>
            Enumerates all user-assignable actions in a specific category
            </summary>
            <param name="categoryId">Category id</param>
            Enumerates all user-assignable actions in a specific category
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.UserAssignableActionsInCategory(System.Int32,System.Boolean)">
            <summary>
            Enumerates all user-assignable actions in a specific category
            </summary>
            <param name="categoryId">Category id</param>
            <param name="sort">Sorts results as shown in Rewired Input Manager</param>
            Enumerates all user-assignable actions in a specific category
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.UserAssignableActionsInCategory(System.String)">
            <summary>
            Enumerates all user-assignable actions in a specific category
            </summary>
            <param name="categoryName">Category name</param>
            Enumerates all user-assignable actions in a specific category
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.UserAssignableActionsInCategory(System.String,System.Boolean)">
            <summary>
            Enumerates all user-assignable actions in a specific category
            </summary>
            <param name="categoryName">Category name</param>
            <param name="sort">Sorts results as shown in Rewired Input Manager</param>
            Enumerates all user-assignable actions in a specific category
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetInputBehaviors(System.Int32)">
            <summary>
            Gets a list of input behaviors from a specific player
            </summary>
            <param name="playerId">Player id</param>
            <returns>List of input behaviors from the player</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetSystemPlayerInputBehaviors">
            <summary>
            Gets a list of input behaviors from the system player
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetInputBehavior(System.Int32,System.Int32)">
            <summary>
            Gets a specific input behavior from a specific player
            </summary>
            <param name="playerId">Player id</param>
            <param name="behaviorId">Input Behavior id</param>
            <returns>Input Behavior from the player</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetInputBehavior(System.Int32,System.String)">
            <summary>
            Gets a specific input behavior from a specific player
            </summary>
            <param name="playerId">Player id</param>
            <param name="behaviorName">Input Behavior name</param>
            <returns>Input Behavior from the player</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetSystemPlayerInputBehavior(System.Int32)">
            <summary>
            Gets a specific input behavior from the System player
            </summary>
            <param name="behaviorId">Input Behavior id</param>
            <returns>Input Behavior from the System player</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetSystemPlayerInputBehavior(System.String)">
            <summary>
            Gets a specific input behavior from the System player
            </summary>
            <param name="behaviorName">Input Behavior name</param>
            <returns>Input Behavior from the System player</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetInputBehaviorId(System.String)">
            <summary>
            Gets the id of a specific input behavior
            </summary>
            <param name="behaviorName">Input Behavior name</param>
            <returns></returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetJoystickMapInstance(Rewired.Joystick,System.Int32,System.Int32)">
            <summary>
            Gets an instanced copy of a joystick map
            </summary>
            <param name="joystick">Joystick for which to retrieve the map</param>
            <param name="categoryId">Category Id</param>
            <param name="layoutId">Layout Id</param>
            <returns>Joystick Map</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetJoystickMapInstance(Rewired.Joystick,System.String,System.String)">
            <summary>
            Gets an instanced copy of a joystick map
            </summary>
            <param name="joystick">Joystick for which to retrieve the map</param>
            <param name="categoryName">Category Name</param>
            <param name="layoutName">Layout Name</param>
            <returns>Joystick Map</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetKeyboardMapInstance(System.Int32,System.Int32)">
            <summary>
            Gets an instanced copy of a keyboard map
            </summary>
            <param name="categoryId">Category Id</param>
            <param name="layoutId">Layout Id</param>
            <returns>Keyboard Map</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetKeyboardMapInstance(System.String,System.String)">
            <summary>
            Gets an instanced copy of a keyboard map
            </summary>
            <param name="categoryName">Category Name</param>
            <param name="layoutName">Layout Name</param>
            <returns>Keyboard Map</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetMouseMapInstance(System.Int32,System.Int32)">
            <summary>
            Gets an instanced copy of a mouse map
            </summary>
            <param name="categoryId">Category Id</param>
            <param name="layoutId">Layout Id</param>
            <returns>Mouse Map</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetMouseMapInstance(System.String,System.String)">
            <summary>
            Gets an instanced copy of a mouse map
            </summary>
            <param name="categoryName">Category Name</param>
            <param name="layoutName">Layout Name</param>
            <returns>Mouse Map</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetCustomControllerMapInstance(Rewired.CustomController,System.Int32,System.Int32)">
            <summary>
            Gets an instanced copy of a Custom Controller map
            </summary>
            <param name="customController">Custom Controller for which to retrieve the map</param>
            <param name="categoryId">Category Id</param>
            <param name="layoutId">Layout Id</param>
            <returns>CustomController Map</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetCustomControllerMapInstance(Rewired.CustomController,System.String,System.String)">
            <summary>
            Gets an instanced copy of a Custom Controller map
            </summary>
            <param name="customController">Custom Controller for which to retrieve the map</param>
            <param name="categoryName">Category Name</param>
            <param name="layoutName">Layout Name</param>
            <returns>CustomController Map</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetFirstJoystickTemplateElementIdentifier(Rewired.Joystick,System.Int32)">
            <summary>
            Gets the first template Element Identifier on the first joystick template found that maps to the joystick's Element Identifier.
            NOTE: It is discouraged to use this method as the mapping template system wasn't designed for this use. This method has been added
            as a short-term solution to the problem of trying to identify controller elements as generic Gamepad elements for use in displaying
            visual help to users. A better solution will be available in the future and this method will be deprecated at that time.
            </summary>
            <param name="joystick">The joystick</param>
            <param name="joystickElementIdentifierId">The joystick element identifier id.</param>
            <returns>ControllerElementIdentifier</returns>
        </member>
        <member name="M:Rewired.ReInput.MappingHelper.GetFirstJoystickTemplateElementIdentifier(System.Guid,System.Int32)">
            <summary>
            Gets the first template Element Identifier on the first joystick template found that maps to the joystick's Element Identifier.
            </summary>
            <param name="joystickTypeGuid">The joystick hardware Guid identifier. Get from Joystick.hardwareTypeGuid.</param>
            <param name="joystickElementIdentifierId">The joystick element identifier id.</param>
            <returns>ControllerElementIdentifier</returns>
        </member>
        <member name="P:Rewired.ReInput.MappingHelper.MapCategories">
            <summary>
            Gets list of all map categories
            </summary>
        </member>
        <member name="P:Rewired.ReInput.MappingHelper.UserAssignableMapCategories">
            <summary>
            Enumerates all user-assignable map categories
            </summary>
            <returns>IEnumerable of user-assignable Map Categories</returns>
        </member>
        <member name="P:Rewired.ReInput.MappingHelper.ActionCategories">
            <summary>
            Gets list of all action categories
            </summary>
        </member>
        <member name="P:Rewired.ReInput.MappingHelper.UserAssignableActionCategories">
            <summary>
            Enumerates all user-assignable action categories
            </summary>
        </member>
        <member name="P:Rewired.ReInput.MappingHelper.JoystickLayouts">
            <summary>
            Gets a list of all joystick layouts
            </summary>
        </member>
        <member name="P:Rewired.ReInput.MappingHelper.KeyboardLayouts">
            <summary>
            Gets a list of all keyboard layouts
            </summary>
        </member>
        <member name="P:Rewired.ReInput.MappingHelper.MouseLayouts">
            <summary>
            Gets a list of all mouse layouts
            </summary>
        </member>
        <member name="P:Rewired.ReInput.MappingHelper.CustomControllerLayouts">
            <summary>
            Gets a list of all custom controller layouts
            </summary>
        </member>
        <member name="P:Rewired.ReInput.MappingHelper.Actions">
            <summary>
            Gets a list of all actions
            </summary>
        </member>
        <member name="P:Rewired.ReInput.MappingHelper.UserAssignableActions">
            <summary>
            Enumerates all user-assignable actions
            </summary>
        </member>
        <member name="T:Rewired.ReInput.UnityTouch">
            <summary>
            Provides access to touch-related members.
            </summary>
        </member>
        <member name="T:Rewired.ReInput.TimeHelper">
            <summary>
            Provides access to time-related data. This is mostly for accurate unscaled time comparisons for button and axis times.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.TimeHelper.unscaledDeltaTime">
            <summary>
            Unscaled time since the last update in the current update loop.
            Always use this when doing current time comparisons for button and axis active/inactive times instead of Time.time or Time.unscaledTime.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.TimeHelper.unscaledTime">
            <summary>
            Current unscaled time since start of the game.
            Always use this when doing current time comparisons for button and axis active/inactive times instead of Time.time or Time.unscaledTime.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.TimeHelper.currentFrame">
            <summary>
            The current frame in the current update loop.
            </summary>
        </member>
        <member name="T:Rewired.ReInput.ConfigHelper">
            <summary>
            Provides access to time-related data. This is mostly for accurate unscaled time comparisons for button and axis times.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.ConfigHelper.useXInput">
            <summary>
            Toggles the use of XInput in Windows Standalone during runtime. Rewired must be completely reset if this value is changed.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.ConfigHelper.windowsStandalonePrimaryInputSource">
            <summary>
            Changes the primary input source in Windows Standalone during runtime. Rewired must be completely reset if this value is changed.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.ConfigHelper.osxStandalonePrimaryInputSource">
            <summary>
            Changes the primary input source in OSX Standalone during runtime. Rewired must be completely reset if this value is changed.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.ConfigHelper.linuxStandalonePrimaryInputSource">
            <summary>
            Changes the primary input source in Linux Standalone during runtime. Rewired must be completely reset if this value is changed.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.ConfigHelper.alwaysUseUnityInput">
            <summary>
            Toggles the use of Unity input during runtime. Rewired must be completely reset if this value is changed.
            This is the same as disableNativeInput.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.ConfigHelper.disableNativeInput">
            <summary>
            Toggles the use of Unity input during runtime. Rewired must be completely reset if this value is changed.
            This is the same as alwaysUseUnityInput.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.ConfigHelper.nativeMouseSupport">
            <summary>
            Toggles the use of native mouse handling during runtime. Rewired must be completely reset if this value is changed.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.ConfigHelper.enhancedDeviceSupport">
            <summary>
            Toggles the use of enhanced device support during runtime. Rewired must be completely reset if this value is changed.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.ConfigHelper.android_supportUnknownGamepads">
            <summary>
            Toggles the support of unknown gamepads on the Android platform during runtime. Rewired must be completely reset if this value is changed.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.ConfigHelper.defaultJoystickAxis2DDeadZoneType">
            <summary>
            Changes the default dead zone type for 2D joystick axes for recognized controllers. This setting can be changed without resetting Rewired.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.ConfigHelper.autoAssignJoysticks">
            <summary>
            Toggles joystick auto-assignment during runtime. This setting can be changed without resetting Rewired.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.ConfigHelper.maxJoysticksPerPlayer">
            <summary>
            Set the max number of joysticks assigned to each Player by joystick auto-assignment during runtime. This setting can be changed without resetting Rewired.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.ConfigHelper.distributeJoysticksEvenly">
            <summary>
            Toggles even joystick auto-assignment distribution among Players during runtime. This setting can be changed without resetting Rewired.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.ConfigHelper.assignJoysticksToPlayingPlayersOnly">
            <summary>
            Toggles even joystick auto-assignment to Players with isPlayer = True only during runtime. This setting can be changed without resetting Rewired.
            </summary>
        </member>
        <member name="P:Rewired.ReInput.ConfigHelper.reassignJoystickToPreviousOwnerOnReconnect">
            <summary>
            Toggles joystick auto-reassignment when re-connected to the last owning Player during runtime. This setting can be changed without resetting Rewired.
            </summary>
        </member>
        <member name="T:Rewired.ReInput.TimeManager">
            <summary>
            Manages unscaled time.
            </summary>
        </member>
        <member name="F:Rewired.InputSources.SDL2.SDL.SDL_EventType.SDL_USEREVENT">
            Events ::SDL_USEREVENT through ::SDL_LASTEVENT are for your use,
            and should be allocated with SDL_RegisterEvents()
        </member>
        <member name="F:Rewired.InputSources.SDL2.SDL.SDL_EventType.SDL_LASTEVENT">
            This last event is only for bounding internal arrays
        </member>
        <member name="T:Rewired.InputSources.SDL2.SDL.SDL_CommonEvent">
            \brief Fields shared by every event
        </member>
        <member name="T:Rewired.InputSources.SDL2.SDL.SDL_WindowEvent">
            \brief Window state change event data (event.window.*)
        </member>
        <member name="T:Rewired.InputSources.SDL2.SDL.SDL_KeyboardEvent">
            \brief Keyboard button event structure (event.key.*)
        </member>
        <member name="T:Rewired.InputSources.SDL2.SDL.SDL_TextEditingEvent">
            \brief Keyboard text editing event structure (event.edit.*)
        </member>
        <member name="T:Rewired.InputSources.SDL2.SDL.SDL_TextInputEvent">
            \brief Keyboard text input event structure (event.text.*)
        </member>
        <member name="T:Rewired.InputSources.SDL2.SDL.SDL_MouseMotionEvent">
            \brief Mouse motion event structure (event.motion.*)
        </member>
        <member name="T:Rewired.InputSources.SDL2.SDL.SDL_MouseButtonEvent">
            \brief Mouse button event structure (event.button.*)
        </member>
        <member name="T:Rewired.InputSources.SDL2.SDL.SDL_MouseWheelEvent">
            \brief Mouse wheel event structure (event.wheel.*)
        </member>
        <member name="T:Rewired.InputSources.SDL2.SDL.SDL_JoyAxisEvent">
            \brief Joystick axis motion event structure (event.jaxis.*)
        </member>
        <member name="T:Rewired.InputSources.SDL2.SDL.SDL_JoyBallEvent">
            \brief Joystick trackball motion event structure (event.jball.*)
        </member>
        <member name="T:Rewired.InputSources.SDL2.SDL.SDL_JoyHatEvent">
            \brief Joystick hat position change event structure (event.jhat.*)
        </member>
        <member name="T:Rewired.InputSources.SDL2.SDL.SDL_JoyButtonEvent">
            \brief Joystick button event structure (event.jbutton.*)
        </member>
        <member name="T:Rewired.InputSources.SDL2.SDL.SDL_JoyDeviceEvent">
            \brief Joystick device event structure (event.jdevice.*)
        </member>
        <member name="T:Rewired.InputSources.SDL2.SDL.SDL_ControllerAxisEvent">
            \brief Game controller axis motion event structure (event.caxis.*)
        </member>
        <member name="T:Rewired.InputSources.SDL2.SDL.SDL_ControllerButtonEvent">
            \brief Game controller button event structure (event.cbutton.*)
        </member>
        <member name="T:Rewired.InputSources.SDL2.SDL.SDL_ControllerDeviceEvent">
            \brief Controller device event structure (event.cdevice.*)
        </member>
        <member name="T:Rewired.InputSources.SDL2.SDL.SDL_TouchFingerEvent">
            \brief Touch finger event structure (event.tfinger.*)
        </member>
        <member name="T:Rewired.InputSources.SDL2.SDL.SDL_MultiGestureEvent">
            \brief Multiple Finger Gesture Event (event.mgesture.*)
        </member>
        <member name="T:Rewired.InputSources.SDL2.SDL.SDL_DollarGestureEvent">
            \brief Dollar Gesture Event (event.dgesture.*)
        </member>
        <member name="T:Rewired.InputSources.SDL2.SDL.SDL_DropEvent">
            \brief An event used to request a file open by the system (event.drop.*)
                   This event is disabled by default, you can enable it with SDL_EventState()
            \note If you enable this event, you must free the filename in the event.
        </member>
        <member name="T:Rewired.InputSources.SDL2.SDL.SDL_QuitEvent">
            \brief The "quit requested" event
        </member>
        <member name="T:Rewired.InputSources.SDL2.SDL.SDL_OSEvent">
            \brief OS Specific event
        </member>
        <member name="T:Rewired.InputSources.SDL2.SDL.SDL_UserEvent">
            \brief A user-defined event type (event.user.*)
        </member>
        <member name="T:Rewired.InputSources.SDL2.SDL.SDL_SysWMEvent">
              \brief A video driver dependent system event (event.syswm.*)
                     This event is disabled by default, you can enable it with SDL_EventState()
            
              \note If you want to use this event, you should include SDL_syswm.h.
        </member>
        <member name="T:Rewired.InputSources.SDL2.SDL.SDL_Event">
            \brief General event structure
        </member>
        <member name="F:Rewired.InputSources.SDL2.SDL.SDL_Scancode.SDL_SCANCODE_A">
              \name Usage page 0x07
            
              These values are from usage page 0x07 (USB keyboard page).
        </member>
        <member name="F:Rewired.InputSources.SDL2.SDL.SDL_Scancode.SDL_SCANCODE_AUDIONEXT">
              \name Usage page 0x0C
            
              These values are mapped from usage page 0x0C (USB consumer page).
        </member>
        <member name="F:Rewired.InputSources.SDL2.SDL.SDL_Scancode.SDL_SCANCODE_BRIGHTNESSDOWN">
              \name Walther keys
            
              These are values that Christian Walther added (for mac keyboard?).
        </member>
        <member name="T:Rewired.Utils.NativeTools.GenericArrayBuffer">
            <summary>
            This buffer allows you to store an Array of any type to be used as a native buffer
            and be able to dynamically determine which type you are using at runtime. (No generic T).
            Allows you to act on the buffer as a managed array or send the buffer out to unmanaged code.
            </summary>
        </member>
        <member name="T:Rewired.Utils.NativeTools.ByteArrayBuffer">
            <summary>
            Buffer for native interop. Creates a managed array and pins it for the lifetime of the object.
            </summary>
        </member>
        <member name="T:Rewired.Utils.NativeTools.ArrayBuffer`1">
            <summary>
            Buffer for native interop. Creates a managed array and pins it for the lifetime of the object.
            </summary>
        </member>
        <member name="M:Rewired.InputSources.SDL2.SDL2Joystick.ProcessAxisValue(System.Int32)">
            <summary>
            Convert from +/- 32768 to +/- 1.0f
            </summary>
        </member>
        <member name="M:Rewired.InputSources.SDL2.SDL2InputSource.GetGameControllerCount">
            <summary>
            The value returned cannot be used to iterate! Always use GetJoystickCount!
            </summary>
            <returns>Number of Game Controllers</returns>
        </member>
        <member name="T:Rewired.Dev.Tools.DirectInputJoystickElementIdentifier">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Dev.Tools.JoystickElementIdentifier">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Dev.Tools.OSXJoystickElementIdentifier">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Dev.Tools.RawInputJoystickElementIdentifier">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Dev.Tools.UnityJoystickElementIdentifier">
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Utils.Classes.Data.DictionaryNoAlloc`2">
            <summary>
            Modified version of Dictionary that doesn't generate heap allocations on iOS when doing lookups.
            Still generates allocations if doing ContainsValue or value comparisons
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Rewired.Utils.Classes.Data.Pool`1">
            <summary>
            An expandable array pool.
            Searches for first empty element before expanding.
            Safe to use with classes or structs.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Rewired.Utils.Classes.Data.Pool`1.Reset">
            <summary>
            Resets the whole array and clears all elements regardless of clearElements setting.
            </summary>
        </member>
        <member name="T:Rewired.Utils.Classes.Data.Workpool`1">
            <summary>
            A fixed-length array that is more efficient because it only works on entries that have been filled.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Rewired.Utils.Classes.Data.Workpool_int">
            <summary>
            A fixed-length array that is more efficient because it only works on entries that have been filled.
            Type: int
            </summary>
        </member>
        <member name="T:Rewired.Utils.Classes.Data.Workpool_float">
            <summary>
            A fixed-length array that is more efficient because it only works on entries that have been filled.
            Type: float
            </summary>
        </member>
        <member name="T:Rewired.Utils.Classes.Data.Workpool_bool">
            <summary>
            A fixed-length array that is more efficient because it only works on entries that have been filled.
            Type: bool
            </summary>
        </member>
        <member name="T:Rewired.Utils.Classes.Data.Workpool_Vector3">
            <summary>
            A fixed-length array that is more efficient because it only works on entries that have been filled.
            Type: Vector3
            </summary>
        </member>
        <member name="T:Rewired.Utils.Classes.Data.Workpool_object">
            <summary>
            A fixed-length array that is more efficient because it only works on entries that have been filled.
            Type: object
            </summary>
        </member>
        <member name="T:Rewired.Utils.Classes.Data.WorkQueue`1">
            <summary>
            A fixed-length array that is more efficient because it only works on entries that have been filled.
            It behaves like a queue where older items scroll off the list as new ones are added.
            However, instead of pushing every item down in the list when an entry is added, we advance the
            current position each time and wrap back to 0 when the end is reached.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Rewired.Utils.Classes.Data.Queue`1">
            <summary>
            A fixed-length list. New items are added at the end. When Process is called, the first item is taken out of the queue and the list collapsed.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Rewired.Utils.Classes.Data.ThreadSafeList`1.ProcessList(System.Action{`0})">
            <summary>
            Perform some process on the entire list with a delegate.
            List is locked during the entire iteration.
            </summary>
            <param name="del"></param>
        </member>
        <member name="M:Rewired.Utils.Classes.Data.ThreadSafeQueue`1.ProcessQueue(System.Action{`0,System.Object},System.Object)">
            <summary>
            Processes the entire queue with a delegate.
            Queue is locked during the entire iteration and the queue will be empty when finished.
            </summary>
            <param name="del"></param>
            <param name="other"></param>
        </member>
        <member name="T:Rewired.Utils.Classes.Data.UnorderedIndexMapDictionary`2">
            <summary>
            "Dictionary" that uses linear search to find entries.
            When removing keys, order is nor preserved.
            Slower than true Dictionary because it doesn't use a hash table, but no GC on iOS
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Rewired.Utils.Classes.Data.UnorderedIndexMapIntDictionary`1">
            <summary>
            int key "Dictionary" that uses linear search to find entries.
            When removing keys, order is nor preserved.
            Slower than true Dictionary because it doesn't use a hash table, but no GC on iOS
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Rewired.Utils.MathTools.MaxMagnitude(System.Single,System.Single)">
            <summary>
            Compares absolute values. If magnitude of a >= b, a will be returned.
            </summary>
        </member>
        <member name="M:Rewired.Utils.MathTools.MaxMagnitude(System.Int32,System.Int32)">
            <summary>
            Compares absolute values. If magnitude of a >= b, a will be returned.
            </summary>
        </member>
        <member name="M:Rewired.Utils.MathTools.MaxMagnitude(System.Int16,System.Int16)">
            <summary>
            Compares absolute values. If magnitude of a >= b, a will be returned.
            </summary>
        </member>
        <member name="M:Rewired.Utils.MathTools.MaxMagnitude(System.Int64,System.Int64)">
            <summary>
            Compares absolute values. If magnitude of a >= b, a will be returned.
            </summary>
        </member>
        <member name="M:Rewired.Utils.MathTools.MaxMagnitude(System.Double,System.Double)">
            <summary>
            Compares absolute values. If magnitude of a >= b, a will be returned.
            </summary>
        </member>
        <member name="M:Rewired.Utils.MathTools.MaxMagnitude(System.SByte,System.SByte)">
            <summary>
            Compares absolute values. If magnitude of a >= b, a will be returned.
            </summary>
        </member>
        <member name="M:Rewired.Utils.MathTools.MinMagnitude(System.Single,System.Single)">
            <summary>
            Compares absolute values. If magnitude of a &lt;= b, a will be returned.
            </summary>
        </member>
        <member name="M:Rewired.Utils.MathTools.MinMagnitude(System.Int32,System.Int32)">
            <summary>
            Compares absolute values. If magnitude of a &lt;= b, a will be returned.
            </summary>
        </member>
        <member name="M:Rewired.Utils.MathTools.MinMagnitude(System.Int16,System.Int16)">
            <summary>
            Compares absolute values. If magnitude of a &lt;= b, a will be returned.
            </summary>
        </member>
        <member name="M:Rewired.Utils.MathTools.MinMagnitude(System.Int64,System.Int64)">
            <summary>
            Compares absolute values. If magnitude of a &lt;= b, a will be returned.
            </summary>
        </member>
        <member name="M:Rewired.Utils.MathTools.MinMagnitude(System.Double,System.Double)">
            <summary>
            Compares absolute values. If magnitude of a &lt;= b, a will be returned.
            </summary>
        </member>
        <member name="M:Rewired.Utils.MathTools.MinMagnitude(System.SByte,System.SByte)">
            <summary>
            Compares absolute values. If magnitude of a &lt;= b, a will be returned.
            </summary>
        </member>
        <member name="M:Rewired.Utils.UnityTools.DetermineWebplayerPlatformType(Rewired.Platforms.Platform,Rewired.Platforms.EditorPlatform)">
            <summary>
            Only works if called from within #if UNITY_WEBPLAYER so we KNOW this a webplayer.
            Always call before setting platform to Webplayer.
            Platform should have info about the real system platform based on #ifs
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rewired.Utils.MiscTools.CreateGuidHashSHA256(System.String)">
            <summary>
            Generate a GUID from a string by first creating a SHA256 hash, then truncating to the first 16 bytes to create the GUID.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:Rewired.Platforms.XboxOne.IXboxOneInputSource">
            <summary>
            Interface for Xbox One input source for accessing special functions.
            </summary>
            <exclude></exclude>
        </member>
        <member name="T:Rewired.Platforms.XboxOne.XboxOneGamepadExtension">
            <summary>
            Allows access to platform-specific controller functions such as vibration.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.XboxOne.XboxOneGamepadExtension.SetVibration(System.Int32,System.Single)">
            <summary>
            Sets vibration level for a motor at a specified index.
            </summary>
            <param name="motorIndex">Motor index</param>
            <param name="motorLevel">Motor level [float: 0.0 - 1.0]</param>
        </member>
        <member name="M:Rewired.Platforms.XboxOne.XboxOneGamepadExtension.SetVibration(System.Int32,System.Single,System.Boolean)">
            <summary>
            Sets vibration level for a motor at a specified index.
            </summary>
            <param name="motorIndex">Motor index</param>
            <param name="motorLevel">Motor level [float: 0.0 - 1.0]</param>
            <param name="stopOtherMotors">Stop other motors?</param>
        </member>
        <member name="M:Rewired.Platforms.XboxOne.XboxOneGamepadExtension.GetVibration(System.Int32)">
            <summary>
            Gets vibration level for a motor at a specified index.
            </summary>
            <param name="motorIndex">Motor index</param>
            <returns>Motor level [float: 0.0 - 1.0]</returns>
        </member>
        <member name="M:Rewired.Platforms.XboxOne.XboxOneGamepadExtension.GetVibration(Rewired.Platforms.XboxOne.XboxOneGamepadMotorType)">
            <summary>
            Gets vibration level for a specific motor.
            </summary>
            <param name="motor">Motor type</param>
            <returns>Motor level [float: 0.0 - 1.0]</returns>
        </member>
        <member name="M:Rewired.Platforms.XboxOne.XboxOneGamepadExtension.StopVibration">
            <summary>
            Stops vibration on all motors.
            </summary>
        </member>
        <member name="M:Rewired.Platforms.XboxOne.XboxOneGamepadExtension.SetVibration(Rewired.Platforms.XboxOne.XboxOneGamepadMotorType,System.Single)">
            <summary>
            Sets vibration leves on an individual motor.
            </summary>
            <param name="motor">Motor type</param>
            <param name="motorLevel">Motor level [float: 0.0 - 1.0]</param>
        </member>
        <member name="M:Rewired.Platforms.XboxOne.XboxOneGamepadExtension.SetVibration(Rewired.Platforms.XboxOne.XboxOneGamepadMotorType,System.Single,System.Boolean)">
            <summary>
            Sets vibration level on an individual motor.
            </summary>
            <param name="motor">Motor type</param>
            <param name="motorLevel">Motor level [float: 0.0 - 1.0]</param>
            <param name="stopOtherMotors">Stop other motors?</param>
        </member>
        <member name="M:Rewired.Platforms.XboxOne.XboxOneGamepadExtension.SetVibration(System.Single,System.Single)">
            <summary>
            Sets vibration level for left and right motors.
            </summary>
            <param name="leftMotorLevel">float: 0.0 - 1.0</param>
            <param name="rightMotorLevel">float: 0.0 - 1.0</param>
        </member>
        <member name="M:Rewired.Platforms.XboxOne.XboxOneGamepadExtension.SetVibration(System.Single,System.Single,System.Boolean)">
            <summary>
            Sets vibration level for left and right motors.
            </summary>
            <param name="leftMotorLevel">float: 0.0 - 1.0</param>
            <param name="rightMotorLevel">float: 0.0 - 1.0</param>
            <param name="stopOtherMotors">Stop other motors?</param>
        </member>
        <member name="M:Rewired.Platforms.XboxOne.XboxOneGamepadExtension.SetVibration(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets vibration levels on all 4 motors.
            </summary>
            <param name="leftMotorLevel">Left motor level [float: 0.0 - 1.0]</param>
            <param name="rightMotorLevel">Right motor level [float: 0.0 - 1.0]</param>
            <param name="leftTriggerLevel">Left trigger level [float: 0.0 - 1.0]</param>
            <param name="rightTriggerLevel">Right trigger level [float: 0.0 - 1.0]</param>
        </member>
        <member name="M:Rewired.Platforms.XboxOne.XboxOneGamepadExtension.PulseVibrateMotor(Rewired.Platforms.XboxOne.XboxOneGamepadMotorType,System.Single,System.Single,System.Single)">
            <summary>
            Pulses the vibration motor for a specified duration.
            </summary>
            <param name="motor">Motor type</param>
            <param name="startLevel">Start motor level [float: 0.0 - 1.0]</param>
            <param name="endLevel">End motor level [float: 0.0 - 1.0]</param>
            <param name="duration">Duration in seconds</param>
        </member>
        <member name="P:Rewired.Platforms.XboxOne.XboxOneGamepadExtension.xboxOneUserId">
            <summary>
            The Xbox One user id to which this controller is assigned.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.XboxOne.XboxOneGamepadExtension.xboxOneJoystickId">
            <summary>
            The Xbox One joystick id for this controller.
            </summary>
        </member>
        <member name="P:Rewired.Platforms.XboxOne.XboxOneGamepadExtension.vibrationMotorCount">
            <summary>
            The number of vibration motors in this controller.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.XboxOne.XboxOneGamepadMotorType">
            <summary>
            XBox One game pad motors. Used for vibration.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.XboxOne.XboxOneGamepadVibration">
            <summary>
            For passing Xbox One gamepad vibration data.
            </summary>
        </member>
        <member name="T:Rewired.Platforms.XboxOne.XboxOneInputSource">
            <summary>
            Input source for the Xbox One platform.
            </summary>
        </member>
    </members>
</doc>
